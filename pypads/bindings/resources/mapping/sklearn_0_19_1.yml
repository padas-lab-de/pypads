fragments:
  default_model:
    !!python/pPath '__init__':
      hooks: pypads_init
    !!python/rSeg '(fit|.fit_predict|fit_transform)$':
      hooks: pypads_fit
    !!python/rSeg '(fit_predict|predict|score)$':
      hooks: pypads_predict
    !!python/rSeg '(fit_transform|transform)$':
      hooks: pypads_transform
mappings:
  !!python/pPath 'sklearn':
    !!python/pPath __init__:
      import-hooks: [ "pypads_import" ]
    data:
      '@json-ld': # Path to json-lds to be added to the ontology with onto-pads
        - metric.@schema
        - metric.algorithm.@schema
        - dataset.@schema
        - estimator.@schema # A-Box estimator class
        - estimator.algorithm.@schema # T-Box algorithm mathematical concept
        - estimator.parameters.model_parameters.algorithm.@schema # T-Box parameter info ...
        - estimator.parameters.optimisation_parameters.algorithm.@schema
        - estimator.parameters.execution_parameters.algorithm.@schema
        - estimator.parameters.model_parameters.@schema # A-Box parameter ...
        - estimator.parameters.optimisation_parameters.@schema
        - estimator.parameters.execution_parameters.@schema
      '@rdf':
        mapped_by: http://www.padre-lab.eu/PyPadsInjection
        implemented_in: http://www.padre-lab.eu/onto/Sklearn#0.19.1
    !!python/pPath 'base.BaseEstimator':
      ;default_model: null
      __init__:
        hooks: pypads_estimator
      data:
        '@rdf':
          in_context: http://www.padre-lab.eu/onto/Estimator
    !!python/rSeg '(RegressorMixin|ClassifierMixin|DensityMixin)':
      !!python/pPath 'score':
        hooks: pypads_metric
    !!python/pPath 'metrics':
      !!python/rSeg '^(?!_).+':
        data:
          '@rdf':
            in_context: http://www.padre-lab.eu/onto/Metric
        hooks: pypads_metric
    !!python/pPath 'metrics.cluster':
      !!python/rSeg '^(?!_).+':
        data:
          '@rdf':
            in_context: http://www.padre-lab.eu/onto/ClusterMetric
        hooks: pypads_metric
    !!python/pPath 'metrics.cluster.supervised':
      !!python/rSeg '^(?!_).+':
        data:
          '@rdf':
            in_context: http://www.padre-lab.eu/onto/SupervisedClusterMetric
        hooks: pypads_metric
    !!python/pPath 'metrics.cluster.unsupervised':
      !!python/rSeg '^(?!_).+':
        data:
          '@rdf':
            in_context: http://www.padre-lab.eu/onto/UnsupervisedClusterMetric
        hooks: pypads_metric
    !!python/pPath 'metrics.regression':
      !!python/rSeg '^(?!_).+':
        data:
          '@rdf':
            in_context: http://www.padre-lab.eu/onto/RegressionMetric
        hooks: pypads_metric
    !!python/pPath 'metrics.classification':
      !!python/rSeg '^(?!_).+':
        data:
          '@rdf':
            in_context: http://www.padre-lab.eu/onto/ClassificationMetric
        hooks: pypads_metric
      !!python/pPath 'accuracy_score':
        hooks: pypads_metric
        data:
          metric:
            '@schema':
              '@id': padre:sklearn.metrics.classification.AccuracyScore
              '@type': padre:MetricImplementation
              padre:documentation: https://scikit-learn.org/stable/modules/generated/sklearn.metrics.accuracy_score.html#sklearn.metrics.accuracy_score
              padre:implements: padre:AccuracyScore
              rdfs:comment: In multilabel classification, this function computes subset accuracy;
                the set of labels predicted for a sample must *exactly* match the
                corresponding set of labels in y_true.
              rdfs:label: Sklearn implementation of Accuracy classification score
              algorithm:
                '@schema':
                  '@id': padre:AccuracyScore
                  '@type': padre:MetricAlgorithm
                  padre:documentation: ['https://en.wikipedia.org/wiki/Accuracy_and_precision', 'https://scikit-learn.org/stable/modules/model_evaluation.html#accuracy-score']
                  rdfs:comment: Fraction (default) or the count (normalize=False) of correct predictions.
                  rdfs:label: Accuracy classification score
      !!python/pPath 'confusion_matrix':
        hooks: pypads_metric
        data:
          metric:
            '@schema':
              '@id': padre:sklearn.metrics.classification.ConfusionMatrix
              '@type': padre:MetricImplementation
              padre:documentation: https://scikit-learn.org/stable/modules/generated/sklearn.metrics.confusion_matrix.html#sklearn.metrics.confusion_matrix
              padre:implements: padre:ConfusionMatrix
              rdfs:comment: Compute confusion matrix to evaluate the accuracy of a classification.
              rdfs:label: Sklearn implementation of Confusion matrix
              algorithm:
                '@schema':
                  '@id': padre:ConfusionMatrix
                  '@type': padre:MetricAlgorithm
                  padre:documentation: ['https://scikit-learn.org/stable/modules/model_evaluation.html#confusion-matrix', 'https://en.wikipedia.org/wiki/Confusion_matrix']
                  rdfs:comment: By definition a confusion matrix :math:`C` is such that :math:`C_{i, j}`
                    is equal to the number of observations known to be in group :math:`i` but
                    predicted to be in group :math:`j`.
                  rdfs:label: Confusion matrix
      !!python/pPath 'multilabel_confusion_matrix':
        hooks: pypads_metric
        data:
          metric:
            '@schema':
              '@id': padre:sklearn.metrics.classification.MultilabelConfusionMatrix
              '@type': padre:MetricImplementation
              padre:documentation: https://scikit-learn.org/stable/modules/generated/sklearn.metrics.multilabel_confusion_matrix.html#sklearn.metrics.multilabel_confusion_matrix
              padre:implements: padre:MultilabelConfusionMatrix
              rdfs:comment: Compute class-wise (default) or sample-wise (samplewise=True) multilabel
                confusion matrix to evaluate the accuracy of a classification, and output
                confusion matrices for each class or sample.
              rdfs:label: Sklearn implementation of Multilabel Confusion matrix
              algorithm:
                '@schema':
                  '@id': padre:MultilabelConfusionMatrix
                  '@type': padre:MetricAlgorithm
                  padre:documentation: https://scikit-learn.org/stable/modules/model_evaluation.html#multilabel-confusion-matrix
                  rdfs:comment: In multilabel confusion matrix :math:`MCM`, the count of true negatives
                    is :math:`MCM_{:,0,0}`, false negatives is :math:`MCM_{:,1,0}`,
                    true positives is :math:`MCM_{:,1,1}` and false positives is
                    :math:`MCM_{:,0,1}`.
                  rdfs:label: Multilabel Confusion matrix
      !!python/pPath 'cohen_kappa_score':
        hooks: pypads_metric
        data:
          metric:
            '@schema':
              '@id': padre:sklearn.metrics.classification.CohenKappaScore
              '@type': padre:MetricImplementation
              padre:documentation: https://scikit-learn.org/stable/modules/generated/sklearn.metrics.cohen_kappa_score.html#sklearn.metrics.cohen_kappa_score
              padre:implements: padre:CohenKappaScore
              rdfs:comment: This function computes Cohen's kappa [1]_, a score that expresses the level
                of agreement between two annotators on a classification problem.
              rdfs:label: Sklearn implementation of Cohen's kappa
              algorithm:
                '@schema':
                  '@id': padre:CohenKappaScore
                  '@type': padre:MetricAlgorithm
                  padre:documentation: ['https://scikit-learn.org/stable/modules/model_evaluation.html#cohen-kappa', 'https://en.wikipedia.org/wiki/Cohen%27s_kappa']
                  rdfs:comment: "A statistic that measures inter-annotator agreement."
                  rdfs:label: Cohen's kappa
      !!python/pPath 'jaccard_similarity_score':
        hooks: pypads_metric
        data:
          metric:
            '@schema':
              '@id': padre:sklearn.metrics.classification.JaccardSimilarityScore
              '@type': padre:MetricImplementation
              padre:documentation: https://scikit-learn.org/stable/modules/generated/sklearn.metrics.jaccard_score.html#sklearn.metrics.jaccard_score
              padre:implements: padre:JaccardScore
              rdfs:comment: null
              rdfs:label: Old sklearn implementation of Jaccard Score
      !!python/pPath 'jaccard_score':
        hooks: pypads_metric
        data:
          metric:
            '@schema':
              '@id': padre:sklearn.metrics.classification.JaccardScore
              '@type': padre:MetricImplementation
              padre:documentation: https://scikit-learn.org/stable/modules/generated/sklearn.metrics.jaccard_score.html#sklearn.metrics.jaccard_score
              padre:implements: padre:JaccardScore
              rdfs:comment: The Jaccard index [1], or Jaccard similarity coefficient, defined as the size of the intersection divided by the size of the union of two label sets, is used to compare set of predicted labels for a sample to the corresponding set of labels in y_true.
              rdfs:label: Sklearn implementation of Jaccard Similarity Score
              algorithm:
                '@schema':
                  '@id': padre:JaccardScore
                  '@type': padre:MetricAlgorithm
                  padre:documentation: ['https://scikit-learn.org/stable/modules/model_evaluation.html#jaccard-similarity-score', 'https://en.wikipedia.org/wiki/Jaccard_index']
                  rdfs:comment: Aaverage of Jaccard similarity coefficients, also called the Jaccard index, between pairs of label sets.
                  rdfs:label: Jaccard Similarity Score
      !!python/pPath 'matthews_corrcoef':
        hooks: pypads_metric
        data:
          metric:
            '@schema':
              '@id': padre:sklearn.metrics.classification.MatthewsCorrelationCoefficient
              '@type': padre:MetricImplementation
              padre:documentation: https://scikit-learn.org/stable/modules/generated/sklearn.metrics.matthews_corrcoef.html#sklearn.metrics.matthews_corrcoef
              padre:implements: padre:MatthewsCorrelationCoefficient
              rdfs:comment: Compute the Matthews correlation coefficient (MCC)
              rdfs:label: Sklearn implementation of Matthews correlation coefficient
              algorithm:
                '@schema':
                  '@id': padre:MatthewsCorrelationCoefficient
                  '@type': padre:MetricAlgorithm
                  padre:documentation: ['https://scikit-learn.org/stable/modules/model_evaluation.html#matthews-corrcoef', 'https://en.wikipedia.org/wiki/Matthews_correlation_coefficient']
                  rdfs:comment: The Matthews correlation coefficient is used in machine learning as a measure of the quality of binary and multiclass classifications. It takes into account true and false positives and negatives and is generally regarded as a balanced measure which can be used even if the classes are of very different sizes. The MCC is in essence a correlation coefficient value between -1 and +1. A coefficient of +1 represents a perfect prediction, 0 an average random prediction and -1 an inverse prediction. The statistic is also known as the phi coefficient.
                  rdfs:label: Matthews correlation coefficient (MCC)
      !!python/pPath 'zero_one_loss':
        hooks: pypads_metric
        data:
          metric:
            '@schema':
              '@id': padre:sklearn.metrics.classification.ZeroOneLoss
              '@type': padre:MetricImplementation
              padre:documentation: https://scikit-learn.org/stable/modules/generated/sklearn.metrics.zero_one_loss.html#sklearn.metrics.zero_one_loss
              padre:implements: padre:ZeroOneLoss
              rdfs:comment: Zero-one classification loss.
              rdfs:label: Sklearn implementation of Zero-one classification loss
              algorithm:
                '@schema':
                  '@id': padre:ZeroOneLoss
                  '@type': padre:MetricAlgorithm
                  padre:documentation: ['https://scikit-learn.org/stable/modules/model_evaluation.html#zero-one-loss']
                  rdfs:comment: Sum or the average of the 0-1 classification loss.
                  rdfs:label: Zero-one classification loss
      !!python/pPath 'f1_score':
        hooks: pypads_metric
        data:
          metric:
            '@schema':
              '@id': padre:sklearn.metrics.classification.F1Score
              '@type': padre:MetricImplementation
              padre:documentation: https://scikit-learn.org/stable/modules/generated/sklearn.metrics.f1_score.html#sklearn.metrics.f1_score
              padre:implements: padre:FBetaScore
              rdfs:comment: The F1 score can be interpreted as a weighted average of the precision and recall, where an F1 score reaches its best value at 1 and worst score at 0. The relative contribution of precision and recall to the F1 score are equal.
              rdfs:label: Sklearn implementation of balanced F-score
      !!python/pPath 'fbeta_score':
        hooks: pypads_metric
        data:
          metric:
            '@schema':
              '@id': padre:sklearn.metrics.classification.FBetaScore
              '@type': padre:MetricImplementation
              padre:documentation: https://scikit-learn.org/stable/modules/generated/sklearn.metrics.fbeta_score.html#sklearn.metrics.fbeta_score
              padre:implements: padre:FScore
              rdfs:comment: Compute the F-beta score
              rdfs:label: Sklearn implementation of F-score
              algorithm:
                '@schema':
                  '@id': padre:FBetaScore
                  '@type': padre:MetricAlgorithm
                  padre:documentation: ['https://scikit-learn.org/stable/modules/model_evaluation.html#precision-recall-f-measure-metrics', 'https://en.wikipedia.org/wiki/F-score']
                  rdfs:comment: The F-beta score is the weighted harmonic mean of precision and recall, reaching its optimal value at 1 and its worst value at 0.
                  rdfs:label: F-score
      !!python/pPath 'precision_score':
        hooks: pypads_metric
        data:
          metric:
            '@schema':
              '@id': padre:sklearn.metrics.classification.PrecisionScore
              '@type': padre:MetricImplementation
              padre:documentation: https://scikit-learn.org/stable/modules/generated/sklearn.metrics.precision_score.html#sklearn.metrics.precision_score
              padre:implements: padre:PrecisionScore
              rdfs:comment: The precision is the ratio tp / (tp + fp) where tp is the number of true positives and fp the number of false positives. The precision is intuitively the ability of the classifier not to label as positive a sample that is negative.
              rdfs:label: Sklearn implementation of Precision
              algorithm:
                '@schema':
                  '@id': padre:PrecisionScore
                  '@type': padre:MetricAlgorithm
                  padre:documentation: https://scikit-learn.org/stable/modules/model_evaluation.html#precision-recall-f-measure-metrics
                  rdfs:comment: Intuitively, precision is the ability of the classifier not to label as positive a sample that is negative.
                  rdfs:label: Precision
      !!python/pPath 'recall_score':
        hooks: pypads_metric
        data:
          metric:
            '@schema':
              '@id': padre:sklearn.metrics.classification.RecallScore
              '@type': padre:MetricImplementation
              padre:documentation: https://scikit-learn.org/stable/modules/generated/sklearn.metrics.recall_score.html#sklearn.metrics.recall_score
              padre:implements: padre:RecallScore
              rdfs:comment: The recall is the ratio tp / (tp + fn) where tp is the number of true positives and fn the number of false negatives. The recall is intuitively the ability of the classifier to find all the positive samples.
              rdfs:label: Sklearn implementation of Recall
              algorithm:
                '@schema':
                  '@id': padre:RecallScore
                  '@type': padre:MetricAlgorithm
                  padre:documentation: https://scikit-learn.org/stable/modules/model_evaluation.html#precision-recall-f-measure-metrics
                  rdfs:comment: Intuitively, recall is the ability of the classifier to find all the positive samples.
                  rdfs:label: Recall
      !!python/pPath 'balanced_accuracy_score':
        hooks: pypads_metric
        data:
          metric:
            '@schema':
              '@id': padre:sklearn.metrics.classification.BalancedAccuracyScore
              '@type': padre:MetricImplementation
              padre:documentation: https://scikit-learn.org/stable/modules/generated/sklearn.metrics.balanced_accuracy_score.html#sklearn.metrics.balanced_accuracy_score
              padre:implements: padre:BalancedAccuracyScore
              rdfs:comment: The balanced accuracy in binary and multiclass classification problems to deal with imbalanced datasets. It is defined as the average of recall obtained on each class.
              rdfs:label: Sklearn implementation of Balanced Accuracy
              algorithm:
                '@schema':
                  '@id': padre:BalancedAccuracyScore
                  '@type': padre:MetricAlgorithm
                  padre:documentation: https://scikit-learn.org/stable/modules/model_evaluation.html#balanced-accuracy-score
                  rdfs:comment: Balanced Accuracy is the macro-average of recall scores per class or, equivalently, raw accuracy where each sample is weighted according to the inverse prevalence of its true class. Thus for balanced datasets, the score is equal to accuracy.
                  rdfs:label: Balanced Accuracy
      !!python/pPath 'hamming_loss':
        hooks: pypads_metric
        data:
          metric:
            '@schema':
              '@id': padre:sklearn.metrics.classification.HammingLoss
              '@type': padre:MetricImplementation
              padre:documentation: https://scikit-learn.org/stable/modules/generated/sklearn.metrics.hamming_loss.html#sklearn.metrics.hamming_loss
              padre:implements: padre:HammingLoss
              rdfs:comment: Computes the average Hamming loss.
              rdfs:label: Sklearn implementation of Hamming Loss
              algorithm:
                '@schema':
                  '@id': padre:HammingLoss
                  '@type': padre:MetricAlgorithm
                  padre:documentation: ['https://scikit-learn.org/stable/modules/model_evaluation.html#hamming-loss', 'https://en.wikipedia.org/wiki/Hamming_distance']
                  rdfs:comment: The Hamming loss is the fraction of labels that are incorrectly predicted.
                  rdfs:label: Hamming Loss
      !!python/pPath 'log_loss':
        hooks: pypads_metric
        data:
          metric:
            '@schema':
              '@id': padre:sklearn.metrics.classification.LogLoss
              '@type': padre:MetricImplementation
              padre:documentation: https://scikit-learn.org/stable/modules/generated/sklearn.metrics.log_loss.html#sklearn.metrics.log_loss
              padre:implements: padre:LogLoss
              rdfs:comment: Computes the logistic loss.
              rdfs:label: Sklearn implementation of Logistic Loss
              algorithm:
                '@schema':
                  '@id': padre:LogLoss
                  '@type': padre:MetricAlgorithm
                  padre:documentation: https://scikit-learn.org/stable/modules/model_evaluation.html#log-loss
                  rdfs:comment: Log loss, also called logistic regression loss or cross-entropy loss, is defined on probability estimates. It is commonly used in (multinomial) logistic regression and neural networks, as well as in some variants of expectation-maximization, and can be used to evaluate the probability outputs of a classifier instead of its discrete predictions.
                  rdfs:label: ['logistic loss', 'cross-entropy loss']
      !!python/pPath 'hinge_loss':
        hooks: pypads_metric
        data:
          metric:
            '@schema':
              '@id': padre:sklearn.metrics.classification.HingeLoss
              '@type': padre:MetricImplementation
              padre:documentation: https://scikit-learn.org/stable/modules/generated/sklearn.metrics.hinge_loss.html#sklearn.metrics.hinge_loss
              padre:implements: padre:HingeLoss
              rdfs:comment: The hinge_loss function computes the average distance between the model and the data using hinge loss, a one-sided metric that considers only prediction errors. (Hinge loss is used in maximal margin classifiers such as support vector machines.)
              rdfs:label: Sklearn implementation of Average Hinge Loss
              algorithm:
                '@schema':
                  '@id': padre:HingeLoss
                  '@type': padre:MetricAlgorithm
                  padre:documentation: ['https://scikit-learn.org/stable/modules/model_evaluation.html#hinge-loss', 'https://en.wikipedia.org/wiki/Hinge_loss']
                  rdfs:comment: In machine learning, the hinge loss is a loss function used for training classifiers. The hinge loss is used for "maximum-margin" classification, most notably for support vector machines.
                  rdfs:label: Average hinge loss
      !!python/pPath 'brier_score_loss':
        hooks: pypads_metric
        data:
          metric:
            '@schema':
              '@id': padre:sklearn.metrics.classification.BrierScoreLoss
              '@type': padre:MetricImplementation
              padre:documentation: https://scikit-learn.org/stable/modules/generated/sklearn.metrics.brier_score_loss.html#sklearn.metrics.brier_score_loss
              padre:implements: padre:BrierScoreLoss
              rdfs:comment: Compute the Brier score.
              rdfs:label: Sklearn implementation of Brier Score
              algorithm:
                '@schema':
                  '@id': padre:BrierScoreLoss
                  '@type': padre:MetricAlgorithm
                  padre:documentation: 'https://en.wikipedia.org/wiki/Brier_score'
                  rdfs:comment: The smaller the Brier score, the better, hence the naming with “loss”. Across all items in a set N predictions, the Brier score measures the mean squared difference between (1) the predicted probability assigned to the possible outcomes for item i, and (2) the actual outcome. Therefore, the lower the Brier score is for a set of predictions, the better the predictions are calibrated. Note that the Brier score always takes on a value between zero and one, since this is the largest possible difference between a predicted probability (which must be between zero and one) and the actual outcome (which can take on values of only 0 and 1). The Brier loss is composed of refinement loss and calibration loss. The Brier score is appropriate for binary and categorical outcomes that can be structured as true or false, but is inappropriate for ordinal variables which can take on three or more values (this is because the Brier score assumes that all possible outcomes are equivalently “distant” from one another). Which label is considered to be the positive label is controlled via the parameter pos_label, which defaults to 1.
                  rdfs:label: Brier Score
    !!python/pPath 'datasets.base':
      !!python/rSeg '(?!^load_data$)load_.*':
        data:
          '@rdf':
            in_context: http://www.padre-lab.eu/onto/Dataset
        hooks: pypads_dataset
      !!python/rSeg 'load_iris':
        data:
          dataset:
            "@schema":
              '@id': padre:Iris
              '@type': padre:MultivariatDataset
              padre:documentation: https://scikit-learn.org/stable/datasets/index.html#iris-dataset
              padre:author: R.A. Fisher
              rdfs:label: Iris plants dataset
              rdfs:comment: The famous Iris database, first used by Sir R.A. Fisher. The dataset is taken from Fisher’s paper. Note that it’s the same as in R, but not as in the UCI Machine Learning Repository, which has two wrong data points. This is perhaps the best known database to be found in the pattern recognition literature. Fisher’s paper is a classic in the field and is referenced frequently to this day. (See Duda & Hart, for example.) The data set contains 3 classes of 50 instances each, where each class refers to a type of iris plant. One class is linearly separable from the other 2; the latter are NOT linearly separable from each other.
              padre:hasCharacteristic:
                - '@id': padre:Iris#InstanceNumber
                  '@type': padre:InstanceNumber
                  rdfs:label: Instance Number
                  padre:dataType: padre:Integer
                  padre:hasData: 150
                - '@id': padre:Iris#ClassDistribution
                  '@type': padre:ClassDistribution
                  rdfs:label: Class Distribution
                  padre:dataType: padre:Float
                  padre:hasData:
                    - '@id': padre:Iris#SetosaShare
                      '@type': padre:ClassShare
                      padre:share: 33.3
                      padre:of: padre:Iris#Setosa
                    - '@id': padre:Iris#VersicolourShare
                      '@type': padre:ClassShare
                      padre:share: 33.3
                      padre:of: padre:Iris#Versicolour
                    - '@id': padre:Iris#VirginicaShare
                      '@type': padre:ClassShare
                      padre:share: 33.3
                      padre:of: padre:Iris#Virginica
              padre:hasFeature:
                - '@id': padre:Iris#SepalLength
                  '@type': padre:Feature
                  rdfs:label: Sepal Length
                  padre:unitType: padre:Length
                  padre:unit: padre:CentiMeter
                  padre:dataType: padre:Integer
                  padre:measurement: padre:Ratio
                - '@id': padre:Iris#SepalWidth
                  '@type': padre:Feature
                  rdfs:label: Sepal Width
                  padre:unitType: padre:Length
                  padre:unit: padre:CentiMeter
                  padre:dataType: padre:Integer
                  padre:measurement: padre:Ratio
                - '@id': padre:Iris#PetalLength
                  '@type': padre:Feature
                  rdfs:label: Petal Length
                  padre:unitType: padre:Length
                  padre:unit: padre:CentiMeter
                  padre:dataType: padre:Integer
                  padre:measurement: padre:Ratio
                - '@id': padre:Iris#PetalWidth
                  '@type': padre:Feature
                  rdfs:label: Petal Width
                  padre:unitType: padre:Length
                  padre:unit: padre:CentiMeter
                  padre:dataType: padre:Integer
                  padre:measurement: padre:Ratio
                - '@id': padre:Iris#Class
                  '@type': padre:Classification
                  rdfs:label: Classification
                  padre:dataType: padre:Character
                  padre:measurement: padre:Nominal
                  padre:hasClass:
                    - '@id': padre:Iris#Setosa
                      '@type': padre:ClassData
                    - '@id': padre:Iris#Versicolour
                      '@type': padre:ClassData
                    - '@id': padre:Iris#Virginica
                      '@type': padre:ClassData
        hooks: pypads_dataset
    #    !!python/pPath 'ensemble.BaseEnsemble':
    #      !!python/pPath 'fit':
    #        data:
    #          '@rdf':
    #            in_context: http://www.padre-lab.eu/onto/Ensemble
    #        hooks:
    #          - pypads_param_search
    #          - pypads_fit
    !!python/pPath 'model_selection':
      !!python/pPath '_search.BaseSearchCV':
        !!python/pPath 'fit':
          data:
            '@rdf':
              in_context: http://www.padre-lab.eu/onto/ParameterSearch
          hooks:
            - pypads_param_search
            - pypads_fit
        !!python/pPath 'predict':
          hooks: pypads_predict
      !!python/pPath '_validation._fit_and_score':
        data:
          '@rdf':
            in_context: http://www.padre-lab.eu/onto/ParameterSearchExecution
        hooks:
          - pypads_param_search_exec
    !!python/pPath 'model_selection._split':
      !!python/pPath 'BaseCrossValidator':
        !!python/pPath 'split':
          data:
            '@rdf':
              in_context: http://www.padre-lab.eu/onto/Splitting
          hooks:
            - pypads_split
      !!python/pPath 'BaseShuffleSplit.split':
        data:
          '@rdf':
            in_context: http://www.padre-lab.eu/onto/Splitting
        hooks:
          - pypads_split
    :calibration.CalibratedClassifierCV:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.calibration.CalibratedClassifierCV
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:CalibratedClassifierCV
            rdfs:comment: null
            rdfs:label: probability calibration with cross validation
          algorithm:
            '@schema':
              '@id': padre:CalibratedClassifierCV
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: probability calibration with cross validation
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.calibration.CalibratedClassifierCV/base_estimator
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.calibration.CalibratedClassifierCV/base_estimator
                  padre:implements: padre:CalibratedClassifierCV/base_estimator
                  padre:optional: 'False'
                  padre:path: base_estimator
                  padre:value_default: None
                  padre:value_type: '{object, None}'
                  rdfs:comment: 'The classifier whose output decision function needs
                  to be calibrated to offer more accurate prediction probability outputs. '
                  rdfs:label: base_estimator
                algorithm:
                  '@schema':
                    '@id': padre:CalibratedClassifierCV/base_estimator
                    '@type': padre:ModelParameters
                    padre:configures: padre:CalibratedClassifierCV
              - '@schema':
                  '@id': padre:sklearn.calibration.CalibratedClassifierCV/calibration_method
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.calibration.CalibratedClassifierCV/calibration_method
                  padre:implements: padre:CalibratedClassifierCV/calibration_method
                  padre:optional: 'False'
                  padre:path: method
                  padre:value_default: '''sigmoid'''
                  padre:value_type: '{''sigmoid'', ''isotonic''}'
                  rdfs:comment: The method to use for calibration.
                  rdfs:label: calibration_method
                algorithm:
                  '@schema':
                    '@id': padre:CalibratedClassifierCV/calibration_method
                    '@type': padre:ModelParameters
                    padre:configures: padre:CalibratedClassifierCV
              - '@schema':
                  '@id': padre:sklearn.calibration.CalibratedClassifierCV/cross_validation
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.calibration.CalibratedClassifierCV/cross_validation
                  padre:implements: padre:CalibratedClassifierCV/cross_validation
                  padre:optional: 'True'
                  padre:path: cv
                  padre:value_default: '3'
                  padre:value_type: '{integer, object (cross-validation generator),  iterable
                  yielding train and tests splits, None, ''prefit'''
                  rdfs:comment: Determines the cross-validation splitting strategy.
                  rdfs:label: cross_validation
                algorithm:
                  '@schema':
                    '@id': padre:CalibratedClassifierCV/cross_validation
                    '@type': padre:ModelParameters
                    padre:configures: padre:CalibratedClassifierCV
            optimisation_parameters: []
    :cluster.affinity_propagation_.AffinityPropagation:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.cluster.affinity_propagation_.AffinityPropagation
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:AffinityPropagation
            rdfs:comment: null
            rdfs:label: affinity propagation clustering
          algorithm:
            '@schema':
              '@id': padre:AffinityPropagation
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: affinity propagation clustering
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.cluster.affinity_propagation_.AffinityPropagation/damping
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cluster.affinity_propagation_.AffinityPropagation/damping
                  padre:implements: padre:AffinityPropagation/damping
                  padre:optional: 'True'
                  padre:path: damping
                  padre:value_default: '0.5'
                  padre:value_type: float (between 0.5 and 1)
                  rdfs:comment: Damping factor is the extent to which the current
                    value is maintained relative to incoming values (weighted 1 - damping).
                    This in order to avoid numerical oscillations when updating these
                    values (messages).
                  rdfs:label: damping
                algorithm:
                  '@schema':
                    '@id': padre:AffinityPropagation/damping
                    '@type': padre:ModelParameters
                    padre:configures: padre:AffinityPropagation
              - '@schema':
                  '@id': padre:sklearn.cluster.affinity_propagation_.AffinityPropagation/copy
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cluster.affinity_propagation_.AffinityPropagation/copy
                  padre:implements: padre:AffinityPropagation/copy
                  padre:optional: 'True'
                  padre:path: copy
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: Make a copy of input data.
                  rdfs:label: copy
                algorithm:
                  '@schema':
                    '@id': padre:AffinityPropagation/copy
                    '@type': padre:ModelParameters
                    padre:configures: padre:AffinityPropagation
              - '@schema':
                  '@id': padre:sklearn.cluster.affinity_propagation_.AffinityPropagation/preference
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cluster.affinity_propagation_.AffinityPropagation/preference
                  padre:implements: padre:AffinityPropagation/preference
                  padre:optional: 'True'
                  padre:path: preference
                  padre:value_default: None
                  padre:value_type: '{array-like, shape (n_samples,), float, None}'
                  rdfs:comment: Preferences for each point - points with larger
                    values of preferences are more likely to be chosen as exemplars.
                    The number of exemplars, ie of clusters, is influenced by the input
                    preferences value. If the preferences are not passed as arguments,
                    they will be set to the median of the input similarities.
                  rdfs:label: preference
                algorithm:
                  '@schema':
                    '@id': padre:AffinityPropagation/preference
                    '@type': padre:ModelParameters
                    padre:configures: padre:AffinityPropagation
              - '@schema':
                  '@id': padre:sklearn.cluster.affinity_propagation_.AffinityPropagation/affinity
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cluster.affinity_propagation_.AffinityPropagation/affinity
                  padre:implements: padre:AffinityPropagation/affinity
                  padre:optional: 'True'
                  padre:path: affinity
                  padre:value_default: '''euclidean'''
                  padre:value_type: '{''precomputed'', ''euclidean''}'''
                  rdfs:comment: Which affinity to use.
                  rdfs:label: affinity
                algorithm:
                  '@schema':
                    '@id': padre:AffinityPropagation/affinity
                    '@type': padre:ModelParameters
                    padre:configures: padre:AffinityPropagation
              - '@schema':
                  '@id': padre:sklearn.cluster.affinity_propagation_.AffinityPropagation/verbose
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cluster.affinity_propagation_.AffinityPropagation/verbose
                  padre:implements: padre:AffinityPropagation/verbose
                  padre:optional: 'True'
                  padre:path: verbose
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: Whether to be verbose.
                  rdfs:label: verbose
                algorithm:
                  '@schema':
                    '@id': padre:AffinityPropagation/verbose
                    '@type': padre:ModelParameters
                    padre:configures: padre:AffinityPropagation
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.cluster.affinity_propagation_.AffinityPropagation/max_iterations
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.cluster.affinity_propagation_.AffinityPropagation/max_iterations
                  padre:implements: padre:AffinityPropagation/max_iterations
                  padre:optional: 'True'
                  padre:path: max_iter
                  padre:value_default: '200'
                  padre:value_type: integer
                  rdfs:comment: Maximum number of iterations over the complete dataset
                    before stopping independently of any early stopping criterion heuristics.
                  rdfs:label: max_iterations
                algorithm:
                  '@schema':
                    '@id': padre:AffinityPropagation/max_iterations
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:AffinityPropagation
              - '@schema':
                  '@id': padre:sklearn.cluster.affinity_propagation_.AffinityPropagation/convergence_iteration
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.cluster.affinity_propagation_.AffinityPropagation/convergence_iteration
                  padre:implements: padre:AffinityPropagation/convergence_iteration
                  padre:optional: 'True'
                  padre:path: convergence_iter
                  padre:value_default: '15'
                  padre:value_type: integer
                  rdfs:comment: Number of iterations with no change in the number
                    of estimated clusters that stops the convergence.
                  rdfs:label: convergence_iteration
                algorithm:
                  '@schema':
                    '@id': padre:AffinityPropagation/convergence_iteration
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:AffinityPropagation
    :cluster.bicluster.SpectralBiclustering:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.cluster.bicluster.SpectralBiclustering
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:SpectralBiclustering
            rdfs:comment: null
            rdfs:label: spectral biclustering
          algorithm:
            '@schema':
              '@id': padre:SpectralBiclustering
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: spectral biclustering
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.cluster.bicluster.SpectralBiclustering/num_clusters
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cluster.bicluster.SpectralBiclustering/num_clusters
                  padre:implements: padre:SpectralBiclustering/num_clusters
                  padre:optional: 'True'
                  padre:path: n_clusters
                  padre:value_default: '3'
                  padre:value_type: integer
                  rdfs:comment: The number of biclusters to find.
                  rdfs:label: num_clusters
                algorithm:
                  '@schema':
                    '@id': padre:SpectralBiclustering/num_clusters
                    '@type': padre:ModelParameters
                    padre:configures: padre:SpectralBiclustering
              - '@schema':
                  '@id': padre:sklearn.cluster.bicluster.SpectralBiclustering/method
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cluster.bicluster.SpectralBiclustering/method
                  padre:implements: padre:SpectralBiclustering/method
                  padre:optional: 'True'
                  padre:path: method
                  padre:value_default: '''bistochastic'''
                  padre:value_type: '{''scale'', ''bistochastic'', ''log''}'
                  rdfs:comment: Method of normalizing and converting singular vectors
                    into biclusters.
                  rdfs:label: method
                algorithm:
                  '@schema':
                    '@id': padre:SpectralBiclustering/method
                    '@type': padre:ModelParameters
                    padre:configures: padre:SpectralBiclustering
              - '@schema':
                  '@id': padre:sklearn.cluster.bicluster.SpectralBiclustering/num_components
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cluster.bicluster.SpectralBiclustering/num_components
                  padre:implements: padre:SpectralBiclustering/num_components
                  padre:optional: 'True'
                  padre:path: n_components
                  padre:value_default: '6'
                  padre:value_type: integer
                  rdfs:comment: Number of singular vectors to check.
                  rdfs:label: num_components
                algorithm:
                  '@schema':
                    '@id': padre:SpectralBiclustering/num_components
                    '@type': padre:ModelParameters
                    padre:configures: padre:SpectralBiclustering
              - '@schema':
                  '@id': padre:sklearn.cluster.bicluster.SpectralBiclustering/num_best
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cluster.bicluster.SpectralBiclustering/num_best
                  padre:implements: padre:SpectralBiclustering/num_best
                  padre:optional: 'True'
                  padre:path: n_best
                  padre:value_default: '3'
                  padre:value_type: integer
                  rdfs:comment: Number of best singular vectors to which to project
                    the data for clustering.
                  rdfs:label: num_best
                algorithm:
                  '@schema':
                    '@id': padre:SpectralBiclustering/num_best
                    '@type': padre:ModelParameters
                    padre:configures: padre:SpectralBiclustering
              - '@schema':
                  '@id': padre:sklearn.cluster.bicluster.SpectralBiclustering/svd_method
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cluster.bicluster.SpectralBiclustering/svd_method
                  padre:implements: padre:SpectralBiclustering/svd_method
                  padre:optional: 'True'
                  padre:path: svd_method
                  padre:value_default: '''randomized'''
                  padre:value_type: '{''randomized'', ''arpack''}'
                  rdfs:comment: Selects the algorithm for finding singular vectors.
                  rdfs:label: svd_method
                algorithm:
                  '@schema':
                    '@id': padre:SpectralBiclustering/svd_method
                    '@type': padre:ModelParameters
                    padre:configures: padre:SpectralBiclustering
              - '@schema':
                  '@id': padre:sklearn.cluster.bicluster.SpectralBiclustering/num_svd_vecs
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cluster.bicluster.SpectralBiclustering/num_svd_vecs
                  padre:implements: padre:SpectralBiclustering/num_svd_vecs
                  padre:optional: 'True'
                  padre:path: n_svd_vecs
                  padre:value_default: None
                  padre:value_type: '{integer, None}'
                  rdfs:comment: Number of vectors to use in calculating the SVD.
                  rdfs:label: num_svd_vecs
                algorithm:
                  '@schema':
                    '@id': padre:SpectralBiclustering/num_svd_vecs
                    '@type': padre:ModelParameters
                    padre:configures: padre:SpectralBiclustering
              - '@schema':
                  '@id': padre:sklearn.cluster.bicluster.SpectralBiclustering/mini_batch
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cluster.bicluster.SpectralBiclustering/mini_batch
                  padre:implements: padre:SpectralBiclustering/mini_batch
                  padre:optional: 'True'
                  padre:path: mini_batch
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: Whether to use mini-batch k-means, which is faster
                    but may get different results.
                  rdfs:label: mini_batch
                algorithm:
                  '@schema':
                    '@id': padre:SpectralBiclustering/mini_batch
                    '@type': padre:ModelParameters
                    padre:configures: padre:SpectralBiclustering
              - '@schema':
                  '@id': padre:sklearn.cluster.bicluster.SpectralBiclustering/initialization_method
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cluster.bicluster.SpectralBiclustering/initialization_method
                  padre:implements: padre:SpectralBiclustering/initialization_method
                  padre:optional: 'False'
                  padre:path: init
                  padre:value_default: '''k-means++'''
                  padre:value_type: '{''k-means++'', ''random'',  array of shape (n_clusters,
                  n_features)}'
                  rdfs:comment: Method for initialization of k-means algorithm.
                  rdfs:label: initialization_method
                algorithm:
                  '@schema':
                    '@id': padre:SpectralBiclustering/initialization_method
                    '@type': padre:ModelParameters
                    padre:configures: padre:SpectralBiclustering
              - '@schema':
                  '@id': padre:sklearn.cluster.bicluster.SpectralBiclustering/random_state
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cluster.bicluster.SpectralBiclustering/random_state
                  padre:implements: padre:SpectralBiclustering/random_state
                  padre:optional: 'True'
                  padre:path: random_state
                  padre:value_default: None
                  padre:value_type: '{integer, RandomState instance, None}'
                  rdfs:comment: The seed of the pseudo random number generator to
                    use when shuffling the data. If int, random_state is the seed used
                    by the random number generator; If RandomState instance, random_state
                    is the random number generator; If None, the random number generator
                    is the RandomState instance used by np.random.
                  rdfs:label: random_state
                algorithm:
                  '@schema':
                    '@id': padre:SpectralBiclustering/random_state
                    '@type': padre:ModelParameters
                    padre:configures: padre:SpectralBiclustering
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.cluster.bicluster.SpectralBiclustering/num_initialization
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.cluster.bicluster.SpectralBiclustering/num_initialization
                  padre:implements: padre:SpectralBiclustering/num_initialization
                  padre:optional: 'False'
                  padre:path: n_init
                  padre:value_default: '10'
                  padre:value_type: integer
                  rdfs:comment: Number of time the k-means algorithm will be run
                    with different centroid seeds.
                  rdfs:label: num_initialization
                algorithm:
                  '@schema':
                    '@id': padre:SpectralBiclustering/num_initialization
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:SpectralBiclustering
              - '@schema':
                  '@id': padre:sklearn.cluster.bicluster.SpectralBiclustering/jobs
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.cluster.bicluster.SpectralBiclustering/jobs
                  padre:implements: padre:SpectralBiclustering/jobs
                  padre:optional: 'False'
                  padre:path: n_jobs
                  padre:value_default: '1'
                  padre:value_type: integer
                  rdfs:comment: The number of jobs to use for the computation. If
                    -1 all CPUs are used.
                  rdfs:label: jobs
                algorithm:
                  '@schema':
                    '@id': padre:SpectralBiclustering/jobs
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:SpectralBiclustering
    :cluster.bicluster.SpectralCoclustering:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.cluster.bicluster.SpectralCoclustering
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:SpectralCoclustering
            rdfs:comment: null
            rdfs:label: spectral co-clustering
          algorithm:
            '@schema':
              '@id': padre:SpectralCoclustering
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: spectral co-clustering
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.cluster.bicluster.SpectralCoclustering/num_clusters
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cluster.bicluster.SpectralCoclustering/num_clusters
                  padre:implements: padre:SpectralCoclustering/num_clusters
                  padre:optional: 'True'
                  padre:path: n_clusters
                  padre:value_default: '3'
                  padre:value_type: integer
                  rdfs:comment: The number of biclusters to find.
                  rdfs:label: num_clusters
                algorithm:
                  '@schema':
                    '@id': padre:SpectralCoclustering/num_clusters
                    '@type': padre:ModelParameters
                    padre:configures: padre:SpectralCoclustering
              - '@schema':
                  '@id': padre:sklearn.cluster.bicluster.SpectralCoclustering/svd_method
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cluster.bicluster.SpectralCoclustering/svd_method
                  padre:implements: padre:SpectralCoclustering/svd_method
                  padre:optional: 'True'
                  padre:path: svd_method
                  padre:value_default: '''randomized'''
                  padre:value_type: '{''randomized'', ''arpack''}'
                  rdfs:comment: Selects the algorithm for finding singular vectors.
                  rdfs:label: svd_method
                algorithm:
                  '@schema':
                    '@id': padre:SpectralCoclustering/svd_method
                    '@type': padre:ModelParameters
                    padre:configures: padre:SpectralCoclustering
              - '@schema':
                  '@id': padre:sklearn.cluster.bicluster.SpectralCoclustering/num_svd_vecs
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cluster.bicluster.SpectralCoclustering/num_svd_vecs
                  padre:implements: padre:SpectralCoclustering/num_svd_vecs
                  padre:optional: 'True'
                  padre:path: n_svd_vecs
                  padre:value_default: None
                  padre:value_type: '{integer, None}'
                  rdfs:comment: Number of vectors to use in calculating the SVD.
                  rdfs:label: num_svd_vecs
                algorithm:
                  '@schema':
                    '@id': padre:SpectralCoclustering/num_svd_vecs
                    '@type': padre:ModelParameters
                    padre:configures: padre:SpectralCoclustering
              - '@schema':
                  '@id': padre:sklearn.cluster.bicluster.SpectralCoclustering/mini_batch
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cluster.bicluster.SpectralCoclustering/mini_batch
                  padre:implements: padre:SpectralCoclustering/mini_batch
                  padre:optional: 'True'
                  padre:path: mini_batch
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: Whether to use mini-batch k-means, which is faster
                    but may get different results.
                  rdfs:label: mini_batch
                algorithm:
                  '@schema':
                    '@id': padre:SpectralCoclustering/mini_batch
                    '@type': padre:ModelParameters
                    padre:configures: padre:SpectralCoclustering
              - '@schema':
                  '@id': padre:sklearn.cluster.bicluster.SpectralCoclustering/initialization_method
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cluster.bicluster.SpectralCoclustering/initialization_method
                  padre:implements: padre:SpectralCoclustering/initialization_method
                  padre:optional: 'False'
                  padre:path: init
                  padre:value_default: '''k-means++'''
                  padre:value_type: '{''k-means++'', ''random'',  array of shape (n_clusters,
                  n_features)}'
                  rdfs:comment: Method for initialization of k-means algorithm.
                  rdfs:label: initialization_method
                algorithm:
                  '@schema':
                    '@id': padre:SpectralCoclustering/initialization_method
                    '@type': padre:ModelParameters
                    padre:configures: padre:SpectralCoclustering
              - '@schema':
                  '@id': padre:sklearn.cluster.bicluster.SpectralCoclustering/random_state
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cluster.bicluster.SpectralCoclustering/random_state
                  padre:implements: padre:SpectralCoclustering/random_state
                  padre:optional: 'True'
                  padre:path: random_state
                  padre:value_default: None
                  padre:value_type: '{integer, RandomState instance, None}'
                  rdfs:comment: The seed of the pseudo random number generator to
                    use when shuffling the data. If int, random_state is the seed used
                    by the random number generator; If RandomState instance, random_state
                    is the random number generator; If None, the random number generator
                    is the RandomState instance used by np.random.
                  rdfs:label: random_state
                algorithm:
                  '@schema':
                    '@id': padre:SpectralCoclustering/random_state
                    '@type': padre:ModelParameters
                    padre:configures: padre:SpectralCoclustering
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.cluster.bicluster.SpectralCoclustering/num_initialization
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.cluster.bicluster.SpectralCoclustering/num_initialization
                  padre:implements: padre:SpectralCoclustering/num_initialization
                  padre:optional: 'False'
                  padre:path: n_init
                  padre:value_default: '10'
                  padre:value_type: integer
                  rdfs:comment: Number of time the k-means algorithm will be run
                    with different centroid seeds.
                  rdfs:label: num_initialization
                algorithm:
                  '@schema':
                    '@id': padre:SpectralCoclustering/num_initialization
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:SpectralCoclustering
              - '@schema':
                  '@id': padre:sklearn.cluster.bicluster.SpectralCoclustering/jobs
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.cluster.bicluster.SpectralCoclustering/jobs
                  padre:implements: padre:SpectralCoclustering/jobs
                  padre:optional: 'False'
                  padre:path: n_jobs
                  padre:value_default: '1'
                  padre:value_type: integer
                  rdfs:comment: The number of jobs to use for the computation. If
                    -1 all CPUs are used.
                  rdfs:label: jobs
                algorithm:
                  '@schema':
                    '@id': padre:SpectralCoclustering/jobs
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:SpectralCoclustering
    :cluster.birch.Birch:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.cluster.birch.Birch
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:Birch
            rdfs:comment: null
            rdfs:label: birch clustering
          algorithm:
            '@schema':
              '@id': padre:Birch
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: birch clustering
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.cluster.birch.Birch/threshold
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cluster.birch.Birch/threshold
                  padre:implements: padre:Birch/threshold
                  padre:optional: 'False'
                  padre:path: threshold
                  padre:value_default: '0.5'
                  padre:value_type: float
                  rdfs:comment: The radius of the subcluster obtained by merging
                    a new sample and the closest subcluster should be lesser than the
                    threshold. Otherwise a new subcluster is started. Setting this value
                    to be very low promotes splitting and vice-versa.
                  rdfs:label: threshold
                algorithm:
                  '@schema':
                    '@id': padre:Birch/threshold
                    '@type': padre:ModelParameters
                    padre:configures: padre:Birch
              - '@schema':
                  '@id': padre:sklearn.cluster.birch.Birch/branching_factor
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cluster.birch.Birch/branching_factor
                  padre:implements: padre:Birch/branching_factor
                  padre:optional: 'False'
                  padre:path: branching_factor
                  padre:value_default: '50'
                  padre:value_type: integer
                  rdfs:comment: Maximum number of CF subclusters in each node. If
                    a new samples enters such that the number of subclusters exceed
                    the branching_factor then that node is split into two nodes with
                    the subclusters redistributed in each. The parent subcluster of
                    that node is removed and two new subclusters are added as parents
                    of the 2 split nodes.
                  rdfs:label: branching_factor
                algorithm:
                  '@schema':
                    '@id': padre:Birch/branching_factor
                    '@type': padre:ModelParameters
                    padre:configures: padre:Birch
              - '@schema':
                  '@id': padre:sklearn.cluster.birch.Birch/num_clusters
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cluster.birch.Birch/num_clusters
                  padre:implements: padre:Birch/num_clusters
                  padre:optional: 'False'
                  padre:path: n_clusters
                  padre:value_default: '3'
                  padre:value_type: '{integer, instance of sklearn.cluster model, None}'
                  rdfs:comment: Number of clusters after the final clustering step,
                    which treats the subclusters from the leaves as new samples.
                  rdfs:label: num_clusters
                algorithm:
                  '@schema':
                    '@id': padre:Birch/num_clusters
                    '@type': padre:ModelParameters
                    padre:configures: padre:Birch
              - '@schema':
                  '@id': padre:sklearn.cluster.birch.Birch/compute_labels
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cluster.birch.Birch/compute_labels
                  padre:implements: padre:Birch/compute_labels
                  padre:optional: 'False'
                  padre:path: compute_labels
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: Whether or not to compute labels for each fit.
                  rdfs:label: compute_labels
                algorithm:
                  '@schema':
                    '@id': padre:Birch/compute_labels
                    '@type': padre:ModelParameters
                    padre:configures: padre:Birch
              - '@schema':
                  '@id': padre:sklearn.cluster.birch.Birch/copy
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cluster.birch.Birch/copy
                  padre:implements: padre:Birch/copy
                  padre:optional: 'False'
                  padre:path: copy
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: Whether or not to make a copy of the given data.
                    If set to False, the initial data will be overwritten.
                  rdfs:label: copy
                algorithm:
                  '@schema':
                    '@id': padre:Birch/copy
                    '@type': padre:ModelParameters
                    padre:configures: padre:Birch
            optimisation_parameters: []
    :cluster.dbscan_.DBSCAN:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.cluster.dbscan_.DBSCAN
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:DBSCAN
            rdfs:comment: null
            rdfs:label: DBSCAN
          algorithm:
            '@schema':
              '@id': padre:DBSCAN
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: DBSCAN
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.cluster.dbscan_.DBSCAN/eps
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cluster.dbscan_.DBSCAN/eps
                  padre:implements: padre:DBSCAN/eps
                  padre:optional: 'True'
                  padre:path: eps
                  padre:value_default: '0.5'
                  padre:value_type: float
                  rdfs:comment: The maximum distance between two samples for them
                    to be considered as in the same neighborhood.
                  rdfs:label: eps
                algorithm:
                  '@schema':
                    '@id': padre:DBSCAN/eps
                    '@type': padre:ModelParameters
                    padre:configures: padre:DBSCAN
              - '@schema':
                  '@id': padre:sklearn.cluster.dbscan_.DBSCAN/min_samples
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cluster.dbscan_.DBSCAN/min_samples
                  padre:implements: padre:DBSCAN/min_samples
                  padre:optional: 'True'
                  padre:path: min_samples
                  padre:value_default: '5'
                  padre:value_type: integer
                  rdfs:comment: The number of samples (or total weight) in a neighborhood
                    for a point to be considered as a core point. This includes the
                    point itself.
                  rdfs:label: min_samples
                algorithm:
                  '@schema':
                    '@id': padre:DBSCAN/min_samples
                    '@type': padre:ModelParameters
                    padre:configures: padre:DBSCAN
              - '@schema':
                  '@id': padre:sklearn.cluster.dbscan_.DBSCAN/distance_metric
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cluster.dbscan_.DBSCAN/distance_metric
                  padre:implements: padre:DBSCAN/distance_metric
                  padre:optional: 'False'
                  padre:path: metric
                  padre:value_default: '''euclidean'''
                  padre:value_type: '{''cityblock'', ''cosine'', ''euclidean'', ''l1'',
                  ''l2'', ''manhattan'', ''braycurtis'', ''canberra'', ''chebyshev'',
                  ''correlation'', ''dice'', ''hamming'', ''jaccard'', ''kulsinski'',
                  ''mahalanobis'', ''matching'', ''minkowski'', ''rogerstanimoto'',
                  ''russellrao'', ''seuclidean'', ''sokalmichener'', ''sokalsneath'',
                  ''sqeuclidean'', ''yule'', a callable that should take two arrays
                  as input and return one value indicating the distance between them}'
                  rdfs:comment: The metric to use when calculating distance between
                    instances in a feature array.
                  rdfs:label: distance_metric
                algorithm:
                  '@schema':
                    '@id': padre:DBSCAN/distance_metric
                    '@type': padre:ModelParameters
                    padre:configures: padre:DBSCAN
              - '@schema':
                  '@id': padre:sklearn.cluster.dbscan_.DBSCAN/metric_parameters
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cluster.dbscan_.DBSCAN/metric_parameters
                  padre:implements: padre:DBSCAN/metric_parameters
                  padre:optional: 'True'
                  padre:path: metric_params
                  padre:value_default: None
                  padre:value_type: dict
                  rdfs:comment: Additional keyword arguments for the metric function.
                  rdfs:label: metric_parameters
                algorithm:
                  '@schema':
                    '@id': padre:DBSCAN/metric_parameters
                    '@type': padre:ModelParameters
                    padre:configures: padre:DBSCAN
              - '@schema':
                  '@id': padre:sklearn.cluster.dbscan_.DBSCAN/algorithm
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cluster.dbscan_.DBSCAN/algorithm
                  padre:implements: padre:DBSCAN/algorithm
                  padre:optional: 'True'
                  padre:path: algorithm
                  padre:value_default: '''auto'''
                  padre:value_type: '{''auto'', ''ball_tree'', ''kd_tree'', ''brute''}'
                  rdfs:comment: The algorithm to be used by the NearestNeighbors
                    module to compute pointwise distances and find nearest neighbors.
                  rdfs:label: algorithm
                algorithm:
                  '@schema':
                    '@id': padre:DBSCAN/algorithm
                    '@type': padre:ModelParameters
                    padre:configures: padre:DBSCAN
              - '@schema':
                  '@id': padre:sklearn.cluster.dbscan_.DBSCAN/leaf_size
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cluster.dbscan_.DBSCAN/leaf_size
                  padre:implements: padre:DBSCAN/leaf_size
                  padre:optional: 'True'
                  padre:path: leaf_size
                  padre:value_default: '30'
                  padre:value_type: integer
                  rdfs:comment: Leaf size passed to BallTree or KDTree. This can
                    affect the speed of the construction and query, as well as the memory
                    required to store the tree. The optimal value depends on the nature
                    of the problem.
                  rdfs:label: leaf_size
                algorithm:
                  '@schema':
                    '@id': padre:DBSCAN/leaf_size
                    '@type': padre:ModelParameters
                    padre:configures: padre:DBSCAN
              - '@schema':
                  '@id': padre:sklearn.cluster.dbscan_.DBSCAN/minkowski_parameter
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cluster.dbscan_.DBSCAN/minkowski_parameter
                  padre:implements: padre:DBSCAN/minkowski_parameter
                  padre:optional: 'True'
                  padre:path: p
                  padre:value_default: None
                  padre:value_type: '{integer, None}'
                  rdfs:comment: The power of the Minkowski metric to be used to
                    calculate distance between points.
                  rdfs:label: minkowski_parameter
                algorithm:
                  '@schema':
                    '@id': padre:DBSCAN/minkowski_parameter
                    '@type': padre:ModelParameters
                    padre:configures: padre:DBSCAN
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.cluster.dbscan_.DBSCAN/jobs
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.cluster.dbscan_.DBSCAN/jobs
                  padre:implements: padre:DBSCAN/jobs
                  padre:optional: 'True'
                  padre:path: n_jobs
                  padre:value_default: '1'
                  padre:value_type: integer
                  rdfs:comment: The number of jobs to use for the computation. If
                    -1 all CPUs are used.
                  rdfs:label: jobs
                algorithm:
                  '@schema':
                    '@id': padre:DBSCAN/jobs
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:DBSCAN
    :cluster.hierarchical.AgglomerativeClustering:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.cluster.hierarchical.AgglomerativeClustering
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:AgglomerativeClustering
            rdfs:comment: null
            rdfs:label: agglomerative clustering
          algorithm:
            '@schema':
              '@id': padre:AgglomerativeClustering
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: agglomerative clustering
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.cluster.hierarchical.AgglomerativeClustering/num_clusters
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cluster.hierarchical.AgglomerativeClustering/num_clusters
                  padre:implements: padre:AgglomerativeClustering/num_clusters
                  padre:optional: 'True'
                  padre:path: n_clusters
                  padre:value_default: '2'
                  padre:value_type: integer
                  rdfs:comment: The number of clusters to find.
                  rdfs:label: num_clusters
                algorithm:
                  '@schema':
                    '@id': padre:AgglomerativeClustering/num_clusters
                    '@type': padre:ModelParameters
                    padre:configures: padre:AgglomerativeClustering
              - '@schema':
                  '@id': padre:sklearn.cluster.hierarchical.AgglomerativeClustering/affinity
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cluster.hierarchical.AgglomerativeClustering/affinity
                  padre:implements: padre:AgglomerativeClustering/affinity
                  padre:optional: 'False'
                  padre:path: affinity
                  padre:value_default: '''euclidean'''
                  padre:value_type: '{''precomputed'', ''euclidean'', ''l1'', ''l2'',
                  ''manhattan'', ''cosine''}'
                  rdfs:comment: Which affinity to use.
                  rdfs:label: affinity
                algorithm:
                  '@schema':
                    '@id': padre:AgglomerativeClustering/affinity
                    '@type': padre:ModelParameters
                    padre:configures: padre:AgglomerativeClustering
              - '@schema':
                  '@id': padre:sklearn.cluster.hierarchical.AgglomerativeClustering/memory
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cluster.hierarchical.AgglomerativeClustering/memory
                  padre:implements: padre:AgglomerativeClustering/memory
                  padre:optional: 'True'
                  padre:path: memory
                  padre:value_default: None
                  padre:value_type: '{None, object with the joblib.Memory interface,
                  path to cashing directory}'
                  rdfs:comment: Used to cache the output of the computation of the
                    tree.
                  rdfs:label: memory
                algorithm:
                  '@schema':
                    '@id': padre:AgglomerativeClustering/memory
                    '@type': padre:ModelParameters
                    padre:configures: padre:AgglomerativeClustering
              - '@schema':
                  '@id': padre:sklearn.cluster.hierarchical.AgglomerativeClustering/connectivity_matrix
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cluster.hierarchical.AgglomerativeClustering/connectivity_matrix
                  padre:implements: padre:AgglomerativeClustering/connectivity_matrix
                  padre:optional: 'True'
                  padre:path: connectivity
                  padre:value_default: None
                  padre:value_type: '{array-like, callable, None}'
                  rdfs:comment: Connectivity matrix. Defines for each sample the
                    neighboring samples following a given structure of the data. This
                    can be a connectivity matrix itself or a callable that transforms
                    the data into a connectivity matrix.
                  rdfs:label: connectivity_matrix
                algorithm:
                  '@schema':
                    '@id': padre:AgglomerativeClustering/connectivity_matrix
                    '@type': padre:ModelParameters
                    padre:configures: padre:AgglomerativeClustering
              - '@schema':
                  '@id': padre:sklearn.cluster.hierarchical.AgglomerativeClustering/compute_full_tree
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cluster.hierarchical.AgglomerativeClustering/compute_full_tree
                  padre:implements: padre:AgglomerativeClustering/compute_full_tree
                  padre:optional: 'True'
                  padre:path: compute_full_tree
                  padre:value_default: '''auto'''
                  padre:value_type: '{boolean, ''auto''}'
                  rdfs:comment: Stop early the construction of the tree at num_clusters.
                    This is useful to decrease computation time if the number of clusters
                    is not small compared to the number of samples. This option is useful
                    only when specifying a connectivity matrix. Note also that when
                    varying the number of clusters and using caching, it may be advantageous
                    to compute the full tree.
                  rdfs:label: compute_full_tree
                algorithm:
                  '@schema':
                    '@id': padre:AgglomerativeClustering/compute_full_tree
                    '@type': padre:ModelParameters
                    padre:configures: padre:AgglomerativeClustering
              - '@schema':
                  '@id': padre:sklearn.cluster.hierarchical.AgglomerativeClustering/linkage_criterion
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cluster.hierarchical.AgglomerativeClustering/linkage_criterion
                  padre:implements: padre:AgglomerativeClustering/linkage_criterion
                  padre:optional: 'True'
                  padre:path: linkage
                  padre:value_default: '''ward'''
                  padre:value_type: '{''ward'', ''complete'', ''average''}'
                  rdfs:comment: Which linkage criterion to use. The linkage criterion
                    determines which distance to use between sets of observation. The
                    algorithm will merge the pairs of cluster that minimize this criterion.
                  rdfs:label: linkage_criterion
                algorithm:
                  '@schema':
                    '@id': padre:AgglomerativeClustering/linkage_criterion
                    '@type': padre:ModelParameters
                    padre:configures: padre:AgglomerativeClustering
              - '@schema':
                  '@id': padre:sklearn.cluster.hierarchical.AgglomerativeClustering/pooling_function
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cluster.hierarchical.AgglomerativeClustering/pooling_function
                  padre:implements: padre:AgglomerativeClustering/pooling_function
                  padre:optional: 'False'
                  padre:path: pooling_func
                  padre:value_default: <function mean>
                  padre:value_type: callable
                  rdfs:comment: This combines the values of agglomerated features
                    into a single value, and should accept an array of shape [M, N]
                    and the keyword argument axis=1, and reduce it to an array of size
                    [M].
                  rdfs:label: pooling_function
                algorithm:
                  '@schema':
                    '@id': padre:AgglomerativeClustering/pooling_function
                    '@type': padre:ModelParameters
                    padre:configures: padre:AgglomerativeClustering
            optimisation_parameters: []
    :cluster.hierarchical.FeatureAgglomeration:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.cluster.hierarchical.FeatureAgglomeration
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:FeatureAgglomeration
            rdfs:comment: null
            rdfs:label: feature agglomerative clustering
          algorithm:
            '@schema':
              '@id': padre:FeatureAgglomeration
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: feature agglomerative clustering
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.cluster.hierarchical.FeatureAgglomeration/num_clusters
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cluster.hierarchical.FeatureAgglomeration/num_clusters
                  padre:implements: padre:FeatureAgglomeration/num_clusters
                  padre:optional: 'True'
                  padre:path: n_clusters
                  padre:value_default: '2'
                  padre:value_type: integer
                  rdfs:comment: The number of clusters to find.
                  rdfs:label: num_clusters
                algorithm:
                  '@schema':
                    '@id': padre:FeatureAgglomeration/num_clusters
                    '@type': padre:ModelParameters
                    padre:configures: padre:FeatureAgglomeration
              - '@schema':
                  '@id': padre:sklearn.cluster.hierarchical.FeatureAgglomeration/affinity
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cluster.hierarchical.FeatureAgglomeration/affinity
                  padre:implements: padre:FeatureAgglomeration/affinity
                  padre:optional: 'False'
                  padre:path: affinity
                  padre:value_default: '''euclidean'''
                  padre:value_type: '{''precomputed'', ''euclidean'', ''l1'', ''l2'',
                  ''manhattan'', ''cosine''}'''
                  rdfs:comment: Which affinity to use.
                  rdfs:label: affinity
                algorithm:
                  '@schema':
                    '@id': padre:FeatureAgglomeration/affinity
                    '@type': padre:ModelParameters
                    padre:configures: padre:FeatureAgglomeration
              - '@schema':
                  '@id': padre:sklearn.cluster.hierarchical.FeatureAgglomeration/memory
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cluster.hierarchical.FeatureAgglomeration/memory
                  padre:implements: padre:FeatureAgglomeration/memory
                  padre:optional: 'True'
                  padre:path: memory
                  padre:value_default: None
                  padre:value_type: '{None, object with the joblib.Memory interface,
                  path to cashing directory}'
                  rdfs:comment: Used to cache the output of the computation of the
                    tree.
                  rdfs:label: memory
                algorithm:
                  '@schema':
                    '@id': padre:FeatureAgglomeration/memory
                    '@type': padre:ModelParameters
                    padre:configures: padre:FeatureAgglomeration
              - '@schema':
                  '@id': padre:sklearn.cluster.hierarchical.FeatureAgglomeration/connectivity_matrix
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cluster.hierarchical.FeatureAgglomeration/connectivity_matrix
                  padre:implements: padre:FeatureAgglomeration/connectivity_matrix
                  padre:optional: 'True'
                  padre:path: connectivity
                  padre:value_default: None
                  padre:value_type: '{array-like, callable, None}'
                  rdfs:comment: Connectivity matrix. Defines for each sample the
                    neighboring samples following a given structure of the data. This
                    can be a connectivity matrix itself or a callable that transforms
                    the data into a connectivity matrix.
                  rdfs:label: connectivity_matrix
                algorithm:
                  '@schema':
                    '@id': padre:FeatureAgglomeration/connectivity_matrix
                    '@type': padre:ModelParameters
                    padre:configures: padre:FeatureAgglomeration
              - '@schema':
                  '@id': padre:sklearn.cluster.hierarchical.FeatureAgglomeration/compute_full_tree
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cluster.hierarchical.FeatureAgglomeration/compute_full_tree
                  padre:implements: padre:FeatureAgglomeration/compute_full_tree
                  padre:optional: 'True'
                  padre:path: compute_full_tree
                  padre:value_default: '''auto'''
                  padre:value_type: '{boolean, ''auto''}'
                  rdfs:comment: Stop early the construction of the tree at num_clusters.
                    This is useful to decrease computation time if the number of clusters
                    is not small compared to the number of samples. This option is useful
                    only when specifying a connectivity matrix. Note also that when
                    varying the number of clusters and using caching, it may be advantageous
                    to compute the full tree.
                  rdfs:label: compute_full_tree
                algorithm:
                  '@schema':
                    '@id': padre:FeatureAgglomeration/compute_full_tree
                    '@type': padre:ModelParameters
                    padre:configures: padre:FeatureAgglomeration
              - '@schema':
                  '@id': padre:sklearn.cluster.hierarchical.FeatureAgglomeration/linkage_criterion
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cluster.hierarchical.FeatureAgglomeration/linkage_criterion
                  padre:implements: padre:FeatureAgglomeration/linkage_criterion
                  padre:optional: 'True'
                  padre:path: linkage
                  padre:value_default: '''ward'''
                  padre:value_type: '{''ward'', ''complete'', ''average''}'
                  rdfs:comment: Which linkage criterion to use. The linkage criterion
                    determines which distance to use between sets of observation. The
                    algorithm will merge the pairs of cluster that minimize this criterion.
                  rdfs:label: linkage_criterion
                algorithm:
                  '@schema':
                    '@id': padre:FeatureAgglomeration/linkage_criterion
                    '@type': padre:ModelParameters
                    padre:configures: padre:FeatureAgglomeration
              - '@schema':
                  '@id': padre:sklearn.cluster.hierarchical.FeatureAgglomeration/pooling_function
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cluster.hierarchical.FeatureAgglomeration/pooling_function
                  padre:implements: padre:FeatureAgglomeration/pooling_function
                  padre:optional: 'False'
                  padre:path: pooling_func
                  padre:value_default: <function mean>
                  padre:value_type: callable
                  rdfs:comment: This combines the values of agglomerated features
                    into a single value, and should accept an array of shape [M, N]
                    and the keyword argument axis=1, and reduce it to an array of size
                    [M].
                  rdfs:label: pooling_function
                algorithm:
                  '@schema':
                    '@id': padre:FeatureAgglomeration/pooling_function
                    '@type': padre:ModelParameters
                    padre:configures: padre:FeatureAgglomeration
            optimisation_parameters: []
    :cluster.k_means_.KMeans:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.cluster.k_means_.KMeans
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:KMeans
            rdfs:comment: null
            rdfs:label: k-means clustering
          algorithm:
            '@schema':
              '@id': padre:KMeans
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: k-means clustering
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.cluster.k_means_.KMeans/num_clusters
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cluster.k_means_.KMeans/num_clusters
                  padre:implements: padre:KMeans/num_clusters
                  padre:optional: 'True'
                  padre:path: n_clusters
                  padre:value_default: '8'
                  padre:value_type: integer
                  rdfs:comment: The number of clusters to form as well as the number
                    of centroids to generate.
                  rdfs:label: num_clusters
                algorithm:
                  '@schema':
                    '@id': padre:KMeans/num_clusters
                    '@type': padre:ModelParameters
                    padre:configures: padre:KMeans
              - '@schema':
                  '@id': padre:sklearn.cluster.k_means_.KMeans/initialization_method
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cluster.k_means_.KMeans/initialization_method
                  padre:implements: padre:KMeans/initialization_method
                  padre:optional: 'False'
                  padre:path: init
                  padre:value_default: '''k-means++'''
                  padre:value_type: '{''k-means++'', ''random'',  array of shape (n_clusters,
                  n_features)}'
                  rdfs:comment: Method for initialization.
                  rdfs:label: initialization_method
                algorithm:
                  '@schema':
                    '@id': padre:KMeans/initialization_method
                    '@type': padre:ModelParameters
                    padre:configures: padre:KMeans
              - '@schema':
                  '@id': padre:sklearn.cluster.k_means_.KMeans/tolerance
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cluster.k_means_.KMeans/tolerance
                  padre:implements: padre:KMeans/tolerance
                  padre:optional: 'False'
                  padre:path: tol
                  padre:value_default: '0.0001'
                  padre:value_type: float
                  rdfs:comment: Relative tolerance with regards to inertia to declare
                    convergence
                  rdfs:label: tolerance
                algorithm:
                  '@schema':
                    '@id': padre:KMeans/tolerance
                    '@type': padre:ModelParameters
                    padre:configures: padre:KMeans
              - '@schema':
                  '@id': padre:sklearn.cluster.k_means_.KMeans/verbose
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cluster.k_means_.KMeans/verbose
                  padre:implements: padre:KMeans/verbose
                  padre:optional: 'False'
                  padre:path: verbose
                  padre:value_default: '0'
                  padre:value_type: integer
                  rdfs:comment: Verbosity mode.
                  rdfs:label: verbose
                algorithm:
                  '@schema':
                    '@id': padre:KMeans/verbose
                    '@type': padre:ModelParameters
                    padre:configures: padre:KMeans
              - '@schema':
                  '@id': padre:sklearn.cluster.k_means_.KMeans/random_state
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cluster.k_means_.KMeans/random_state
                  padre:implements: padre:KMeans/random_state
                  padre:optional: 'True'
                  padre:path: random_state
                  padre:value_default: None
                  padre:value_type: '{integer, RandomState instance, None}'
                  rdfs:comment: The seed of the pseudo random number generator to
                    use when shuffling the data. If int, random_state is the seed used
                    by the random number generator; If RandomState instance, random_state
                    is the random number generator; If None, the random number generator
                    is the RandomState instance used by np.random.
                  rdfs:label: random_state
                algorithm:
                  '@schema':
                    '@id': padre:KMeans/random_state
                    '@type': padre:ModelParameters
                    padre:configures: padre:KMeans
              - '@schema':
                  '@id': padre:sklearn.cluster.k_means_.KMeans/copy_X
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cluster.k_means_.KMeans/copy_X
                  padre:implements: padre:KMeans/copy_X
                  padre:optional: 'True'
                  padre:path: copy_x
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: When pre-computing distances it is more numerically
                    accurate to center the data first. If copy_x is True, then the original
                    data is not modified. If False, the original data is modified, and
                    put back before the function returns, but small numerical differences
                    may be introduced by subtracting and then adding the data mean.
                  rdfs:label: copy_X
                algorithm:
                  '@schema':
                    '@id': padre:KMeans/copy_X
                    '@type': padre:ModelParameters
                    padre:configures: padre:KMeans
              - '@schema':
                  '@id': padre:sklearn.cluster.k_means_.KMeans/algorithm
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cluster.k_means_.KMeans/algorithm
                  padre:implements: padre:KMeans/algorithm
                  padre:optional: 'False'
                  padre:path: algorithm
                  padre:value_default: '''auto'''
                  padre:value_type: '{''auto'', ''full'', ''elkan''}'
                  rdfs:comment: K-means algorithm to use.
                  rdfs:label: algorithm
                algorithm:
                  '@schema':
                    '@id': padre:KMeans/algorithm
                    '@type': padre:ModelParameters
                    padre:configures: padre:KMeans
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.cluster.k_means_.KMeans/num_initialization
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.cluster.k_means_.KMeans/num_initialization
                  padre:implements: padre:KMeans/num_initialization
                  padre:optional: 'False'
                  padre:path: n_init
                  padre:value_default: '10'
                  padre:value_type: integer
                  rdfs:comment: Number of time the k-means algorithm will be run
                    with different centroid seeds.
                  rdfs:label: num_initialization
                algorithm:
                  '@schema':
                    '@id': padre:KMeans/num_initialization
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:KMeans
              - '@schema':
                  '@id': padre:sklearn.cluster.k_means_.KMeans/max_iterations
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.cluster.k_means_.KMeans/max_iterations
                  padre:implements: padre:KMeans/max_iterations
                  padre:optional: 'False'
                  padre:path: max_iter
                  padre:value_default: '300'
                  padre:value_type: integer
                  rdfs:comment: Maximum number of iterations of the k-means algorithm
                    for a single run.
                  rdfs:label: max_iterations
                algorithm:
                  '@schema':
                    '@id': padre:KMeans/max_iterations
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:KMeans
              - '@schema':
                  '@id': padre:sklearn.cluster.k_means_.KMeans/precompute_distances
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.cluster.k_means_.KMeans/precompute_distances
                  padre:implements: padre:KMeans/precompute_distances
                  padre:optional: 'False'
                  padre:path: precompute_distances
                  padre:value_default: '''auto'''
                  padre:value_type: '{''auto'', True, False}'
                  rdfs:comment: "Precompute distances (faster but takes more memory).\
                  \ \u2018auto\u2019 : do not precompute distances if n_samples *\
                  \ n_clusters > 12 million. This corresponds to about 100MB overhead\
                  \ per job using double precision."
                  rdfs:label: precompute_distances
                algorithm:
                  '@schema':
                    '@id': padre:KMeans/precompute_distances
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:KMeans
              - '@schema':
                  '@id': padre:sklearn.cluster.k_means_.KMeans/jobs
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.cluster.k_means_.KMeans/jobs
                  padre:implements: padre:KMeans/jobs
                  padre:optional: 'False'
                  padre:path: n_jobs
                  padre:value_default: '1'
                  padre:value_type: integer
                  rdfs:comment: The number of jobs to use for the computation. If
                    -1 all CPUs are used.
                  rdfs:label: jobs
                algorithm:
                  '@schema':
                    '@id': padre:KMeans/jobs
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:KMeans
    :cluster.k_means_.MiniBatchKMeans:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.cluster.k_means_.MiniBatchKMeans
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:MiniBatchKMeans
            rdfs:comment: null
            rdfs:label: mini batch k-means clustering
          algorithm:
            '@schema':
              '@id': padre:MiniBatchKMeans
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: mini batch k-means clustering
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.cluster.k_means_.MiniBatchKMeans/num_clusters
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cluster.k_means_.MiniBatchKMeans/num_clusters
                  padre:implements: padre:MiniBatchKMeans/num_clusters
                  padre:optional: 'True'
                  padre:path: n_clusters
                  padre:value_default: '8'
                  padre:value_type: integer
                  rdfs:comment: The number of clusters to form as well as the number
                    of centroids to generate.
                  rdfs:label: num_clusters
                algorithm:
                  '@schema':
                    '@id': padre:MiniBatchKMeans/num_clusters
                    '@type': padre:ModelParameters
                    padre:configures: padre:MiniBatchKMeans
              - '@schema':
                  '@id': padre:sklearn.cluster.k_means_.MiniBatchKMeans/initialization_method
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cluster.k_means_.MiniBatchKMeans/initialization_method
                  padre:implements: padre:MiniBatchKMeans/initialization_method
                  padre:optional: 'False'
                  padre:path: init
                  padre:value_default: '''k-means++'''
                  padre:value_type: '{''k-means++'', ''random'',  array of shape (n_clusters,
                  n_features)}'
                  rdfs:comment: Method for initialization.
                  rdfs:label: initialization_method
                algorithm:
                  '@schema':
                    '@id': padre:MiniBatchKMeans/initialization_method
                    '@type': padre:ModelParameters
                    padre:configures: padre:MiniBatchKMeans
              - '@schema':
                  '@id': padre:sklearn.cluster.k_means_.MiniBatchKMeans/batch_size
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cluster.k_means_.MiniBatchKMeans/batch_size
                  padre:implements: padre:MiniBatchKMeans/batch_size
                  padre:optional: 'True'
                  padre:path: batch_size
                  padre:value_default: '100'
                  padre:value_type: integer
                  rdfs:comment: Size of the mini batches.
                  rdfs:label: batch_size
                algorithm:
                  '@schema':
                    '@id': padre:MiniBatchKMeans/batch_size
                    '@type': padre:ModelParameters
                    padre:configures: padre:MiniBatchKMeans
              - '@schema':
                  '@id': padre:sklearn.cluster.k_means_.MiniBatchKMeans/verbose
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cluster.k_means_.MiniBatchKMeans/verbose
                  padre:implements: padre:MiniBatchKMeans/verbose
                  padre:optional: 'True'
                  padre:path: verbose
                  padre:value_default: '0'
                  padre:value_type: integer
                  rdfs:comment: Verbosity mode.
                  rdfs:label: verbose
                algorithm:
                  '@schema':
                    '@id': padre:MiniBatchKMeans/verbose
                    '@type': padre:ModelParameters
                    padre:configures: padre:MiniBatchKMeans
              - '@schema':
                  '@id': padre:sklearn.cluster.k_means_.MiniBatchKMeans/compute_labels
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cluster.k_means_.MiniBatchKMeans/compute_labels
                  padre:implements: padre:MiniBatchKMeans/compute_labels
                  padre:optional: 'False'
                  padre:path: compute_labels
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: Compute label assignment and inertia for the complete
                    dataset once the minibatch optimization has converged in fit.
                  rdfs:label: compute_labels
                algorithm:
                  '@schema':
                    '@id': padre:MiniBatchKMeans/compute_labels
                    '@type': padre:ModelParameters
                    padre:configures: padre:MiniBatchKMeans
              - '@schema':
                  '@id': padre:sklearn.cluster.k_means_.MiniBatchKMeans/random_state
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cluster.k_means_.MiniBatchKMeans/random_state
                  padre:implements: padre:MiniBatchKMeans/random_state
                  padre:optional: 'True'
                  padre:path: random_state
                  padre:value_default: None
                  padre:value_type: '{integer, RandomState instance, None}'
                  rdfs:comment: The seed of the pseudo random number generator to
                    use when shuffling the data. If int, random_state is the seed used
                    by the random number generator; If RandomState instance, random_state
                    is the random number generator; If None, the random number generator
                    is the RandomState instance used by np.random.
                  rdfs:label: random_state
                algorithm:
                  '@schema':
                    '@id': padre:MiniBatchKMeans/random_state
                    '@type': padre:ModelParameters
                    padre:configures: padre:MiniBatchKMeans
              - '@schema':
                  '@id': padre:sklearn.cluster.k_means_.MiniBatchKMeans/tolerance
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cluster.k_means_.MiniBatchKMeans/tolerance
                  padre:implements: padre:MiniBatchKMeans/tolerance
                  padre:optional: 'False'
                  padre:path: tol
                  padre:value_default: '0.0'
                  padre:value_type: float
                  rdfs:comment: Control early stopping based on the relative center
                    changes as measured by a smoothed, variance-normalized of the mean
                    center squared position changes. This early stopping heuristics
                    is closer to the one used for the batch variant of the algorithms
                    but induces a slight computational and memory overhead over the
                    inertia heuristic.
                  rdfs:label: tolerance
                algorithm:
                  '@schema':
                    '@id': padre:MiniBatchKMeans/tolerance
                    '@type': padre:ModelParameters
                    padre:configures: padre:MiniBatchKMeans
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.cluster.k_means_.MiniBatchKMeans/max_iterations
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.cluster.k_means_.MiniBatchKMeans/max_iterations
                  padre:implements: padre:MiniBatchKMeans/max_iterations
                  padre:optional: 'True'
                  padre:path: max_iter
                  padre:value_default: '100'
                  padre:value_type: integer
                  rdfs:comment: Maximum number of iterations over the complete dataset
                    before stopping independently of any early stopping criterion heuristics.
                  rdfs:label: max_iterations
                algorithm:
                  '@schema':
                    '@id': padre:MiniBatchKMeans/max_iterations
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:MiniBatchKMeans
              - '@schema':
                  '@id': padre:sklearn.cluster.k_means_.MiniBatchKMeans/max_no_improvement
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.cluster.k_means_.MiniBatchKMeans/max_no_improvement
                  padre:implements: padre:MiniBatchKMeans/max_no_improvement
                  padre:optional: 'False'
                  padre:path: max_no_improvement
                  padre:value_default: '10'
                  padre:value_type: integer
                  rdfs:comment: Control early stopping based on the consecutive
                    number of mini batches that does not yield an improvement on the
                    smoothed inertia.
                  rdfs:label: max_no_improvement
                algorithm:
                  '@schema':
                    '@id': padre:MiniBatchKMeans/max_no_improvement
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:MiniBatchKMeans
              - '@schema':
                  '@id': padre:sklearn.cluster.k_means_.MiniBatchKMeans/initialization_size
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.cluster.k_means_.MiniBatchKMeans/initialization_size
                  padre:implements: padre:MiniBatchKMeans/initialization_size
                  padre:optional: 'True'
                  padre:path: init_size
                  padre:value_default: 3*batch size
                  padre:value_type: integer
                  rdfs:comment: Number of samples to randomly sample for speeding
                    up the initialization (sometimes at the expense of accuracy).
                  rdfs:label: initialization_size
                algorithm:
                  '@schema':
                    '@id': padre:MiniBatchKMeans/initialization_size
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:MiniBatchKMeans
              - '@schema':
                  '@id': padre:sklearn.cluster.k_means_.MiniBatchKMeans/num_initialization
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.cluster.k_means_.MiniBatchKMeans/num_initialization
                  padre:implements: padre:MiniBatchKMeans/num_initialization
                  padre:optional: 'False'
                  padre:path: n_init
                  padre:value_default: '3'
                  padre:value_type: integer
                  rdfs:comment: Number of random initializations that are tried.
                  rdfs:label: num_initialization
                algorithm:
                  '@schema':
                    '@id': padre:MiniBatchKMeans/num_initialization
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:MiniBatchKMeans
              - '@schema':
                  '@id': padre:sklearn.cluster.k_means_.MiniBatchKMeans/reassignment_ratio
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.cluster.k_means_.MiniBatchKMeans/reassignment_ratio
                  padre:implements: padre:MiniBatchKMeans/reassignment_ratio
                  padre:optional: 'False'
                  padre:path: reassignment_ratio
                  padre:value_default: '0.01'
                  padre:value_type: float
                  rdfs:comment: Control the fraction of the maximum number of counts
                    for a center to be reassigned. A higher value means that low count
                    centers are more easily reassigned, which means that the model will
                    take longer to converge, but should converge in a better clustering.
                  rdfs:label: reassignment_ratio
                algorithm:
                  '@schema':
                    '@id': padre:MiniBatchKMeans/reassignment_ratio
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:MiniBatchKMeans
    :cluster.mean_shift_.MeanShift:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.cluster.mean_shift_.MeanShift
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:MeanShift
            rdfs:comment: null
            rdfs:label: mean shift clustering with flat kernel
          algorithm:
            '@schema':
              '@id': padre:MeanShift
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: mean shift clustering with flat kernel
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.cluster.mean_shift_.MeanShift/bandwidth
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cluster.mean_shift_.MeanShift/bandwidth
                  padre:implements: padre:MeanShift/bandwidth
                  padre:optional: 'True'
                  padre:path: bandwidth
                  padre:value_default: None
                  padre:value_type: '{float, None}'
                  rdfs:comment: Bandwidth used in the RBF kernel.
                  rdfs:label: bandwidth
                algorithm:
                  '@schema':
                    '@id': padre:MeanShift/bandwidth
                    '@type': padre:ModelParameters
                    padre:configures: padre:MeanShift
              - '@schema':
                  '@id': padre:sklearn.cluster.mean_shift_.MeanShift/seeds
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cluster.mean_shift_.MeanShift/seeds
                  padre:implements: padre:MeanShift/seeds
                  padre:optional: 'True'
                  padre:path: seeds
                  padre:value_default: None
                  padre:value_type: '{array of shape=[n_samples, n_features], None}'
                  rdfs:comment: Seeds used to initialize kernels.
                  rdfs:label: seeds
                algorithm:
                  '@schema':
                    '@id': padre:MeanShift/seeds
                    '@type': padre:ModelParameters
                    padre:configures: padre:MeanShift
              - '@schema':
                  '@id': padre:sklearn.cluster.mean_shift_.MeanShift/bin_seeding
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cluster.mean_shift_.MeanShift/bin_seeding
                  padre:implements: padre:MeanShift/bin_seeding
                  padre:optional: 'True'
                  padre:path: bin_seeding
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: If true, initial kernel locations are not locations
                    of all points, but rather the location of the discretized version
                    of points, where points are binned onto a grid whose coarseness
                    corresponds to the bandwidth. Setting this option to True will speed
                    up the algorithm because fewer seeds will be initialized.
                  rdfs:label: bin_seeding
                algorithm:
                  '@schema':
                    '@id': padre:MeanShift/bin_seeding
                    '@type': padre:ModelParameters
                    padre:configures: padre:MeanShift
              - '@schema':
                  '@id': padre:sklearn.cluster.mean_shift_.MeanShift/min_bin_freq
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cluster.mean_shift_.MeanShift/min_bin_freq
                  padre:implements: padre:MeanShift/min_bin_freq
                  padre:optional: 'True'
                  padre:path: min_bin_freq
                  padre:value_default: '1'
                  padre:value_type: integer
                  rdfs:comment: To speed up the algorithm, accept only those bins
                    with at least min_bin_freq points as seeds.
                  rdfs:label: min_bin_freq
                algorithm:
                  '@schema':
                    '@id': padre:MeanShift/min_bin_freq
                    '@type': padre:ModelParameters
                    padre:configures: padre:MeanShift
              - '@schema':
                  '@id': padre:sklearn.cluster.mean_shift_.MeanShift/cluster_all
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cluster.mean_shift_.MeanShift/cluster_all
                  padre:implements: padre:MeanShift/cluster_all
                  padre:optional: 'False'
                  padre:path: cluster_all
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: If true, then all points are clustered, even those
                    orphans that are not within any kernel. Orphans are assigned to
                    the nearest kernel. If false, then orphans are given cluster label
                    -1.
                  rdfs:label: cluster_all
                algorithm:
                  '@schema':
                    '@id': padre:MeanShift/cluster_all
                    '@type': padre:ModelParameters
                    padre:configures: padre:MeanShift
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.cluster.mean_shift_.MeanShift/jobs
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.cluster.mean_shift_.MeanShift/jobs
                  padre:implements: padre:MeanShift/jobs
                  padre:optional: 'False'
                  padre:path: n_jobs
                  padre:value_default: '1'
                  padre:value_type: integer
                  rdfs:comment: The number of jobs to use for the computation. If
                    -1 all CPUs are used.
                  rdfs:label: jobs
                algorithm:
                  '@schema':
                    '@id': padre:MeanShift/jobs
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:MeanShift
    :cluster.spectral.SpectralClustering:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.cluster.spectral.SpectralClustering
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:SpectralClustering
            rdfs:comment: null
            rdfs:label: spectral clustering
          algorithm:
            '@schema':
              '@id': padre:SpectralClustering
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: spectral clustering
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.cluster.spectral.SpectralClustering/num_clusters
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cluster.spectral.SpectralClustering/num_clusters
                  padre:implements: padre:SpectralClustering/num_clusters
                  padre:optional: 'True'
                  padre:path: n_clusters
                  padre:value_default: '8'
                  padre:value_type: integer
                  rdfs:comment: The dimension of the projection subspace.
                  rdfs:label: num_clusters
                algorithm:
                  '@schema':
                    '@id': padre:SpectralClustering/num_clusters
                    '@type': padre:ModelParameters
                    padre:configures: padre:SpectralClustering
              - '@schema':
                  '@id': padre:sklearn.cluster.spectral.SpectralClustering/eigen_solver
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cluster.spectral.SpectralClustering/eigen_solver
                  padre:implements: padre:SpectralClustering/eigen_solver
                  padre:optional: 'False'
                  padre:path: eigen_solver
                  padre:value_default: None
                  padre:value_type: '{''lobpcg'', ''arpack'', ''amg'', None]'
                  rdfs:comment: The eigenvalue decomposition strategy to use.
                  rdfs:label: eigen_solver
                algorithm:
                  '@schema':
                    '@id': padre:SpectralClustering/eigen_solver
                    '@type': padre:ModelParameters
                    padre:configures: padre:SpectralClustering
              - '@schema':
                  '@id': padre:sklearn.cluster.spectral.SpectralClustering/kernel_coefficient
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cluster.spectral.SpectralClustering/kernel_coefficient
                  padre:implements: padre:SpectralClustering/kernel_coefficient
                  padre:optional: 'False'
                  padre:path: gamma
                  padre:value_default: '10'
                  padre:value_type: float
                  rdfs:comment: Kernel coefficient for rbf, poly, sigmoid, laplacian
                    and chi2 kernels.
                  rdfs:label: kernel_coefficient
                algorithm:
                  '@schema':
                    '@id': padre:SpectralClustering/kernel_coefficient
                    '@type': padre:ModelParameters
                    padre:configures: padre:SpectralClustering
              - '@schema':
                  '@id': padre:sklearn.cluster.spectral.SpectralClustering/affinity
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cluster.spectral.SpectralClustering/affinity
                  padre:implements: padre:SpectralClustering/affinity
                  padre:optional: 'True'
                  padre:path: affinity
                  padre:value_default: '''rbf'''
                  padre:value_type: '{''nearest_neighbors'', ''precomputed'', ''rbf'',
                  ''sigmoid'', ''polynomial'', ''poly'', ''linear'', ''cosine'', array-like,
                  callable}'''
                  rdfs:comment: Which affinity to use.
                  rdfs:label: affinity
                algorithm:
                  '@schema':
                    '@id': padre:SpectralClustering/affinity
                    '@type': padre:ModelParameters
                    padre:configures: padre:SpectralClustering
              - '@schema':
                  '@id': padre:sklearn.cluster.spectral.SpectralClustering/num_neighbours
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cluster.spectral.SpectralClustering/num_neighbours
                  padre:implements: padre:SpectralClustering/num_neighbours
                  padre:optional: 'True'
                  padre:path: n_neighbors
                  padre:value_default: '10'
                  padre:value_type: integer
                  rdfs:comment: Number of neighbors to use when constructing the
                    affinity matrix using the nearest neighbors method.
                  rdfs:label: num_neighbours
                algorithm:
                  '@schema':
                    '@id': padre:SpectralClustering/num_neighbours
                    '@type': padre:ModelParameters
                    padre:configures: padre:SpectralClustering
              - '@schema':
                  '@id': padre:sklearn.cluster.spectral.SpectralClustering/eigen_tol
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cluster.spectral.SpectralClustering/eigen_tol
                  padre:implements: padre:SpectralClustering/eigen_tol
                  padre:optional: 'True'
                  padre:path: eigen_tol
                  padre:value_default: '0.0'
                  padre:value_type: float
                  rdfs:comment: Stopping criterion for eigendecomposition of the
                    Laplacian matrix.
                  rdfs:label: eigen_tol
                algorithm:
                  '@schema':
                    '@id': padre:SpectralClustering/eigen_tol
                    '@type': padre:ModelParameters
                    padre:configures: padre:SpectralClustering
              - '@schema':
                  '@id': padre:sklearn.cluster.spectral.SpectralClustering/assign_labels
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cluster.spectral.SpectralClustering/assign_labels
                  padre:implements: padre:SpectralClustering/assign_labels
                  padre:optional: 'False'
                  padre:path: assign_labels
                  padre:value_default: '''kmeans'''
                  padre:value_type: '{''kmeans'', ''discretize''}'
                  rdfs:comment: The strategy to use to assign labels in the embedding
                    space. There are two ways to assign labels after the laplacian embedding.
                    k-means can be applied and is a popular choice. But it can also
                    be sensitive to initialization. Discretization is another approach
                    which is less sensitive to random initialization.
                  rdfs:label: assign_labels
                algorithm:
                  '@schema':
                    '@id': padre:SpectralClustering/assign_labels
                    '@type': padre:ModelParameters
                    padre:configures: padre:SpectralClustering
              - '@schema':
                  '@id': padre:sklearn.cluster.spectral.SpectralClustering/kernel_degree
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cluster.spectral.SpectralClustering/kernel_degree
                  padre:implements: padre:SpectralClustering/kernel_degree
                  padre:optional: 'False'
                  padre:path: degree
                  padre:value_default: '3.0'
                  padre:value_type: float
                  rdfs:comment: Degree of the polynomial kernel.
                  rdfs:label: kernel_degree
                algorithm:
                  '@schema':
                    '@id': padre:SpectralClustering/kernel_degree
                    '@type': padre:ModelParameters
                    padre:configures: padre:SpectralClustering
              - '@schema':
                  '@id': padre:sklearn.cluster.spectral.SpectralClustering/zero_coefficient
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cluster.spectral.SpectralClustering/zero_coefficient
                  padre:implements: padre:SpectralClustering/zero_coefficient
                  padre:optional: 'False'
                  padre:path: coef0
                  padre:value_default: '1.0'
                  padre:value_type: float
                  rdfs:comment: Zero coefficient for polynomial and sigmoid kernels.
                  rdfs:label: zero_coefficient
                algorithm:
                  '@schema':
                    '@id': padre:SpectralClustering/zero_coefficient
                    '@type': padre:ModelParameters
                    padre:configures: padre:SpectralClustering
              - '@schema':
                  '@id': padre:sklearn.cluster.spectral.SpectralClustering/kernel_parameters
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cluster.spectral.SpectralClustering/kernel_parameters
                  padre:implements: padre:SpectralClustering/kernel_parameters
                  padre:optional: 'True'
                  padre:path: kernel_params
                  padre:value_default: None
                  padre:value_type: dictionary of string to any
                  rdfs:comment: Additional parameters (keyword arguments) for kernel
                    function passed as callable object.
                  rdfs:label: kernel_parameters
                algorithm:
                  '@schema':
                    '@id': padre:SpectralClustering/kernel_parameters
                    '@type': padre:ModelParameters
                    padre:configures: padre:SpectralClustering
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.cluster.spectral.SpectralClustering/jobs
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.cluster.spectral.SpectralClustering/jobs
                  padre:implements: padre:SpectralClustering/jobs
                  padre:optional: 'True'
                  padre:path: n_jobs
                  padre:value_default: '1'
                  padre:value_type: integer
                  rdfs:comment: The number of jobs to use for the computation. If
                    -1 all CPUs are used.
                  rdfs:label: jobs
                algorithm:
                  '@schema':
                    '@id': padre:SpectralClustering/jobs
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:SpectralClustering
              - '@schema':
                  '@id': padre:sklearn.cluster.spectral.SpectralClustering/num_initialization
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.cluster.spectral.SpectralClustering/num_initialization
                  padre:implements: padre:SpectralClustering/num_initialization
                  padre:optional: 'True'
                  padre:path: n_init
                  padre:value_default: '10'
                  padre:value_type: integer
                  rdfs:comment: Number of time the k-means algorithm will be run
                    with different centroid seeds.
                  rdfs:label: num_initialization
                algorithm:
                  '@schema':
                    '@id': padre:SpectralClustering/num_initialization
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:SpectralClustering
    :covariance.outlier_detection.EllipticEnvelope:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.covariance.outlier_detection.EllipticEnvelope
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:EllipticEnvelope
            rdfs:comment: null
            rdfs:label: elliptice envelope
          algorithm:
            '@schema':
              '@id': padre:EllipticEnvelope
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: elliptice envelope
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.covariance.outlier_detection.EllipticEnvelope/store_precision
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.covariance.outlier_detection.EllipticEnvelope/store_precision
                  padre:implements: padre:EllipticEnvelope/store_precision
                  padre:optional: 'True'
                  padre:path: store_precision
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: Specifies if the estimated precision is stored.
                  rdfs:label: store_precision
                algorithm:
                  '@schema':
                    '@id': padre:EllipticEnvelope/store_precision
                    '@type': padre:ModelParameters
                    padre:configures: padre:EllipticEnvelope
              - '@schema':
                  '@id': padre:sklearn.covariance.outlier_detection.EllipticEnvelope/assume_centered
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.covariance.outlier_detection.EllipticEnvelope/assume_centered
                  padre:implements: padre:EllipticEnvelope/assume_centered
                  padre:optional: 'True'
                  padre:path: assume_centered
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: If True, the support of robust location and covariance
                    estimates is computed, and a covariance estimate is recomputed from
                    it, without centering the data. Useful to work with data whose mean
                    is significantly equal to zero but is not exactly zero. If False,
                    the robust location and covariance are directly computed with the
                    FastMCD algorithm without additional treatment.
                  rdfs:label: assume_centered
                algorithm:
                  '@schema':
                    '@id': padre:EllipticEnvelope/assume_centered
                    '@type': padre:ModelParameters
                    padre:configures: padre:EllipticEnvelope
              - '@schema':
                  '@id': padre:sklearn.covariance.outlier_detection.EllipticEnvelope/support_fraction
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.covariance.outlier_detection.EllipticEnvelope/support_fraction
                  padre:implements: padre:EllipticEnvelope/support_fraction
                  padre:optional: 'True'
                  padre:path: support_fraction
                  padre:value_default: None
                  padre:value_type: '{float in (0., 1.), None}'
                  rdfs:comment: 'The proportion of points to be included in the
                  support of the raw MCD estimate. If None, the minimum value of support_fraction
                  will be used within the algorithm: [n_sample + n_features + 1] /
                  2.'
                  rdfs:label: support_fraction
                algorithm:
                  '@schema':
                    '@id': padre:EllipticEnvelope/support_fraction
                    '@type': padre:ModelParameters
                    padre:configures: padre:EllipticEnvelope
              - '@schema':
                  '@id': padre:sklearn.covariance.outlier_detection.EllipticEnvelope/contamination
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.covariance.outlier_detection.EllipticEnvelope/contamination
                  padre:implements: padre:EllipticEnvelope/contamination
                  padre:optional: 'True'
                  padre:path: contamination
                  padre:value_default: '0.1'
                  padre:value_type: float in (0., 0.5)
                  rdfs:comment: The amount of contamination of the data set, i.e.
                    the proportion of outliers in the data set.
                  rdfs:label: contamination
                algorithm:
                  '@schema':
                    '@id': padre:EllipticEnvelope/contamination
                    '@type': padre:ModelParameters
                    padre:configures: padre:EllipticEnvelope
              - '@schema':
                  '@id': padre:sklearn.covariance.outlier_detection.EllipticEnvelope/random_state
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.covariance.outlier_detection.EllipticEnvelope/random_state
                  padre:implements: padre:EllipticEnvelope/random_state
                  padre:optional: 'True'
                  padre:path: random_state
                  padre:value_default: None
                  padre:value_type: '{integer, RandomState instance, None}'
                  rdfs:comment: The seed of the pseudo random number generator to
                    use when shuffling the data. If int, random_state is the seed used
                    by the random number generator; If RandomState instance, random_state
                    is the random number generator; If None, the random number generator
                    is the RandomState instance used by np.random.
                  rdfs:label: random_state
                algorithm:
                  '@schema':
                    '@id': padre:EllipticEnvelope/random_state
                    '@type': padre:ModelParameters
                    padre:configures: padre:EllipticEnvelope
            optimisation_parameters: []
    :cross_decomposition.cca_.CCA:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.cross_decomposition.cca_.CCA
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:CCA
            rdfs:comment: null
            rdfs:label: canonical correlation analysis
          algorithm:
            '@schema':
              '@id': padre:CCA
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: canonical correlation analysis
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.cross_decomposition.cca_.CCA/num_components
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cross_decomposition.cca_.CCA/num_components
                  padre:implements: padre:CCA/num_components
                  padre:optional: 'False'
                  padre:path: n_components
                  padre:value_default: '2'
                  padre:value_type: integer
                  rdfs:comment: Number of components to keep.
                  rdfs:label: num_components
                algorithm:
                  '@schema':
                    '@id': padre:CCA/num_components
                    '@type': padre:ModelParameters
                    padre:configures: padre:CCA
              - '@schema':
                  '@id': padre:sklearn.cross_decomposition.cca_.CCA/scale
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cross_decomposition.cca_.CCA/scale
                  padre:implements: padre:CCA/scale
                  padre:optional: 'False'
                  padre:path: scale
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: Whether to scale the data.
                  rdfs:label: scale
                algorithm:
                  '@schema':
                    '@id': padre:CCA/scale
                    '@type': padre:ModelParameters
                    padre:configures: padre:CCA
              - '@schema':
                  '@id': padre:sklearn.cross_decomposition.cca_.CCA/tolerance
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cross_decomposition.cca_.CCA/tolerance
                  padre:implements: padre:CCA/tolerance
                  padre:optional: 'False'
                  padre:path: tol
                  padre:value_default: '0.000006'
                  padre:value_type: positive float
                  rdfs:comment: Tolerance used in the iterative algorithm.
                  rdfs:label: tolerance
                algorithm:
                  '@schema':
                    '@id': padre:CCA/tolerance
                    '@type': padre:ModelParameters
                    padre:configures: padre:CCA
              - '@schema':
                  '@id': padre:sklearn.cross_decomposition.cca_.CCA/copy
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cross_decomposition.cca_.CCA/copy
                  padre:implements: padre:CCA/copy
                  padre:optional: 'True'
                  padre:path: copy
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: "Whether the deflation should be done on a copy.\
                  \ Let the default value to True unless you don\u2019t care about\
                  \ side effect."
                  rdfs:label: copy
                algorithm:
                  '@schema':
                    '@id': padre:CCA/copy
                    '@type': padre:ModelParameters
                    padre:configures: padre:CCA
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.cross_decomposition.cca_.CCA/max_iterations
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.cross_decomposition.cca_.CCA/max_iterations
                  padre:implements: padre:CCA/max_iterations
                  padre:optional: 'False'
                  padre:path: max_iter
                  padre:value_default: '500'
                  padre:value_type: integer
                  rdfs:comment: The maximum number of iterations of the NIPALS inner
                    loop.
                  rdfs:label: max_iterations
                algorithm:
                  '@schema':
                    '@id': padre:CCA/max_iterations
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:CCA
    :cross_decomposition.pls_.PLSCanonical:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.cross_decomposition.pls_.PLSCanonical
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:PLSCanonical
            rdfs:comment: null
            rdfs:label: 2 blocks canonical partial least squares
          algorithm:
            '@schema':
              '@id': padre:PLSCanonical
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: 2 blocks canonical partial least squares
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.cross_decomposition.pls_.PLSCanonical/num_components
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cross_decomposition.pls_.PLSCanonical/num_components
                  padre:implements: padre:PLSCanonical/num_components
                  padre:optional: 'False'
                  padre:path: n_components
                  padre:value_default: '2'
                  padre:value_type: integer
                  rdfs:comment: Number of components to keep.
                  rdfs:label: num_components
                algorithm:
                  '@schema':
                    '@id': padre:PLSCanonical/num_components
                    '@type': padre:ModelParameters
                    padre:configures: padre:PLSCanonical
              - '@schema':
                  '@id': padre:sklearn.cross_decomposition.pls_.PLSCanonical/scale
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cross_decomposition.pls_.PLSCanonical/scale
                  padre:implements: padre:PLSCanonical/scale
                  padre:optional: 'False'
                  padre:path: scale
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: Whether to scale the data.
                  rdfs:label: scale
                algorithm:
                  '@schema':
                    '@id': padre:PLSCanonical/scale
                    '@type': padre:ModelParameters
                    padre:configures: padre:PLSCanonical
              - '@schema':
                  '@id': padre:sklearn.cross_decomposition.pls_.PLSCanonical/weight_algorithm
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cross_decomposition.pls_.PLSCanonical/weight_algorithm
                  padre:implements: padre:PLSCanonical/weight_algorithm
                  padre:optional: 'False'
                  padre:path: algorithm
                  padre:value_default: '''nipals'''
                  padre:value_type: '{''nipals'', ''svd''}'
                  rdfs:comment: The algorithm used to estimate the weights.
                  rdfs:label: weight_algorithm
                algorithm:
                  '@schema':
                    '@id': padre:PLSCanonical/weight_algorithm
                    '@type': padre:ModelParameters
                    padre:configures: padre:PLSCanonical
              - '@schema':
                  '@id': padre:sklearn.cross_decomposition.pls_.PLSCanonical/tolerance
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cross_decomposition.pls_.PLSCanonical/tolerance
                  padre:implements: padre:PLSCanonical/tolerance
                  padre:optional: 'False'
                  padre:path: tol
                  padre:value_default: '0.000006'
                  padre:value_type: positive float
                  rdfs:comment: Tolerance used in the iterative algorithm.
                  rdfs:label: tolerance
                algorithm:
                  '@schema':
                    '@id': padre:PLSCanonical/tolerance
                    '@type': padre:ModelParameters
                    padre:configures: padre:PLSCanonical
              - '@schema':
                  '@id': padre:sklearn.cross_decomposition.pls_.PLSCanonical/copy
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cross_decomposition.pls_.PLSCanonical/copy
                  padre:implements: padre:PLSCanonical/copy
                  padre:optional: 'True'
                  padre:path: copy
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: "Whether the deflation should be done on a copy.\
                  \ Let the default value to True unless you don\u2019t care about\
                  \ side effect."
                  rdfs:label: copy
                algorithm:
                  '@schema':
                    '@id': padre:PLSCanonical/copy
                    '@type': padre:ModelParameters
                    padre:configures: padre:PLSCanonical
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.cross_decomposition.pls_.PLSCanonical/max_iterations
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.cross_decomposition.pls_.PLSCanonical/max_iterations
                  padre:implements: padre:PLSCanonical/max_iterations
                  padre:optional: 'False'
                  padre:path: max_iter
                  padre:value_default: '500'
                  padre:value_type: integer
                  rdfs:comment: The maximum number of iterations of the NIPALS inner
                    loop.
                  rdfs:label: max_iterations
                algorithm:
                  '@schema':
                    '@id': padre:PLSCanonical/max_iterations
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:PLSCanonical
    :cross_decomposition.pls_.PLSRegression:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.cross_decomposition.pls_.PLSRegression
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:PLSRegression
            rdfs:comment: null
            rdfs:label: partial least squares regression
          algorithm:
            '@schema':
              '@id': padre:PLSRegression
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: partial least squares regression
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.cross_decomposition.pls_.PLSRegression/num_components
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cross_decomposition.pls_.PLSRegression/num_components
                  padre:implements: padre:PLSRegression/num_components
                  padre:optional: 'False'
                  padre:path: n_components
                  padre:value_default: '2'
                  padre:value_type: integer
                  rdfs:comment: Number of components to keep.
                  rdfs:label: num_components
                algorithm:
                  '@schema':
                    '@id': padre:PLSRegression/num_components
                    '@type': padre:ModelParameters
                    padre:configures: padre:PLSRegression
              - '@schema':
                  '@id': padre:sklearn.cross_decomposition.pls_.PLSRegression/scale
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cross_decomposition.pls_.PLSRegression/scale
                  padre:implements: padre:PLSRegression/scale
                  padre:optional: 'False'
                  padre:path: scale
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: Whether to scale the data.
                  rdfs:label: scale
                algorithm:
                  '@schema':
                    '@id': padre:PLSRegression/scale
                    '@type': padre:ModelParameters
                    padre:configures: padre:PLSRegression
              - '@schema':
                  '@id': padre:sklearn.cross_decomposition.pls_.PLSRegression/tolerance
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cross_decomposition.pls_.PLSRegression/tolerance
                  padre:implements: padre:PLSRegression/tolerance
                  padre:optional: 'False'
                  padre:path: tol
                  padre:value_default: '0.000006'
                  padre:value_type: positive float
                  rdfs:comment: Tolerance used in the iterative algorithm.
                  rdfs:label: tolerance
                algorithm:
                  '@schema':
                    '@id': padre:PLSRegression/tolerance
                    '@type': padre:ModelParameters
                    padre:configures: padre:PLSRegression
              - '@schema':
                  '@id': padre:sklearn.cross_decomposition.pls_.PLSRegression/copy
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cross_decomposition.pls_.PLSRegression/copy
                  padre:implements: padre:PLSRegression/copy
                  padre:optional: 'True'
                  padre:path: copy
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: "Whether the deflation should be done on a copy.\
                  \ Let the default value to True unless you don\u2019t care about\
                  \ side effect."
                  rdfs:label: copy
                algorithm:
                  '@schema':
                    '@id': padre:PLSRegression/copy
                    '@type': padre:ModelParameters
                    padre:configures: padre:PLSRegression
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.cross_decomposition.pls_.PLSRegression/max_iterations
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.cross_decomposition.pls_.PLSRegression/max_iterations
                  padre:implements: padre:PLSRegression/max_iterations
                  padre:optional: 'False'
                  padre:path: max_iter
                  padre:value_default: '500'
                  padre:value_type: integer
                  rdfs:comment: The maximum number of iterations of the NIPALS inner
                    loop.
                  rdfs:label: max_iterations
                algorithm:
                  '@schema':
                    '@id': padre:PLSRegression/max_iterations
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:PLSRegression
    :cross_decomposition.pls_.PLSSVD:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.cross_decomposition.pls_.PLSSVD
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:PLSSVD
            rdfs:comment: null
            rdfs:label: partial least squares singular value decomposition
          algorithm:
            '@schema':
              '@id': padre:PLSSVD
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: partial least squares singular value decomposition
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.cross_decomposition.pls_.PLSSVD/num_components
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cross_decomposition.pls_.PLSSVD/num_components
                  padre:implements: padre:PLSSVD/num_components
                  padre:optional: 'False'
                  padre:path: n_components
                  padre:value_default: '2'
                  padre:value_type: integer
                  rdfs:comment: Number of components to keep.
                  rdfs:label: num_components
                algorithm:
                  '@schema':
                    '@id': padre:PLSSVD/num_components
                    '@type': padre:ModelParameters
                    padre:configures: padre:PLSSVD
              - '@schema':
                  '@id': padre:sklearn.cross_decomposition.pls_.PLSSVD/scale
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cross_decomposition.pls_.PLSSVD/scale
                  padre:implements: padre:PLSSVD/scale
                  padre:optional: 'False'
                  padre:path: scale
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: Whether to scale the data.
                  rdfs:label: scale
                algorithm:
                  '@schema':
                    '@id': padre:PLSSVD/scale
                    '@type': padre:ModelParameters
                    padre:configures: padre:PLSSVD
              - '@schema':
                  '@id': padre:sklearn.cross_decomposition.pls_.PLSSVD/copy
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.cross_decomposition.pls_.PLSSVD/copy
                  padre:implements: padre:PLSSVD/copy
                  padre:optional: 'True'
                  padre:path: copy
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: "Whether the deflation should be done on a copy.\
                  \ Let the default value to True unless you don\u2019t care about\
                  \ side effect."
                  rdfs:label: copy
                algorithm:
                  '@schema':
                    '@id': padre:PLSSVD/copy
                    '@type': padre:ModelParameters
                    padre:configures: padre:PLSSVD
            optimisation_parameters: []
    :decomposition.SparseCoder:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.decomposition.SparseCoder
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:SparseCoder
            rdfs:comment: null
            rdfs:label: sparse coding
          algorithm:
            '@schema':
              '@id': padre:SparseCoder
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: sparse coding
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.decomposition.SparseCoder/dictionary
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.SparseCoder/dictionary
                  padre:implements: padre:SparseCoder/dictionary
                  padre:optional: 'False'
                  padre:path: dictionary
                  padre:value_default: ''
                  padre:value_type: array of shape [n_components, n_features]
                  rdfs:comment: The dictionary atoms used for sparse coding. Lines
                    are assumed to be normalized to unit norm.
                  rdfs:label: dictionary
                algorithm:
                  '@schema':
                    '@id': padre:SparseCoder/dictionary
                    '@type': padre:ModelParameters
                    padre:configures: padre:SparseCoder
              - '@schema':
                  '@id': padre:sklearn.decomposition.SparseCoder/transform_algorithm
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.SparseCoder/transform_algorithm
                  padre:implements: padre:SparseCoder/transform_algorithm
                  padre:optional: 'False'
                  padre:path: transform_algorithm
                  padre:value_default: '''omp'''
                  padre:value_type: '{''lasso_lars'', ''lasso_cd'', ''lars'', ''omp'',
                  ''threshold''}'
                  rdfs:comment: Algorithm used to transform the data.
                  rdfs:label: transform_algorithm
                algorithm:
                  '@schema':
                    '@id': padre:SparseCoder/transform_algorithm
                    '@type': padre:ModelParameters
                    padre:configures: padre:SparseCoder
              - '@schema':
                  '@id': padre:sklearn.decomposition.SparseCoder/transform_num_nonzero_coefs
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.SparseCoder/transform_num_nonzero_coefs
                  padre:implements: padre:SparseCoder/transform_num_nonzero_coefs
                  padre:optional: 'False'
                  padre:path: transform_n_nonzero_coefs
                  padre:value_default: None
                  padre:value_type: '{integer, None}'
                  rdfs:comment: Number of nonzero coefficients to target in each
                    column of the solution.
                  rdfs:label: transform_num_nonzero_coefs
                algorithm:
                  '@schema':
                    '@id': padre:SparseCoder/transform_num_nonzero_coefs
                    '@type': padre:ModelParameters
                    padre:configures: padre:SparseCoder
              - '@schema':
                  '@id': padre:sklearn.decomposition.SparseCoder/l1_penalty
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.SparseCoder/l1_penalty
                  padre:implements: padre:SparseCoder/l1_penalty
                  padre:optional: 'False'
                  padre:path: transform_alpha
                  padre:value_default: None
                  padre:value_type: '{float, None}'
                  rdfs:comment: Penalty applied to the L1 norm.
                  rdfs:label: l1_penalty
                algorithm:
                  '@schema':
                    '@id': padre:SparseCoder/l1_penalty
                    '@type': padre:ModelParameters
                    padre:configures: padre:SparseCoder
              - '@schema':
                  '@id': padre:sklearn.decomposition.SparseCoder/split_sign
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.SparseCoder/split_sign
                  padre:implements: padre:SparseCoder/split_sign
                  padre:optional: 'False'
                  padre:path: split_sign
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: Whether to split the sparse feature vector into
                    the concatenation of its negative part and its positive part. This
                    can improve the performance of downstream classifiers.
                  rdfs:label: split_sign
                algorithm:
                  '@schema':
                    '@id': padre:SparseCoder/split_sign
                    '@type': padre:ModelParameters
                    padre:configures: padre:SparseCoder
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.decomposition.SparseCoder/jobs
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.decomposition.SparseCoder/jobs
                  padre:implements: padre:SparseCoder/jobs
                  padre:optional: 'False'
                  padre:path: n_jobs
                  padre:value_default: '1'
                  padre:value_type: integer
                  rdfs:comment: The number of jobs to use for the computation. If
                    -1 all CPUs are used.
                  rdfs:label: jobs
                algorithm:
                  '@schema':
                    '@id': padre:SparseCoder/jobs
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:SparseCoder
    :decomposition.dict_learning.DictionaryLearning:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.decomposition.dict_learning.DictionaryLearning
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:DictionaryLearning
            rdfs:comment: null
            rdfs:label: dictionary learning
          algorithm:
            '@schema':
              '@id': padre:DictionaryLearning
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: dictionary learning
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.decomposition.dict_learning.DictionaryLearning/num_components
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.dict_learning.DictionaryLearning/num_components
                  padre:implements: padre:DictionaryLearning/num_components
                  padre:optional: 'False'
                  padre:path: n_components
                  padre:value_default: None
                  padre:value_type: '{integer, None}'
                  rdfs:comment: Number of dictionary elements to extract.
                  rdfs:label: num_components
                algorithm:
                  '@schema':
                    '@id': padre:DictionaryLearning/num_components
                    '@type': padre:ModelParameters
                    padre:configures: padre:DictionaryLearning
              - '@schema':
                  '@id': padre:sklearn.decomposition.dict_learning.DictionaryLearning/sparsity_control_param
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.dict_learning.DictionaryLearning/sparsity_control_param
                  padre:implements: padre:DictionaryLearning/sparsity_control_param
                  padre:optional: 'False'
                  padre:path: alpha
                  padre:value_default: '1.0'
                  padre:value_type: float
                  rdfs:comment: sparsity controlling parameter
                  rdfs:label: sparsity_control_param
                algorithm:
                  '@schema':
                    '@id': padre:DictionaryLearning/sparsity_control_param
                    '@type': padre:ModelParameters
                    padre:configures: padre:DictionaryLearning
              - '@schema':
                  '@id': padre:sklearn.decomposition.dict_learning.DictionaryLearning/tolerance
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.dict_learning.DictionaryLearning/tolerance
                  padre:implements: padre:DictionaryLearning/tolerance
                  padre:optional: 'True'
                  padre:path: tol
                  padre:value_default: '0.00000001'
                  padre:value_type: float
                  rdfs:comment: Tolerance for numerical error.
                  rdfs:label: tolerance
                algorithm:
                  '@schema':
                    '@id': padre:DictionaryLearning/tolerance
                    '@type': padre:ModelParameters
                    padre:configures: padre:DictionaryLearning
              - '@schema':
                  '@id': padre:sklearn.decomposition.dict_learning.DictionaryLearning/fit_algorithm
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.dict_learning.DictionaryLearning/fit_algorithm
                  padre:implements: padre:DictionaryLearning/fit_algorithm
                  padre:optional: 'False'
                  padre:path: fit_algorithm
                  padre:value_default: ''
                  padre:value_type: '{''lars'', ''cd''}'
                  rdfs:comment: Method to solve the Lasso problem.
                  rdfs:label: fit_algorithm
                algorithm:
                  '@schema':
                    '@id': padre:DictionaryLearning/fit_algorithm
                    '@type': padre:ModelParameters
                    padre:configures: padre:DictionaryLearning
              - '@schema':
                  '@id': padre:sklearn.decomposition.dict_learning.DictionaryLearning/transform_algorithm
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.dict_learning.DictionaryLearning/transform_algorithm
                  padre:implements: padre:DictionaryLearning/transform_algorithm
                  padre:optional: 'False'
                  padre:path: transform_algorithm
                  padre:value_default: '''omp'''
                  padre:value_type: '{''lasso_lars'', ''lasso_cd'', ''lars'', ''omp'',
                  ''threshold''}'
                  rdfs:comment: Algorithm used to transform the data.
                  rdfs:label: transform_algorithm
                algorithm:
                  '@schema':
                    '@id': padre:DictionaryLearning/transform_algorithm
                    '@type': padre:ModelParameters
                    padre:configures: padre:DictionaryLearning
              - '@schema':
                  '@id': padre:sklearn.decomposition.dict_learning.DictionaryLearning/transform_num_nonzero_coefs
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.dict_learning.DictionaryLearning/transform_num_nonzero_coefs
                  padre:implements: padre:DictionaryLearning/transform_num_nonzero_coefs
                  padre:optional: 'False'
                  padre:path: transform_n_nonzero_coefs
                  padre:value_default: None
                  padre:value_type: '{integer, None}'
                  rdfs:comment: Number of nonzero coefficients to target in each
                    column of the solution.
                  rdfs:label: transform_num_nonzero_coefs
                algorithm:
                  '@schema':
                    '@id': padre:DictionaryLearning/transform_num_nonzero_coefs
                    '@type': padre:ModelParameters
                    padre:configures: padre:DictionaryLearning
              - '@schema':
                  '@id': padre:sklearn.decomposition.dict_learning.DictionaryLearning/l1_penalty
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.dict_learning.DictionaryLearning/l1_penalty
                  padre:implements: padre:DictionaryLearning/l1_penalty
                  padre:optional: 'False'
                  padre:path: transform_alpha
                  padre:value_default: None
                  padre:value_type: '{float, None}'
                  rdfs:comment: Penalty applied to the L1 norm.
                  rdfs:label: l1_penalty
                algorithm:
                  '@schema':
                    '@id': padre:DictionaryLearning/l1_penalty
                    '@type': padre:ModelParameters
                    padre:configures: padre:DictionaryLearning
              - '@schema':
                  '@id': padre:sklearn.decomposition.dict_learning.DictionaryLearning/code_init
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.dict_learning.DictionaryLearning/code_init
                  padre:implements: padre:DictionaryLearning/code_init
                  padre:optional: 'False'
                  padre:path: code_init
                  padre:value_default: None
                  padre:value_type: '{array of shape (n_samples, n_components), None}'
                  rdfs:comment: Initial value for the code, for warm restart.
                  rdfs:label: code_init
                algorithm:
                  '@schema':
                    '@id': padre:DictionaryLearning/code_init
                    '@type': padre:ModelParameters
                    padre:configures: padre:DictionaryLearning
              - '@schema':
                  '@id': padre:sklearn.decomposition.dict_learning.DictionaryLearning/dict_init
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.dict_learning.DictionaryLearning/dict_init
                  padre:implements: padre:DictionaryLearning/dict_init
                  padre:optional: 'False'
                  padre:path: dict_init
                  padre:value_default: None
                  padre:value_type: '{array of shape (n_components, n_features), None}'
                  rdfs:comment: Initial value for the dictionary, for warm restart.
                  rdfs:label: dict_init
                algorithm:
                  '@schema':
                    '@id': padre:DictionaryLearning/dict_init
                    '@type': padre:ModelParameters
                    padre:configures: padre:DictionaryLearning
              - '@schema':
                  '@id': padre:sklearn.decomposition.dict_learning.DictionaryLearning/verbose
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.dict_learning.DictionaryLearning/verbose
                  padre:implements: padre:DictionaryLearning/verbose
                  padre:optional: 'False'
                  padre:path: verbose
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: To control the verbosity of the procedure.
                  rdfs:label: verbose
                algorithm:
                  '@schema':
                    '@id': padre:DictionaryLearning/verbose
                    '@type': padre:ModelParameters
                    padre:configures: padre:DictionaryLearning
              - '@schema':
                  '@id': padre:sklearn.decomposition.dict_learning.DictionaryLearning/split_sign
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.dict_learning.DictionaryLearning/split_sign
                  padre:implements: padre:DictionaryLearning/split_sign
                  padre:optional: 'False'
                  padre:path: split_sign
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: Whether to split the sparse feature vector into
                    the concatenation of its negative part and its positive part. This
                    can improve the performance of downstream classifiers.
                  rdfs:label: split_sign
                algorithm:
                  '@schema':
                    '@id': padre:DictionaryLearning/split_sign
                    '@type': padre:ModelParameters
                    padre:configures: padre:DictionaryLearning
              - '@schema':
                  '@id': padre:sklearn.decomposition.dict_learning.DictionaryLearning/random_state
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.dict_learning.DictionaryLearning/random_state
                  padre:implements: padre:DictionaryLearning/random_state
                  padre:optional: 'True'
                  padre:path: random_state
                  padre:value_default: None
                  padre:value_type: '{integer, RandomState instance, None}'
                  rdfs:comment: The seed of the pseudo random number generator to
                    use when shuffling the data. If int, random_state is the seed used
                    by the random number generator; If RandomState instance, random_state
                    is the random number generator; If None, the random number generator
                    is the RandomState instance used by np.random.
                  rdfs:label: random_state
                algorithm:
                  '@schema':
                    '@id': padre:DictionaryLearning/random_state
                    '@type': padre:ModelParameters
                    padre:configures: padre:DictionaryLearning
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.decomposition.dict_learning.DictionaryLearning/max_iterations
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.decomposition.dict_learning.DictionaryLearning/max_iterations
                  padre:implements: padre:DictionaryLearning/max_iterations
                  padre:optional: 'True'
                  padre:path: max_iter
                  padre:value_default: '1000'
                  padre:value_type: integer
                  rdfs:comment: Maximum number of iterations.
                  rdfs:label: max_iterations
                algorithm:
                  '@schema':
                    '@id': padre:DictionaryLearning/max_iterations
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:DictionaryLearning
              - '@schema':
                  '@id': padre:sklearn.decomposition.dict_learning.DictionaryLearning/jobs
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.decomposition.dict_learning.DictionaryLearning/jobs
                  padre:implements: padre:DictionaryLearning/jobs
                  padre:optional: 'True'
                  padre:path: n_jobs
                  padre:value_default: '1'
                  padre:value_type: integer
                  rdfs:comment: The number of jobs to use for the computation. If
                    -1 all CPUs are used.
                  rdfs:label: jobs
                algorithm:
                  '@schema':
                    '@id': padre:DictionaryLearning/jobs
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:DictionaryLearning
    :decomposition.dict_learning.MiniBatchDictionaryLearning:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.decomposition.dict_learning.MiniBatchDictionaryLearning
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:MiniBatchDictionaryLearning
            rdfs:comment: null
            rdfs:label: mini batch dictionary learning
          algorithm:
            '@schema':
              '@id': padre:MiniBatchDictionaryLearning
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: mini batch dictionary learning
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.decomposition.dict_learning.MiniBatchDictionaryLearning/num_components
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.dict_learning.MiniBatchDictionaryLearning/num_components
                  padre:implements: padre:MiniBatchDictionaryLearning/num_components
                  padre:optional: 'False'
                  padre:path: n_components
                  padre:value_default: None
                  padre:value_type: '{integer, None}'
                  rdfs:comment: Number of dictionary elements to extract.
                  rdfs:label: num_components
                algorithm:
                  '@schema':
                    '@id': padre:MiniBatchDictionaryLearning/num_components
                    '@type': padre:ModelParameters
                    padre:configures: padre:MiniBatchDictionaryLearning
              - '@schema':
                  '@id': padre:sklearn.decomposition.dict_learning.MiniBatchDictionaryLearning/sparsity_control_param
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.dict_learning.MiniBatchDictionaryLearning/sparsity_control_param
                  padre:implements: padre:MiniBatchDictionaryLearning/sparsity_control_param
                  padre:optional: 'False'
                  padre:path: alpha
                  padre:value_default: '1.0'
                  padre:value_type: float
                  rdfs:comment: sparsity controlling parameter
                  rdfs:label: sparsity_control_param
                algorithm:
                  '@schema':
                    '@id': padre:MiniBatchDictionaryLearning/sparsity_control_param
                    '@type': padre:ModelParameters
                    padre:configures: padre:MiniBatchDictionaryLearning
              - '@schema':
                  '@id': padre:sklearn.decomposition.dict_learning.MiniBatchDictionaryLearning/fit_algorithm
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.dict_learning.MiniBatchDictionaryLearning/fit_algorithm
                  padre:implements: padre:MiniBatchDictionaryLearning/fit_algorithm
                  padre:optional: 'False'
                  padre:path: fit_algorithm
                  padre:value_default: ''
                  padre:value_type: '{''lars'', ''cd''}'
                  rdfs:comment: Method to solve the Lasso problem.
                  rdfs:label: fit_algorithm
                algorithm:
                  '@schema':
                    '@id': padre:MiniBatchDictionaryLearning/fit_algorithm
                    '@type': padre:ModelParameters
                    padre:configures: padre:MiniBatchDictionaryLearning
              - '@schema':
                  '@id': padre:sklearn.decomposition.dict_learning.MiniBatchDictionaryLearning/batch_size
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.dict_learning.MiniBatchDictionaryLearning/batch_size
                  padre:implements: padre:MiniBatchDictionaryLearning/batch_size
                  padre:optional: 'True'
                  padre:path: batch_size
                  padre:value_default: '3'
                  padre:value_type: integer
                  rdfs:comment: Size of minibatches for stochastic optimizers.
                  rdfs:label: batch_size
                algorithm:
                  '@schema':
                    '@id': padre:MiniBatchDictionaryLearning/batch_size
                    '@type': padre:ModelParameters
                    padre:configures: padre:MiniBatchDictionaryLearning
              - '@schema':
                  '@id': padre:sklearn.decomposition.dict_learning.MiniBatchDictionaryLearning/shuffle
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.dict_learning.MiniBatchDictionaryLearning/shuffle
                  padre:implements: padre:MiniBatchDictionaryLearning/shuffle
                  padre:optional: 'True'
                  padre:path: shuffle
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: Whether to shuffle the samples before forming batches.
                  rdfs:label: shuffle
                algorithm:
                  '@schema':
                    '@id': padre:MiniBatchDictionaryLearning/shuffle
                    '@type': padre:ModelParameters
                    padre:configures: padre:MiniBatchDictionaryLearning
              - '@schema':
                  '@id': padre:sklearn.decomposition.dict_learning.MiniBatchDictionaryLearning/dict_init
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.dict_learning.MiniBatchDictionaryLearning/dict_init
                  padre:implements: padre:MiniBatchDictionaryLearning/dict_init
                  padre:optional: 'False'
                  padre:path: dict_init
                  padre:value_default: None
                  padre:value_type: '{array of shape (n_components, n_features), None}'
                  rdfs:comment: Initial value for the dictionary, for warm restart.
                  rdfs:label: dict_init
                algorithm:
                  '@schema':
                    '@id': padre:MiniBatchDictionaryLearning/dict_init
                    '@type': padre:ModelParameters
                    padre:configures: padre:MiniBatchDictionaryLearning
              - '@schema':
                  '@id': padre:sklearn.decomposition.dict_learning.MiniBatchDictionaryLearning/transform_algorithm
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.dict_learning.MiniBatchDictionaryLearning/transform_algorithm
                  padre:implements: padre:MiniBatchDictionaryLearning/transform_algorithm
                  padre:optional: 'False'
                  padre:path: transform_algorithm
                  padre:value_default: '''omp'''
                  padre:value_type: '{''lasso_lars'', ''lasso_cd'', ''lars'', ''omp'',
                  ''threshold''}'
                  rdfs:comment: Algorithm used to transform the data.
                  rdfs:label: transform_algorithm
                algorithm:
                  '@schema':
                    '@id': padre:MiniBatchDictionaryLearning/transform_algorithm
                    '@type': padre:ModelParameters
                    padre:configures: padre:MiniBatchDictionaryLearning
              - '@schema':
                  '@id': padre:sklearn.decomposition.dict_learning.MiniBatchDictionaryLearning/transform_num_nonzero_coefs
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.dict_learning.MiniBatchDictionaryLearning/transform_num_nonzero_coefs
                  padre:implements: padre:MiniBatchDictionaryLearning/transform_num_nonzero_coefs
                  padre:optional: 'False'
                  padre:path: transform_n_nonzero_coefs
                  padre:value_default: None
                  padre:value_type: '{integer, None}'
                  rdfs:comment: Number of nonzero coefficients to target in each
                    column of the solution.
                  rdfs:label: transform_num_nonzero_coefs
                algorithm:
                  '@schema':
                    '@id': padre:MiniBatchDictionaryLearning/transform_num_nonzero_coefs
                    '@type': padre:ModelParameters
                    padre:configures: padre:MiniBatchDictionaryLearning
              - '@schema':
                  '@id': padre:sklearn.decomposition.dict_learning.MiniBatchDictionaryLearning/l1_penalty
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.dict_learning.MiniBatchDictionaryLearning/l1_penalty
                  padre:implements: padre:MiniBatchDictionaryLearning/l1_penalty
                  padre:optional: 'False'
                  padre:path: transform_alpha
                  padre:value_default: None
                  padre:value_type: '{float, None}'
                  rdfs:comment: Penalty applied to the L1 norm.
                  rdfs:label: l1_penalty
                algorithm:
                  '@schema':
                    '@id': padre:MiniBatchDictionaryLearning/l1_penalty
                    '@type': padre:ModelParameters
                    padre:configures: padre:MiniBatchDictionaryLearning
              - '@schema':
                  '@id': padre:sklearn.decomposition.dict_learning.MiniBatchDictionaryLearning/verbose
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.dict_learning.MiniBatchDictionaryLearning/verbose
                  padre:implements: padre:MiniBatchDictionaryLearning/verbose
                  padre:optional: 'False'
                  padre:path: verbose
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: To control the verbosity of the procedure.
                  rdfs:label: verbose
                algorithm:
                  '@schema':
                    '@id': padre:MiniBatchDictionaryLearning/verbose
                    '@type': padre:ModelParameters
                    padre:configures: padre:MiniBatchDictionaryLearning
              - '@schema':
                  '@id': padre:sklearn.decomposition.dict_learning.MiniBatchDictionaryLearning/split_sign
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.dict_learning.MiniBatchDictionaryLearning/split_sign
                  padre:implements: padre:MiniBatchDictionaryLearning/split_sign
                  padre:optional: 'False'
                  padre:path: split_sign
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: Whether to split the sparse feature vector into
                    the concatenation of its negative part and its positive part. This
                    can improve the performance of downstream classifiers.
                  rdfs:label: split_sign
                algorithm:
                  '@schema':
                    '@id': padre:MiniBatchDictionaryLearning/split_sign
                    '@type': padre:ModelParameters
                    padre:configures: padre:MiniBatchDictionaryLearning
              - '@schema':
                  '@id': padre:sklearn.decomposition.dict_learning.MiniBatchDictionaryLearning/random_state
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.dict_learning.MiniBatchDictionaryLearning/random_state
                  padre:implements: padre:MiniBatchDictionaryLearning/random_state
                  padre:optional: 'True'
                  padre:path: random_state
                  padre:value_default: None
                  padre:value_type: '{integer, RandomState instance, None}'
                  rdfs:comment: The seed of the pseudo random number generator to
                    use when shuffling the data. If int, random_state is the seed used
                    by the random number generator; If RandomState instance, random_state
                    is the random number generator; If None, the random number generator
                    is the RandomState instance used by np.random.
                  rdfs:label: random_state
                algorithm:
                  '@schema':
                    '@id': padre:MiniBatchDictionaryLearning/random_state
                    '@type': padre:ModelParameters
                    padre:configures: padre:MiniBatchDictionaryLearning
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.decomposition.dict_learning.MiniBatchDictionaryLearning/max_iterations
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.decomposition.dict_learning.MiniBatchDictionaryLearning/max_iterations
                  padre:implements: padre:MiniBatchDictionaryLearning/max_iterations
                  padre:optional: 'True'
                  padre:path: n_iter
                  padre:value_default: '1000'
                  padre:value_type: integer
                  rdfs:comment: Maximum number of iterations.
                  rdfs:label: max_iterations
                algorithm:
                  '@schema':
                    '@id': padre:MiniBatchDictionaryLearning/max_iterations
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:MiniBatchDictionaryLearning
              - '@schema':
                  '@id': padre:sklearn.decomposition.dict_learning.MiniBatchDictionaryLearning/jobs
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.decomposition.dict_learning.MiniBatchDictionaryLearning/jobs
                  padre:implements: padre:MiniBatchDictionaryLearning/jobs
                  padre:optional: 'True'
                  padre:path: n_jobs
                  padre:value_default: '1'
                  padre:value_type: integer
                  rdfs:comment: The number of jobs to use for the computation. If
                    -1 all CPUs are used.
                  rdfs:label: jobs
                algorithm:
                  '@schema':
                    '@id': padre:MiniBatchDictionaryLearning/jobs
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:MiniBatchDictionaryLearning
    :decomposition.factor_analysis.FactorAnalysis:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.decomposition.factor_analysis.FactorAnalysis
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:FactorAnalysis
            rdfs:comment: null
            rdfs:label: factor analysis
          algorithm:
            '@schema':
              '@id': padre:FactorAnalysis
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: factor analysis
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.decomposition.factor_analysis.FactorAnalysis/num_components
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.factor_analysis.FactorAnalysis/num_components
                  padre:implements: padre:FactorAnalysis/num_components
                  padre:optional: 'False'
                  padre:path: n_components
                  padre:value_default: None
                  padre:value_type: '{integer, None}'
                  rdfs:comment: Dimensionality of latent space, the number of components
                    of X that are obtained after transform.
                  rdfs:label: num_components
                algorithm:
                  '@schema':
                    '@id': padre:FactorAnalysis/num_components
                    '@type': padre:ModelParameters
                    padre:configures: padre:FactorAnalysis
              - '@schema':
                  '@id': padre:sklearn.decomposition.factor_analysis.FactorAnalysis/tolerance
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.factor_analysis.FactorAnalysis/tolerance
                  padre:implements: padre:FactorAnalysis/tolerance
                  padre:optional: 'True'
                  padre:path: tol
                  padre:value_default: '0.01'
                  padre:value_type: float
                  rdfs:comment: Stopping tolerance for EM algorithm.
                  rdfs:label: tolerance
                algorithm:
                  '@schema':
                    '@id': padre:FactorAnalysis/tolerance
                    '@type': padre:ModelParameters
                    padre:configures: padre:FactorAnalysis
              - '@schema':
                  '@id': padre:sklearn.decomposition.factor_analysis.FactorAnalysis/noise_variance_init
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.factor_analysis.FactorAnalysis/noise_variance_init
                  padre:implements: padre:FactorAnalysis/noise_variance_init
                  padre:optional: 'False'
                  padre:path: noise_variance_init
                  padre:value_default: None
                  padre:value_type: '{array of shape (n_features,), None}'
                  rdfs:comment: The initial guess of the noise variance for each
                    feature.
                  rdfs:label: noise_variance_init
                algorithm:
                  '@schema':
                    '@id': padre:FactorAnalysis/noise_variance_init
                    '@type': padre:ModelParameters
                    padre:configures: padre:FactorAnalysis
              - '@schema':
                  '@id': padre:sklearn.decomposition.factor_analysis.FactorAnalysis/svd_method
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.factor_analysis.FactorAnalysis/svd_method
                  padre:implements: padre:FactorAnalysis/svd_method
                  padre:optional: 'False'
                  padre:path: svd_method
                  padre:value_default: '''randomized'''
                  padre:value_type: '{''randomized'', ''lapack''}'
                  rdfs:comment: Selects the algorithm for finding singular vectors.
                  rdfs:label: svd_method
                algorithm:
                  '@schema':
                    '@id': padre:FactorAnalysis/svd_method
                    '@type': padre:ModelParameters
                    padre:configures: padre:FactorAnalysis
              - '@schema':
                  '@id': padre:sklearn.decomposition.factor_analysis.FactorAnalysis/iterated_power
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.factor_analysis.FactorAnalysis/iterated_power
                  padre:implements: padre:FactorAnalysis/iterated_power
                  padre:optional: 'True'
                  padre:path: iterated_power
                  padre:value_default: '3'
                  padre:value_type: integer
                  rdfs:comment: Number of iterations for the power method computed
                    by svd_solver == 'randomized'.
                  rdfs:label: iterated_power
                algorithm:
                  '@schema':
                    '@id': padre:FactorAnalysis/iterated_power
                    '@type': padre:ModelParameters
                    padre:configures: padre:FactorAnalysis
              - '@schema':
                  '@id': padre:sklearn.decomposition.factor_analysis.FactorAnalysis/random_state
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.factor_analysis.FactorAnalysis/random_state
                  padre:implements: padre:FactorAnalysis/random_state
                  padre:optional: 'True'
                  padre:path: random_state
                  padre:value_default: None
                  padre:value_type: '{integer, RandomState instance, None}'
                  rdfs:comment: The seed of the pseudo random number generator to
                    use when shuffling the data. If int, random_state is the seed used
                    by the random number generator; If RandomState instance, random_state
                    is the random number generator; If None, the random number generator
                    is the RandomState instance used by np.random.
                  rdfs:label: random_state
                algorithm:
                  '@schema':
                    '@id': padre:FactorAnalysis/random_state
                    '@type': padre:ModelParameters
                    padre:configures: padre:FactorAnalysis
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.decomposition.factor_analysis.FactorAnalysis/max_iterations
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.decomposition.factor_analysis.FactorAnalysis/max_iterations
                  padre:implements: padre:FactorAnalysis/max_iterations
                  padre:optional: 'True'
                  padre:path: max_iter
                  padre:value_default: '1000'
                  padre:value_type: integer
                  rdfs:comment: Maximum number of iterations.
                  rdfs:label: max_iterations
                algorithm:
                  '@schema':
                    '@id': padre:FactorAnalysis/max_iterations
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:FactorAnalysis
    :decomposition.fastica_.FastICA:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.decomposition.fastica_.FastICA
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:FastICA
            rdfs:comment: null
            rdfs:label: fast independent component analysis
          algorithm:
            '@schema':
              '@id': padre:FastICA
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: fast independent component analysis
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.decomposition.fastica_.FastICA/num_components
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.fastica_.FastICA/num_components
                  padre:implements: padre:FastICA/num_components
                  padre:optional: 'True'
                  padre:path: n_components
                  padre:value_default: None
                  padre:value_type: '{integer, None}'
                  rdfs:comment: Number of components to use. If none is passed,
                    all are used.
                  rdfs:label: num_components
                algorithm:
                  '@schema':
                    '@id': padre:FastICA/num_components
                    '@type': padre:ModelParameters
                    padre:configures: padre:FastICA
              - '@schema':
                  '@id': padre:sklearn.decomposition.fastica_.FastICA/algorithm
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.fastica_.FastICA/algorithm
                  padre:implements: padre:FastICA/algorithm
                  padre:optional: 'False'
                  padre:path: algorithm
                  padre:value_default: '''parallel'''
                  padre:value_type: '{''parallel'', ''deflation''}'
                  rdfs:comment: Apply parallel or deflational algorithm for FastICA.
                  rdfs:label: algorithm
                algorithm:
                  '@schema':
                    '@id': padre:FastICA/algorithm
                    '@type': padre:ModelParameters
                    padre:configures: padre:FastICA
              - '@schema':
                  '@id': padre:sklearn.decomposition.fastica_.FastICA/whiten
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.fastica_.FastICA/whiten
                  padre:implements: padre:FastICA/whiten
                  padre:optional: 'True'
                  padre:path: whiten
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: If whiten is false, the data is already considered
                    to be whitened, and no whitening is performed.
                  rdfs:label: whiten
                algorithm:
                  '@schema':
                    '@id': padre:FastICA/whiten
                    '@type': padre:ModelParameters
                    padre:configures: padre:FastICA
              - '@schema':
                  '@id': padre:sklearn.decomposition.fastica_.FastICA/functional_function_form
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.fastica_.FastICA/functional_function_form
                  padre:implements: padre:FastICA/functional_function_form
                  padre:optional: 'True'
                  padre:path: fun
                  padre:value_default: '''logcosh'''
                  padre:value_type: '{''logcosh'', ''exp'', ''cube'', function that
                  contains a tuple containing the value of the function, and of its
                  derivative}'
                  rdfs:comment: The functional form of the G function used in the
                    approximation to neg-entropy.
                  rdfs:label: functional_function_form
                algorithm:
                  '@schema':
                    '@id': padre:FastICA/functional_function_form
                    '@type': padre:ModelParameters
                    padre:configures: padre:FastICA
              - '@schema':
                  '@id': padre:sklearn.decomposition.fastica_.FastICA/function_arguments
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.fastica_.FastICA/function_arguments
                  padre:implements: padre:FastICA/function_arguments
                  padre:optional: 'True'
                  padre:path: fun_args
                  padre:value_default: None
                  padre:value_type: '{dictionary, None}'
                  rdfs:comment: Arguments to send to the functional form.
                  rdfs:label: function_arguments
                algorithm:
                  '@schema':
                    '@id': padre:FastICA/function_arguments
                    '@type': padre:ModelParameters
                    padre:configures: padre:FastICA
              - '@schema':
                  '@id': padre:sklearn.decomposition.fastica_.FastICA/tolerance
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.fastica_.FastICA/tolerance
                  padre:implements: padre:FastICA/tolerance
                  padre:optional: 'True'
                  padre:path: tol
                  padre:value_default: '0.0001'
                  padre:value_type: float
                  rdfs:comment: Tolerance on update at each iteration.
                  rdfs:label: tolerance
                algorithm:
                  '@schema':
                    '@id': padre:FastICA/tolerance
                    '@type': padre:ModelParameters
                    padre:configures: padre:FastICA
              - '@schema':
                  '@id': padre:sklearn.decomposition.fastica_.FastICA/w_init
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.fastica_.FastICA/w_init
                  padre:implements: padre:FastICA/w_init
                  padre:optional: 'False'
                  padre:path: w_init
                  padre:value_default: None
                  padre:value_type: '{array of shape (n_components, n_components), None}'
                  rdfs:comment: The mixing matrix to be used to initialize the algorithm.
                  rdfs:label: w_init
                algorithm:
                  '@schema':
                    '@id': padre:FastICA/w_init
                    '@type': padre:ModelParameters
                    padre:configures: padre:FastICA
              - '@schema':
                  '@id': padre:sklearn.decomposition.fastica_.FastICA/random_state
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.fastica_.FastICA/random_state
                  padre:implements: padre:FastICA/random_state
                  padre:optional: 'True'
                  padre:path: random_state
                  padre:value_default: None
                  padre:value_type: '{integer, RandomState instance, None}'
                  rdfs:comment: The seed of the pseudo random number generator to
                    use when shuffling the data. If int, random_state is the seed used
                    by the random number generator; If RandomState instance, random_state
                    is the random number generator; If None, the random number generator
                    is the RandomState instance used by np.random.
                  rdfs:label: random_state
                algorithm:
                  '@schema':
                    '@id': padre:FastICA/random_state
                    '@type': padre:ModelParameters
                    padre:configures: padre:FastICA
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.decomposition.fastica_.FastICA/max_iterations
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.decomposition.fastica_.FastICA/max_iterations
                  padre:implements: padre:FastICA/max_iterations
                  padre:optional: 'True'
                  padre:path: max_iter
                  padre:value_default: '200'
                  padre:value_type: integer
                  rdfs:comment: Maximum number of iterations during fit.
                  rdfs:label: max_iterations
                algorithm:
                  '@schema':
                    '@id': padre:FastICA/max_iterations
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:FastICA
    :decomposition.incremental_pca.IncrementalPCA:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.decomposition.incremental_pca.IncrementalPCA
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:IncrementalPCA
            rdfs:comment: null
            rdfs:label: incremental principal component analysis
          algorithm:
            '@schema':
              '@id': padre:IncrementalPCA
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: incremental principal component analysis
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.decomposition.incremental_pca.IncrementalPCA/num_components
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.incremental_pca.IncrementalPCA/num_components
                  padre:implements: padre:IncrementalPCA/num_components
                  padre:optional: 'False'
                  padre:path: n_components
                  padre:value_default: None
                  padre:value_type: '{integer, None}'
                  rdfs:comment: Number of components to keep.
                  rdfs:label: num_components
                algorithm:
                  '@schema':
                    '@id': padre:IncrementalPCA/num_components
                    '@type': padre:ModelParameters
                    padre:configures: padre:IncrementalPCA
              - '@schema':
                  '@id': padre:sklearn.decomposition.incremental_pca.IncrementalPCA/whiten
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.incremental_pca.IncrementalPCA/whiten
                  padre:implements: padre:IncrementalPCA/whiten
                  padre:optional: 'True'
                  padre:path: whiten
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: When True (False by default) the components_ vectors
                    are multiplied by the square root of n_samples and then divided
                    by the singular values to ensure uncorrelated outputs with unit
                    component-wise variances. Whitening will remove some information
                    from the transformed signal (the relative variance scales of the
                    components) but can sometime improve the predictive accuracy of
                    the downstream estimators by making their data respect some hard-wired
                    assumptions.
                  rdfs:label: whiten
                algorithm:
                  '@schema':
                    '@id': padre:IncrementalPCA/whiten
                    '@type': padre:ModelParameters
                    padre:configures: padre:IncrementalPCA
              - '@schema':
                  '@id': padre:sklearn.decomposition.incremental_pca.IncrementalPCA/copy
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.incremental_pca.IncrementalPCA/copy
                  padre:implements: padre:IncrementalPCA/copy
                  padre:optional: 'False'
                  padre:path: copy
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: If False, data passed to fit are overwritten and
                    running fit(X).transform(X) will not yield the expected results,
                    use fit_transform(X) instead.
                  rdfs:label: copy
                algorithm:
                  '@schema':
                    '@id': padre:IncrementalPCA/copy
                    '@type': padre:ModelParameters
                    padre:configures: padre:IncrementalPCA
              - '@schema':
                  '@id': padre:sklearn.decomposition.incremental_pca.IncrementalPCA/batch_size
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.incremental_pca.IncrementalPCA/batch_size
                  padre:implements: padre:IncrementalPCA/batch_size
                  padre:optional: 'False'
                  padre:path: batch_size
                  padre:value_default: None
                  padre:value_type: '{integer, None}'
                  rdfs:comment: The number of samples to use for each batch.
                  rdfs:label: batch_size
                algorithm:
                  '@schema':
                    '@id': padre:IncrementalPCA/batch_size
                    '@type': padre:ModelParameters
                    padre:configures: padre:IncrementalPCA
            optimisation_parameters: []
    :decomposition.kernel_pca.KernelPCA:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.decomposition.kernel_pca.KernelPCA
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:KernelPCA
            rdfs:comment: null
            rdfs:label: kernel principal component analysis
          algorithm:
            '@schema':
              '@id': padre:KernelPCA
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: kernel principal component analysis
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.decomposition.kernel_pca.KernelPCA/num_components
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.kernel_pca.KernelPCA/num_components
                  padre:implements: padre:KernelPCA/num_components
                  padre:optional: 'False'
                  padre:path: n_components
                  padre:value_default: None
                  padre:value_type: '{integer, None}'
                  rdfs:comment: Number of components to keep.
                  rdfs:label: num_components
                algorithm:
                  '@schema':
                    '@id': padre:KernelPCA/num_components
                    '@type': padre:ModelParameters
                    padre:configures: padre:KernelPCA
              - '@schema':
                  '@id': padre:sklearn.decomposition.kernel_pca.KernelPCA/kernel
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.kernel_pca.KernelPCA/kernel
                  padre:implements: padre:KernelPCA/kernel
                  padre:optional: 'False'
                  padre:path: kernel
                  padre:value_default: '''linear'''
                  padre:value_type: '{''linear'', ''poly'', ''rbf'', ''sigmoid'', ''cosine'',
                  ''precomputed''}'
                  rdfs:comment: Kernel mapping used internally.
                  rdfs:label: kernel
                algorithm:
                  '@schema':
                    '@id': padre:KernelPCA/kernel
                    '@type': padre:ModelParameters
                    padre:configures: padre:KernelPCA
              - '@schema':
                  '@id': padre:sklearn.decomposition.kernel_pca.KernelPCA/gamma
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.kernel_pca.KernelPCA/gamma
                  padre:implements: padre:KernelPCA/gamma
                  padre:optional: 'False'
                  padre:path: gamma
                  padre:value_default: None
                  padre:value_type: float
                  rdfs:comment: Gamma parameter for the RBF, polynomial and sigmoid
                    kernels. Interpretation depends on kernels.
                  rdfs:label: gamma
                algorithm:
                  '@schema':
                    '@id': padre:KernelPCA/gamma
                    '@type': padre:ModelParameters
                    padre:configures: padre:KernelPCA
              - '@schema':
                  '@id': padre:sklearn.decomposition.kernel_pca.KernelPCA/kernel_degree
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.kernel_pca.KernelPCA/kernel_degree
                  padre:implements: padre:KernelPCA/kernel_degree
                  padre:optional: 'False'
                  padre:path: degree
                  padre:value_default: '3'
                  padre:value_type: integer
                  rdfs:comment: Degree of the polynomial kernel.
                  rdfs:label: kernel_degree
                algorithm:
                  '@schema':
                    '@id': padre:KernelPCA/kernel_degree
                    '@type': padre:ModelParameters
                    padre:configures: padre:KernelPCA
              - '@schema':
                  '@id': padre:sklearn.decomposition.kernel_pca.KernelPCA/zero_coefficient
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.kernel_pca.KernelPCA/zero_coefficient
                  padre:implements: padre:KernelPCA/zero_coefficient
                  padre:optional: 'False'
                  padre:path: coef0
                  padre:value_default: '1.0'
                  padre:value_type: float
                  rdfs:comment: Zero coefficient for polynomial and sigmoid kernels.
                  rdfs:label: zero_coefficient
                algorithm:
                  '@schema':
                    '@id': padre:KernelPCA/zero_coefficient
                    '@type': padre:ModelParameters
                    padre:configures: padre:KernelPCA
              - '@schema':
                  '@id': padre:sklearn.decomposition.kernel_pca.KernelPCA/kernel_parameters
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.kernel_pca.KernelPCA/kernel_parameters
                  padre:implements: padre:KernelPCA/kernel_parameters
                  padre:optional: 'False'
                  padre:path: kernel_params
                  padre:value_default: None
                  padre:value_type: mapping of string to any
                  rdfs:comment: Additional parameters (keyword arguments) for kernel
                    function passed as callable object.
                  rdfs:label: kernel_parameters
                algorithm:
                  '@schema':
                    '@id': padre:KernelPCA/kernel_parameters
                    '@type': padre:ModelParameters
                    padre:configures: padre:KernelPCA
              - '@schema':
                  '@id': padre:sklearn.decomposition.kernel_pca.KernelPCA/ridge_alpha
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.kernel_pca.KernelPCA/ridge_alpha
                  padre:implements: padre:KernelPCA/ridge_alpha
                  padre:optional: 'False'
                  padre:path: alpha
                  padre:value_default: '1'
                  padre:value_type: integer
                  rdfs:comment: Hyperparameter of the ridge regression that learns
                    the inverse transform.
                  rdfs:label: ridge_alpha
                algorithm:
                  '@schema':
                    '@id': padre:KernelPCA/ridge_alpha
                    '@type': padre:ModelParameters
                    padre:configures: padre:KernelPCA
              - '@schema':
                  '@id': padre:sklearn.decomposition.kernel_pca.KernelPCA/fit_inverse_transform
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.kernel_pca.KernelPCA/fit_inverse_transform
                  padre:implements: padre:KernelPCA/fit_inverse_transform
                  padre:optional: 'False'
                  padre:path: fit_inverse_transform
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: Learn the inverse transform for non-precomputed
                    kernels. (i.e. learn to find the pre-image of a point)
                  rdfs:label: fit_inverse_transform
                algorithm:
                  '@schema':
                    '@id': padre:KernelPCA/fit_inverse_transform
                    '@type': padre:ModelParameters
                    padre:configures: padre:KernelPCA
              - '@schema':
                  '@id': padre:sklearn.decomposition.kernel_pca.KernelPCA/eigen_solver
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.kernel_pca.KernelPCA/eigen_solver
                  padre:implements: padre:KernelPCA/eigen_solver
                  padre:optional: 'False'
                  padre:path: eigen_solver
                  padre:value_default: '''auto'''
                  padre:value_type: '{''auto'', ''arpack'', ''dense'']'
                  rdfs:comment: Solver for the eigenvalue decomposition.  If num_components
                    is much less than the number of training samples, arpack may be
                    more efficient than the dense eigensolver.
                  rdfs:label: eigen_solver
                algorithm:
                  '@schema':
                    '@id': padre:KernelPCA/eigen_solver
                    '@type': padre:ModelParameters
                    padre:configures: padre:KernelPCA
              - '@schema':
                  '@id': padre:sklearn.decomposition.kernel_pca.KernelPCA/tolerance
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.kernel_pca.KernelPCA/tolerance
                  padre:implements: padre:KernelPCA/tolerance
                  padre:optional: 'False'
                  padre:path: tol
                  padre:value_default: '0.0'
                  padre:value_type: float
                  rdfs:comment: Convergence tolerance for arpack. If 0, optimal
                    value will be chosen by arpack.
                  rdfs:label: tolerance
                algorithm:
                  '@schema':
                    '@id': padre:KernelPCA/tolerance
                    '@type': padre:ModelParameters
                    padre:configures: padre:KernelPCA
              - '@schema':
                  '@id': padre:sklearn.decomposition.kernel_pca.KernelPCA/remove_zero_eigenvalue
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.kernel_pca.KernelPCA/remove_zero_eigenvalue
                  padre:implements: padre:KernelPCA/remove_zero_eigenvalue
                  padre:optional: 'False'
                  padre:path: remove_zero_eig
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: If True, then all components with zero eigenvalues
                    are removed.
                  rdfs:label: remove_zero_eigenvalue
                algorithm:
                  '@schema':
                    '@id': padre:KernelPCA/remove_zero_eigenvalue
                    '@type': padre:ModelParameters
                    padre:configures: padre:KernelPCA
              - '@schema':
                  '@id': padre:sklearn.decomposition.kernel_pca.KernelPCA/random_state
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.kernel_pca.KernelPCA/random_state
                  padre:implements: padre:KernelPCA/random_state
                  padre:optional: 'True'
                  padre:path: random_state
                  padre:value_default: None
                  padre:value_type: '{integer, RandomState instance, None}'
                  rdfs:comment: The seed of the pseudo random number generator to
                    use when shuffling the data. If int, random_state is the seed used
                    by the random number generator; If RandomState instance, random_state
                    is the random number generator; If None, the random number generator
                    is the RandomState instance used by np.random.
                  rdfs:label: random_state
                algorithm:
                  '@schema':
                    '@id': padre:KernelPCA/random_state
                    '@type': padre:ModelParameters
                    padre:configures: padre:KernelPCA
              - '@schema':
                  '@id': padre:sklearn.decomposition.kernel_pca.KernelPCA/copy_X
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.kernel_pca.KernelPCA/copy_X
                  padre:implements: padre:KernelPCA/copy_X
                  padre:optional: 'True'
                  padre:path: copy_X
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: If True, input X is copied and stored by the model
                    in the X_fit_ attribute. If no further changes will be done to X,
                    setting copy_X=False saves memory by storing a reference.
                  rdfs:label: copy_X
                algorithm:
                  '@schema':
                    '@id': padre:KernelPCA/copy_X
                    '@type': padre:ModelParameters
                    padre:configures: padre:KernelPCA
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.decomposition.kernel_pca.KernelPCA/max_iterations
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.decomposition.kernel_pca.KernelPCA/max_iterations
                  padre:implements: padre:KernelPCA/max_iterations
                  padre:optional: 'True'
                  padre:path: max_iter
                  padre:value_default: None
                  padre:value_type: integer
                  rdfs:comment: Maximum number of iterations for arpack. If None,
                    optimal value will be chosen by arpack.
                  rdfs:label: max_iterations
                algorithm:
                  '@schema':
                    '@id': padre:KernelPCA/max_iterations
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:KernelPCA
              - '@schema':
                  '@id': padre:sklearn.decomposition.kernel_pca.KernelPCA/jobs
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.decomposition.kernel_pca.KernelPCA/jobs
                  padre:implements: padre:KernelPCA/jobs
                  padre:optional: 'True'
                  padre:path: n_jobs
                  padre:value_default: '1'
                  padre:value_type: integer
                  rdfs:comment: The number of jobs to use for the computation. If
                    -1 all CPUs are used.
                  rdfs:label: jobs
                algorithm:
                  '@schema':
                    '@id': padre:KernelPCA/jobs
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:KernelPCA
    :decomposition.nmf.NMF:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.decomposition.nmf.NMF
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:NMF
            rdfs:comment: null
            rdfs:label: non-negative matrix factorization
          algorithm:
            '@schema':
              '@id': padre:NMF
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: non-negative matrix factorization
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.decomposition.nmf.NMF/num_components
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.nmf.NMF/num_components
                  padre:implements: padre:NMF/num_components
                  padre:optional: 'True'
                  padre:path: n_components
                  padre:value_default: None
                  padre:value_type: '{integer, None}'
                  rdfs:comment: Number of components to use. If none is passed,
                    all are used.
                  rdfs:label: num_components
                algorithm:
                  '@schema':
                    '@id': padre:NMF/num_components
                    '@type': padre:ModelParameters
                    padre:configures: padre:NMF
              - '@schema':
                  '@id': padre:sklearn.decomposition.nmf.NMF/initialization_method
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.nmf.NMF/initialization_method
                  padre:implements: padre:NMF/initialization_method
                  padre:optional: 'False'
                  padre:path: init
                  padre:value_default: None
                  padre:value_type: '{''random'', ''nndsvd'', ''nndsvda'', ''nndsvdar'',
                  ''custom'', None}'
                  rdfs:comment: Method used to initialize the procedure.
                  rdfs:label: initialization_method
                algorithm:
                  '@schema':
                    '@id': padre:NMF/initialization_method
                    '@type': padre:ModelParameters
                    padre:configures: padre:NMF
              - '@schema':
                  '@id': padre:sklearn.decomposition.nmf.NMF/solver
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.nmf.NMF/solver
                  padre:implements: padre:NMF/solver
                  padre:optional: 'False'
                  padre:path: solver
                  padre:value_default: '''cd'''
                  padre:value_type: '{''cd'', ''mu''}'
                  rdfs:comment: Numerical solver to use.
                  rdfs:label: solver
                algorithm:
                  '@schema':
                    '@id': padre:NMF/solver
                    '@type': padre:ModelParameters
                    padre:configures: padre:NMF
              - '@schema':
                  '@id': padre:sklearn.decomposition.nmf.NMF/tolerance
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.nmf.NMF/tolerance
                  padre:implements: padre:NMF/tolerance
                  padre:optional: 'False'
                  padre:path: tol
                  padre:value_default: '0.0001'
                  padre:value_type: float
                  rdfs:comment: Tolerance of the stopping condition.
                  rdfs:label: tolerance
                algorithm:
                  '@schema':
                    '@id': padre:NMF/tolerance
                    '@type': padre:ModelParameters
                    padre:configures: padre:NMF
              - '@schema':
                  '@id': padre:sklearn.decomposition.nmf.NMF/random_state
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.nmf.NMF/random_state
                  padre:implements: padre:NMF/random_state
                  padre:optional: 'True'
                  padre:path: random_state
                  padre:value_default: None
                  padre:value_type: '{integer, RandomState instance, None}'
                  rdfs:comment: The seed of the pseudo random number generator to
                    use when shuffling the data. If int, random_state is the seed used
                    by the random number generator; If RandomState instance, random_state
                    is the random number generator; If None, the random number generator
                    is the RandomState instance used by np.random.
                  rdfs:label: random_state
                algorithm:
                  '@schema':
                    '@id': padre:NMF/random_state
                    '@type': padre:ModelParameters
                    padre:configures: padre:NMF
              - '@schema':
                  '@id': padre:sklearn.decomposition.nmf.NMF/regularization_multiplier
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.nmf.NMF/regularization_multiplier
                  padre:implements: padre:NMF/regularization_multiplier
                  padre:optional: 'False'
                  padre:path: alpha
                  padre:value_default: '0.0'
                  padre:value_type: double
                  rdfs:comment: Constant that multiplies the regularization terms.
                    Set it to zero to have no regularization.
                  rdfs:label: regularization_multiplier
                algorithm:
                  '@schema':
                    '@id': padre:NMF/regularization_multiplier
                    '@type': padre:ModelParameters
                    padre:configures: padre:NMF
              - '@schema':
                  '@id': padre:sklearn.decomposition.nmf.NMF/l1_ratio
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.nmf.NMF/l1_ratio
                  padre:implements: padre:NMF/l1_ratio
                  padre:optional: 'False'
                  padre:path: l1_ratio
                  padre:value_default: '0.0'
                  padre:value_type: double
                  rdfs:comment: The ElasticNet mixing parameter, with 0 <= l1_ratio
                    <= 1. For l1_ratio = 0 the penalty is an elementwise L2 penalty
                    (aka Frobenius Norm). For l1_ratio = 1 it is an elementwise L1 penalty.
                    For 0 < l1_ratio < 1, the penalty is a combination of L1 and L2.
                  rdfs:label: l1_ratio
                algorithm:
                  '@schema':
                    '@id': padre:NMF/l1_ratio
                    '@type': padre:ModelParameters
                    padre:configures: padre:NMF
              - '@schema':
                  '@id': padre:sklearn.decomposition.nmf.NMF/verbose
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.nmf.NMF/verbose
                  padre:implements: padre:NMF/verbose
                  padre:optional: 'False'
                  padre:path: verbose
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: Whether to be verbose.
                  rdfs:label: verbose
                algorithm:
                  '@schema':
                    '@id': padre:NMF/verbose
                    '@type': padre:ModelParameters
                    padre:configures: padre:NMF
              - '@schema':
                  '@id': padre:sklearn.decomposition.nmf.NMF/shuffle
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.nmf.NMF/shuffle
                  padre:implements: padre:NMF/shuffle
                  padre:optional: 'False'
                  padre:path: shuffle
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: If true, randomize the order of coordinates in the
                    CD solver.
                  rdfs:label: shuffle
                algorithm:
                  '@schema':
                    '@id': padre:NMF/shuffle
                    '@type': padre:ModelParameters
                    padre:configures: padre:NMF
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.decomposition.nmf.NMF/max_iterations
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.decomposition.nmf.NMF/max_iterations
                  padre:implements: padre:NMF/max_iterations
                  padre:optional: 'True'
                  padre:path: max_iter
                  padre:value_default: '200'
                  padre:value_type: integer
                  rdfs:comment: Maximum number of iterations during fit.
                  rdfs:label: max_iterations
                algorithm:
                  '@schema':
                    '@id': padre:NMF/max_iterations
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:NMF
    :decomposition.online_lda.LatentDirichletAllocation:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.decomposition.online_lda.LatentDirichletAllocation
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:LatentDirichletAllocation
            rdfs:comment: null
            rdfs:label: latent Dirichlet allocation
          algorithm:
            '@schema':
              '@id': padre:LatentDirichletAllocation
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: latent Dirichlet allocation
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.decomposition.online_lda.LatentDirichletAllocation/num_components
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.online_lda.LatentDirichletAllocation/num_components
                  padre:implements: padre:LatentDirichletAllocation/num_components
                  padre:optional: 'True'
                  padre:path: n_components
                  padre:value_default: '10'
                  padre:value_type: integer
                  rdfs:comment: Number of topics.
                  rdfs:label: num_components
                algorithm:
                  '@schema':
                    '@id': padre:LatentDirichletAllocation/num_components
                    '@type': padre:ModelParameters
                    padre:configures: padre:LatentDirichletAllocation
              - '@schema':
                  '@id': padre:sklearn.decomposition.online_lda.LatentDirichletAllocation/doc_topic_prior
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.online_lda.LatentDirichletAllocation/doc_topic_prior
                  padre:implements: padre:LatentDirichletAllocation/doc_topic_prior
                  padre:optional: 'True'
                  padre:path: doc_topic_prior
                  padre:value_default: None
                  padre:value_type: '{float, None}'
                  rdfs:comment: Prior of document topic distribution theta. If the
                    value is None, defaults to 1 / n_components. In the literature,
                    this is called alpha.
                  rdfs:label: doc_topic_prior
                algorithm:
                  '@schema':
                    '@id': padre:LatentDirichletAllocation/doc_topic_prior
                    '@type': padre:ModelParameters
                    padre:configures: padre:LatentDirichletAllocation
              - '@schema':
                  '@id': padre:sklearn.decomposition.online_lda.LatentDirichletAllocation/topic_word_prior
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.online_lda.LatentDirichletAllocation/topic_word_prior
                  padre:implements: padre:LatentDirichletAllocation/topic_word_prior
                  padre:optional: 'True'
                  padre:path: topic_word_prior
                  padre:value_default: None
                  padre:value_type: '{float, None}'
                  rdfs:comment: Prior of topic word distribution beta. If the value
                    is None, defaults to 1 / n_components. In the literature, this is
                    called eta.
                  rdfs:label: topic_word_prior
                algorithm:
                  '@schema':
                    '@id': padre:LatentDirichletAllocation/topic_word_prior
                    '@type': padre:ModelParameters
                    padre:configures: padre:LatentDirichletAllocation
              - '@schema':
                  '@id': padre:sklearn.decomposition.online_lda.LatentDirichletAllocation/learning_method
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.online_lda.LatentDirichletAllocation/learning_method
                  padre:implements: padre:LatentDirichletAllocation/learning_method
                  padre:optional: 'False'
                  padre:path: learning_method
                  padre:value_default: '''online'''
                  padre:value_type: '{''batch'', ''online''}'
                  rdfs:comment: Method used to update _component. Only used in fit
                    method. In general, if the data size is large, the online update
                    will be much faster than the batch update.
                  rdfs:label: learning_method
                algorithm:
                  '@schema':
                    '@id': padre:LatentDirichletAllocation/learning_method
                    '@type': padre:ModelParameters
                    padre:configures: padre:LatentDirichletAllocation
              - '@schema':
                  '@id': padre:sklearn.decomposition.online_lda.LatentDirichletAllocation/learning_decay
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.online_lda.LatentDirichletAllocation/learning_decay
                  padre:implements: padre:LatentDirichletAllocation/learning_decay
                  padre:optional: 'True'
                  padre:path: learning_decay
                  padre:value_default: '0.7'
                  padre:value_type: float between (0.5, 1.0]
                  rdfs:comment: It is a parameter that control learning rate in
                    the online learning method. The value should be set between (0.5,
                    1.0] to guarantee asymptotic convergence. When the value is 0.0
                    and batch_size is n_samples, the update method is same as batch
                    learning. In the literature, this is called kappa.
                  rdfs:label: learning_decay
                algorithm:
                  '@schema':
                    '@id': padre:LatentDirichletAllocation/learning_decay
                    '@type': padre:ModelParameters
                    padre:configures: padre:LatentDirichletAllocation
              - '@schema':
                  '@id': padre:sklearn.decomposition.online_lda.LatentDirichletAllocation/learning_offset
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.online_lda.LatentDirichletAllocation/learning_offset
                  padre:implements: padre:LatentDirichletAllocation/learning_offset
                  padre:optional: 'True'
                  padre:path: learning_offset
                  padre:value_default: '10.'
                  padre:value_type: float > 0
                  rdfs:comment: A (positive) parameter that downweights early iterations
                    in online learning. It should be greater than 1.0. In the literature,
                    this is called tau_0.
                  rdfs:label: learning_offset
                algorithm:
                  '@schema':
                    '@id': padre:LatentDirichletAllocation/learning_offset
                    '@type': padre:ModelParameters
                    padre:configures: padre:LatentDirichletAllocation
              - '@schema':
                  '@id': padre:sklearn.decomposition.online_lda.LatentDirichletAllocation/batch_size
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.online_lda.LatentDirichletAllocation/batch_size
                  padre:implements: padre:LatentDirichletAllocation/batch_size
                  padre:optional: 'True'
                  padre:path: batch_size
                  padre:value_default: '128'
                  padre:value_type: integer
                  rdfs:comment: Number of documents to use in each EM iteration.
                    Only used in online learning.
                  rdfs:label: batch_size
                algorithm:
                  '@schema':
                    '@id': padre:LatentDirichletAllocation/batch_size
                    '@type': padre:ModelParameters
                    padre:configures: padre:LatentDirichletAllocation
              - '@schema':
                  '@id': padre:sklearn.decomposition.online_lda.LatentDirichletAllocation/evaluate_every
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.online_lda.LatentDirichletAllocation/evaluate_every
                  padre:implements: padre:LatentDirichletAllocation/evaluate_every
                  padre:optional: 'True'
                  padre:path: evaluate_every
                  padre:value_default: '0'
                  padre:value_type: integer
                  rdfs:comment: How often to evaluate perplexity. Only used in fit
                    method. set it to 0 or negative number to not evalute perplexity
                    in training at all. Evaluating perplexity can help you check convergence
                    in training process, but it will also increase total training time.
                    Evaluating perplexity in every iteration might increase training
                    time up to two-fold.
                  rdfs:label: evaluate_every
                algorithm:
                  '@schema':
                    '@id': padre:LatentDirichletAllocation/evaluate_every
                    '@type': padre:ModelParameters
                    padre:configures: padre:LatentDirichletAllocation
              - '@schema':
                  '@id': padre:sklearn.decomposition.online_lda.LatentDirichletAllocation/total_samples
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.online_lda.LatentDirichletAllocation/total_samples
                  padre:implements: padre:LatentDirichletAllocation/total_samples
                  padre:optional: 'True'
                  padre:path: total_samples
                  padre:value_default: '1000000'
                  padre:value_type: integer
                  rdfs:comment: Total number of documents. Only used in the partial_fit
                    method.
                  rdfs:label: total_samples
                algorithm:
                  '@schema':
                    '@id': padre:LatentDirichletAllocation/total_samples
                    '@type': padre:ModelParameters
                    padre:configures: padre:LatentDirichletAllocation
              - '@schema':
                  '@id': padre:sklearn.decomposition.online_lda.LatentDirichletAllocation/perplexity_tolerance
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.online_lda.LatentDirichletAllocation/perplexity_tolerance
                  padre:implements: padre:LatentDirichletAllocation/perplexity_tolerance
                  padre:optional: 'True'
                  padre:path: perp_tol
                  padre:value_default: '0.1'
                  padre:value_type: float
                  rdfs:comment: Perplexity tolerance in batch learning.
                  rdfs:label: perplexity_tolerance
                algorithm:
                  '@schema':
                    '@id': padre:LatentDirichletAllocation/perplexity_tolerance
                    '@type': padre:ModelParameters
                    padre:configures: padre:LatentDirichletAllocation
              - '@schema':
                  '@id': padre:sklearn.decomposition.online_lda.LatentDirichletAllocation/mean_change_tolerance
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.online_lda.LatentDirichletAllocation/mean_change_tolerance
                  padre:implements: padre:LatentDirichletAllocation/mean_change_tolerance
                  padre:optional: 'True'
                  padre:path: mean_change_tol
                  padre:value_default: '0.001'
                  padre:value_type: float
                  rdfs:comment: Stopping tolerance for updating document topic distribution
                    in E-step.
                  rdfs:label: mean_change_tolerance
                algorithm:
                  '@schema':
                    '@id': padre:LatentDirichletAllocation/mean_change_tolerance
                    '@type': padre:ModelParameters
                    padre:configures: padre:LatentDirichletAllocation
              - '@schema':
                  '@id': padre:sklearn.decomposition.online_lda.LatentDirichletAllocation/max_doc_update_iteration
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.online_lda.LatentDirichletAllocation/max_doc_update_iteration
                  padre:implements: padre:LatentDirichletAllocation/max_doc_update_iteration
                  padre:optional: 'False'
                  padre:path: max_doc_update_iter
                  padre:value_default: '100'
                  padre:value_type: integer
                  rdfs:comment: Max number of iterations for updating document topic
                    distribution in the E-step.
                  rdfs:label: max_doc_update_iteration
                algorithm:
                  '@schema':
                    '@id': padre:LatentDirichletAllocation/max_doc_update_iteration
                    '@type': padre:ModelParameters
                    padre:configures: padre:LatentDirichletAllocation
              - '@schema':
                  '@id': padre:sklearn.decomposition.online_lda.LatentDirichletAllocation/verbose
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.online_lda.LatentDirichletAllocation/verbose
                  padre:implements: padre:LatentDirichletAllocation/verbose
                  padre:optional: 'True'
                  padre:path: verbose
                  padre:value_default: '0'
                  padre:value_type: integer
                  rdfs:comment: Controls the verbosity level.
                  rdfs:label: verbose
                algorithm:
                  '@schema':
                    '@id': padre:LatentDirichletAllocation/verbose
                    '@type': padre:ModelParameters
                    padre:configures: padre:LatentDirichletAllocation
              - '@schema':
                  '@id': padre:sklearn.decomposition.online_lda.LatentDirichletAllocation/random_state
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.online_lda.LatentDirichletAllocation/random_state
                  padre:implements: padre:LatentDirichletAllocation/random_state
                  padre:optional: 'True'
                  padre:path: random_state
                  padre:value_default: None
                  padre:value_type: '{integer, RandomState instance, None}'
                  rdfs:comment: The seed of the pseudo random number generator to
                    use when shuffling the data. If int, random_state is the seed used
                    by the random number generator; If RandomState instance, random_state
                    is the random number generator; If None, the random number generator
                    is the RandomState instance used by np.random.
                  rdfs:label: random_state
                algorithm:
                  '@schema':
                    '@id': padre:LatentDirichletAllocation/random_state
                    '@type': padre:ModelParameters
                    padre:configures: padre:LatentDirichletAllocation
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.decomposition.online_lda.LatentDirichletAllocation/max_iterations
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.decomposition.online_lda.LatentDirichletAllocation/max_iterations
                  padre:implements: padre:LatentDirichletAllocation/max_iterations
                  padre:optional: 'True'
                  padre:path: max_iter
                  padre:value_default: '200'
                  padre:value_type: integer
                  rdfs:comment: Maximum number of iterations during fit.
                  rdfs:label: max_iterations
                algorithm:
                  '@schema':
                    '@id': padre:LatentDirichletAllocation/max_iterations
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:LatentDirichletAllocation
              - '@schema':
                  '@id': padre:sklearn.decomposition.online_lda.LatentDirichletAllocation/jobs
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.decomposition.online_lda.LatentDirichletAllocation/jobs
                  padre:implements: padre:LatentDirichletAllocation/jobs
                  padre:optional: 'True'
                  padre:path: n_jobs
                  padre:value_default: '1'
                  padre:value_type: integer
                  rdfs:comment: The number of jobs to use in the E-step. If -1,
                    all CPUs are used. If -1 all CPUs are used.
                  rdfs:label: jobs
                algorithm:
                  '@schema':
                    '@id': padre:LatentDirichletAllocation/jobs
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:LatentDirichletAllocation
    :decomposition.pca.PCA:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.decomposition.pca.PCA
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:PCA
            rdfs:comment: null
            rdfs:label: principal component analysis
          algorithm:
            '@schema':
              '@id': padre:PCA
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: principal component analysis
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.decomposition.pca.PCA/num_components
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.pca.PCA/num_components
                  padre:implements: padre:PCA/num_components
                  padre:optional: 'False'
                  padre:path: n_components
                  padre:value_default: None
                  padre:value_type: '{integer, float, None, ''mle''}'
                  rdfs:comment: Number of components to keep.
                  rdfs:label: num_components
                algorithm:
                  '@schema':
                    '@id': padre:PCA/num_components
                    '@type': padre:ModelParameters
                    padre:configures: padre:PCA
              - '@schema':
                  '@id': padre:sklearn.decomposition.pca.PCA/copy
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.pca.PCA/copy
                  padre:implements: padre:PCA/copy
                  padre:optional: 'False'
                  padre:path: copy
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: If False, data passed to fit are overwritten and
                    running fit(X).transform(X) will not yield the expected results,
                    use fit_transform(X) instead.
                  rdfs:label: copy
                algorithm:
                  '@schema':
                    '@id': padre:PCA/copy
                    '@type': padre:ModelParameters
                    padre:configures: padre:PCA
              - '@schema':
                  '@id': padre:sklearn.decomposition.pca.PCA/whiten
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.pca.PCA/whiten
                  padre:implements: padre:PCA/whiten
                  padre:optional: 'True'
                  padre:path: whiten
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: When True (False by default) the components_ vectors
                    are multiplied by the square root of n_samples and then divided
                    by the singular values to ensure uncorrelated outputs with unit
                    component-wise variances. Whitening will remove some information
                    from the transformed signal (the relative variance scales of the
                    components) but can sometime improve the predictive accuracy of
                    the downstream estimators by making their data respect some hard-wired
                    assumptions.
                  rdfs:label: whiten
                algorithm:
                  '@schema':
                    '@id': padre:PCA/whiten
                    '@type': padre:ModelParameters
                    padre:configures: padre:PCA
              - '@schema':
                  '@id': padre:sklearn.decomposition.pca.PCA/svd_solver
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.pca.PCA/svd_solver
                  padre:implements: padre:PCA/svd_solver
                  padre:optional: 'False'
                  padre:path: svd_solver
                  padre:value_default: '''auto'''
                  padre:value_type: ' {''auto'', ''full'', ''arpack'', ''randomized''}'
                  rdfs:comment: singular value decomposition solver
                  rdfs:label: svd_solver
                algorithm:
                  '@schema':
                    '@id': padre:PCA/svd_solver
                    '@type': padre:ModelParameters
                    padre:configures: padre:PCA
              - '@schema':
                  '@id': padre:sklearn.decomposition.pca.PCA/tolerance
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.pca.PCA/tolerance
                  padre:implements: padre:PCA/tolerance
                  padre:optional: 'False'
                  padre:path: tol
                  padre:value_default: '0.0'
                  padre:value_type: float >= 0
                  rdfs:comment: Tolerance for singular values computed by svd_solver
                    == 'arpack'.
                  rdfs:label: tolerance
                algorithm:
                  '@schema':
                    '@id': padre:PCA/tolerance
                    '@type': padre:ModelParameters
                    padre:configures: padre:PCA
              - '@schema':
                  '@id': padre:sklearn.decomposition.pca.PCA/iterated_power
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.pca.PCA/iterated_power
                  padre:implements: padre:PCA/iterated_power
                  padre:optional: 'False'
                  padre:path: iterated_power
                  padre:value_default: '''auto'''
                  padre:value_type: '{integer >= 0, ''auto''}'
                  rdfs:comment: Number of iterations for the power method computed
                    by svd_solver == 'randomized'.
                  rdfs:label: iterated_power
                algorithm:
                  '@schema':
                    '@id': padre:PCA/iterated_power
                    '@type': padre:ModelParameters
                    padre:configures: padre:PCA
              - '@schema':
                  '@id': padre:sklearn.decomposition.pca.PCA/random_state
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.pca.PCA/random_state
                  padre:implements: padre:PCA/random_state
                  padre:optional: 'True'
                  padre:path: random_state
                  padre:value_default: None
                  padre:value_type: '{integer, RandomState instance, None}'
                  rdfs:comment: The seed of the pseudo random number generator to
                    use when shuffling the data. If int, random_state is the seed used
                    by the random number generator; If RandomState instance, random_state
                    is the random number generator; If None, the random number generator
                    is the RandomState instance used by np.random.
                  rdfs:label: random_state
                algorithm:
                  '@schema':
                    '@id': padre:PCA/random_state
                    '@type': padre:ModelParameters
                    padre:configures: padre:PCA
            optimisation_parameters: []
    :decomposition.sparse_pca.MiniBatchSparsePCA:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.decomposition.sparse_pca.MiniBatchSparsePCA
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:MiniBatchSparsePCA
            rdfs:comment: null
            rdfs:label: mini batch sparse principal component analysis
          algorithm:
            '@schema':
              '@id': padre:MiniBatchSparsePCA
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: mini batch sparse principal component analysis
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.decomposition.sparse_pca.MiniBatchSparsePCA/num_components
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.sparse_pca.MiniBatchSparsePCA/num_components
                  padre:implements: padre:MiniBatchSparsePCA/num_components
                  padre:optional: 'False'
                  padre:path: n_components
                  padre:value_default: None
                  padre:value_type: '{integer, None}'
                  rdfs:comment: Number of sparse atoms to extract.
                  rdfs:label: num_components
                algorithm:
                  '@schema':
                    '@id': padre:MiniBatchSparsePCA/num_components
                    '@type': padre:ModelParameters
                    padre:configures: padre:MiniBatchSparsePCA
              - '@schema':
                  '@id': padre:sklearn.decomposition.sparse_pca.MiniBatchSparsePCA/sparsity_parmeter
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.sparse_pca.MiniBatchSparsePCA/sparsity_parmeter
                  padre:implements: padre:MiniBatchSparsePCA/sparsity_parmeter
                  padre:optional: 'False'
                  padre:path: alpha
                  padre:value_default: '1'
                  padre:value_type: float
                  rdfs:comment: Sparsity controlling parameter. Higher values lead
                    to sparser components.
                  rdfs:label: sparsity_parmeter
                algorithm:
                  '@schema':
                    '@id': padre:MiniBatchSparsePCA/sparsity_parmeter
                    '@type': padre:ModelParameters
                    padre:configures: padre:MiniBatchSparsePCA
              - '@schema':
                  '@id': padre:sklearn.decomposition.sparse_pca.MiniBatchSparsePCA/ridge_alpha
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.sparse_pca.MiniBatchSparsePCA/ridge_alpha
                  padre:implements: padre:MiniBatchSparsePCA/ridge_alpha
                  padre:optional: 'False'
                  padre:path: ridge_alpha
                  padre:value_default: '0.01'
                  padre:value_type: float
                  rdfs:comment: Amount of ridge shrinkage to apply in order to improve
                    conditioning when calling the transform method.
                  rdfs:label: ridge_alpha
                algorithm:
                  '@schema':
                    '@id': padre:MiniBatchSparsePCA/ridge_alpha
                    '@type': padre:ModelParameters
                    padre:configures: padre:MiniBatchSparsePCA
              - '@schema':
                  '@id': padre:sklearn.decomposition.sparse_pca.MiniBatchSparsePCA/callback
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.sparse_pca.MiniBatchSparsePCA/callback
                  padre:implements: padre:MiniBatchSparsePCA/callback
                  padre:optional: 'True'
                  padre:path: callback
                  padre:value_default: ''
                  padre:value_type: '{callable, None}'
                  rdfs:comment: null
                  rdfs:label: callback
                algorithm:
                  '@schema':
                    '@id': padre:MiniBatchSparsePCA/callback
                    '@type': padre:ModelParameters
                    padre:configures: padre:MiniBatchSparsePCA
              - '@schema':
                  '@id': padre:sklearn.decomposition.sparse_pca.MiniBatchSparsePCA/batch_size
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.sparse_pca.MiniBatchSparsePCA/batch_size
                  padre:implements: padre:MiniBatchSparsePCA/batch_size
                  padre:optional: 'True'
                  padre:path: batch_size
                  padre:value_default: '3'
                  padre:value_type: integer
                  rdfs:comment: The number of features to take in each mini batch.
                  rdfs:label: batch_size
                algorithm:
                  '@schema':
                    '@id': padre:MiniBatchSparsePCA/batch_size
                    '@type': padre:ModelParameters
                    padre:configures: padre:MiniBatchSparsePCA
              - '@schema':
                  '@id': padre:sklearn.decomposition.sparse_pca.MiniBatchSparsePCA/verbose
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.sparse_pca.MiniBatchSparsePCA/verbose
                  padre:implements: padre:MiniBatchSparsePCA/verbose
                  padre:optional: 'True'
                  padre:path: verbose
                  padre:value_default: '0'
                  padre:value_type: integer
                  rdfs:comment: Controls the verbosity; the higher, the more messages.
                  rdfs:label: verbose
                algorithm:
                  '@schema':
                    '@id': padre:MiniBatchSparsePCA/verbose
                    '@type': padre:ModelParameters
                    padre:configures: padre:MiniBatchSparsePCA
              - '@schema':
                  '@id': padre:sklearn.decomposition.sparse_pca.MiniBatchSparsePCA/shuffle
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.sparse_pca.MiniBatchSparsePCA/shuffle
                  padre:implements: padre:MiniBatchSparsePCA/shuffle
                  padre:optional: 'True'
                  padre:path: shuffle
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: Whether to shuffle the data before splitting it
                    in batches.
                  rdfs:label: shuffle
                algorithm:
                  '@schema':
                    '@id': padre:MiniBatchSparsePCA/shuffle
                    '@type': padre:ModelParameters
                    padre:configures: padre:MiniBatchSparsePCA
              - '@schema':
                  '@id': padre:sklearn.decomposition.sparse_pca.MiniBatchSparsePCA/lasso_method
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.sparse_pca.MiniBatchSparsePCA/lasso_method
                  padre:implements: padre:MiniBatchSparsePCA/lasso_method
                  padre:optional: 'False'
                  padre:path: method
                  padre:value_default: '''lars'''
                  padre:value_type: '{''lars'', ''cd''}'
                  rdfs:comment: Embedding method.
                  rdfs:label: lasso_method
                algorithm:
                  '@schema':
                    '@id': padre:MiniBatchSparsePCA/lasso_method
                    '@type': padre:ModelParameters
                    padre:configures: padre:MiniBatchSparsePCA
              - '@schema':
                  '@id': padre:sklearn.decomposition.sparse_pca.MiniBatchSparsePCA/random_state
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.sparse_pca.MiniBatchSparsePCA/random_state
                  padre:implements: padre:MiniBatchSparsePCA/random_state
                  padre:optional: 'True'
                  padre:path: random_state
                  padre:value_default: None
                  padre:value_type: '{integer, RandomState instance, None}'
                  rdfs:comment: The seed of the pseudo random number generator to
                    use when shuffling the data. If int, random_state is the seed used
                    by the random number generator; If RandomState instance, random_state
                    is the random number generator; If None, the random number generator
                    is the RandomState instance used by np.random.
                  rdfs:label: random_state
                algorithm:
                  '@schema':
                    '@id': padre:MiniBatchSparsePCA/random_state
                    '@type': padre:ModelParameters
                    padre:configures: padre:MiniBatchSparsePCA
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.decomposition.sparse_pca.MiniBatchSparsePCA/num_iter
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.decomposition.sparse_pca.MiniBatchSparsePCA/num_iter
                  padre:implements: padre:MiniBatchSparsePCA/num_iter
                  padre:optional: 'True'
                  padre:path: n_iter
                  padre:value_default: '100'
                  padre:value_type: integer
                  rdfs:comment: Number of iterations to perform for each mini batch.
                  rdfs:label: num_iter
                algorithm:
                  '@schema':
                    '@id': padre:MiniBatchSparsePCA/num_iter
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:MiniBatchSparsePCA
              - '@schema':
                  '@id': padre:sklearn.decomposition.sparse_pca.MiniBatchSparsePCA/jobs
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.decomposition.sparse_pca.MiniBatchSparsePCA/jobs
                  padre:implements: padre:MiniBatchSparsePCA/jobs
                  padre:optional: 'False'
                  padre:path: n_jobs
                  padre:value_default: '1'
                  padre:value_type: integer
                  rdfs:comment: The number of jobs to use for the computation. If
                    -1 all CPUs are used.
                  rdfs:label: jobs
                algorithm:
                  '@schema':
                    '@id': padre:MiniBatchSparsePCA/jobs
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:MiniBatchSparsePCA
    :decomposition.sparse_pca.SparsePCA:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.decomposition.sparse_pca.SparsePCA
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:SparsePCA
            rdfs:comment: null
            rdfs:label: sparse principal component analysis
          algorithm:
            '@schema':
              '@id': padre:SparsePCA
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: sparse principal component analysis
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.decomposition.sparse_pca.SparsePCA/num_components
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.sparse_pca.SparsePCA/num_components
                  padre:implements: padre:SparsePCA/num_components
                  padre:optional: 'False'
                  padre:path: n_components
                  padre:value_default: None
                  padre:value_type: '{integer, None}'
                  rdfs:comment: Number of sparse atoms to extract.
                  rdfs:label: num_components
                algorithm:
                  '@schema':
                    '@id': padre:SparsePCA/num_components
                    '@type': padre:ModelParameters
                    padre:configures: padre:SparsePCA
              - '@schema':
                  '@id': padre:sklearn.decomposition.sparse_pca.SparsePCA/sparsity_parmeter
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.sparse_pca.SparsePCA/sparsity_parmeter
                  padre:implements: padre:SparsePCA/sparsity_parmeter
                  padre:optional: 'False'
                  padre:path: alpha
                  padre:value_default: '1'
                  padre:value_type: float
                  rdfs:comment: Sparsity controlling parameter. Higher values lead
                    to sparser components.
                  rdfs:label: sparsity_parmeter
                algorithm:
                  '@schema':
                    '@id': padre:SparsePCA/sparsity_parmeter
                    '@type': padre:ModelParameters
                    padre:configures: padre:SparsePCA
              - '@schema':
                  '@id': padre:sklearn.decomposition.sparse_pca.SparsePCA/ridge_alpha
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.sparse_pca.SparsePCA/ridge_alpha
                  padre:implements: padre:SparsePCA/ridge_alpha
                  padre:optional: 'False'
                  padre:path: ridge_alpha
                  padre:value_default: '0.01'
                  padre:value_type: float
                  rdfs:comment: Amount of ridge shrinkage to apply in order to improve
                    conditioning when calling the transform method.
                  rdfs:label: ridge_alpha
                algorithm:
                  '@schema':
                    '@id': padre:SparsePCA/ridge_alpha
                    '@type': padre:ModelParameters
                    padre:configures: padre:SparsePCA
              - '@schema':
                  '@id': padre:sklearn.decomposition.sparse_pca.SparsePCA/tolerance
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.sparse_pca.SparsePCA/tolerance
                  padre:implements: padre:SparsePCA/tolerance
                  padre:optional: 'False'
                  padre:path: tol
                  padre:value_default: '0.00000001'
                  padre:value_type: float
                  rdfs:comment: Tolerance for the stopping condition.
                  rdfs:label: tolerance
                algorithm:
                  '@schema':
                    '@id': padre:SparsePCA/tolerance
                    '@type': padre:ModelParameters
                    padre:configures: padre:SparsePCA
              - '@schema':
                  '@id': padre:sklearn.decomposition.sparse_pca.SparsePCA/lasso_method
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.sparse_pca.SparsePCA/lasso_method
                  padre:implements: padre:SparsePCA/lasso_method
                  padre:optional: 'False'
                  padre:path: method
                  padre:value_default: '''lars'''
                  padre:value_type: '{''lars'', ''cd''}'
                  rdfs:comment: Embedding method.
                  rdfs:label: lasso_method
                algorithm:
                  '@schema':
                    '@id': padre:SparsePCA/lasso_method
                    '@type': padre:ModelParameters
                    padre:configures: padre:SparsePCA
              - '@schema':
                  '@id': padre:sklearn.decomposition.sparse_pca.SparsePCA/U_init
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.sparse_pca.SparsePCA/U_init
                  padre:implements: padre:SparsePCA/U_init
                  padre:optional: 'False'
                  padre:path: U_init
                  padre:value_default: None
                  padre:value_type: array of shape (n_samples, n_components)
                  rdfs:comment: Initial values for the loadings for warm restart
                    scenarios.
                  rdfs:label: U_init
                algorithm:
                  '@schema':
                    '@id': padre:SparsePCA/U_init
                    '@type': padre:ModelParameters
                    padre:configures: padre:SparsePCA
              - '@schema':
                  '@id': padre:sklearn.decomposition.sparse_pca.SparsePCA/V_init
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.sparse_pca.SparsePCA/V_init
                  padre:implements: padre:SparsePCA/V_init
                  padre:optional: 'False'
                  padre:path: V_init
                  padre:value_default: None
                  padre:value_type: array of shape (n_components, n_features)
                  rdfs:comment: Initial values for the components for warm restart
                    scenarios.
                  rdfs:label: V_init
                algorithm:
                  '@schema':
                    '@id': padre:SparsePCA/V_init
                    '@type': padre:ModelParameters
                    padre:configures: padre:SparsePCA
              - '@schema':
                  '@id': padre:sklearn.decomposition.sparse_pca.SparsePCA/verbose
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.sparse_pca.SparsePCA/verbose
                  padre:implements: padre:SparsePCA/verbose
                  padre:optional: 'True'
                  padre:path: verbose
                  padre:value_default: '0'
                  padre:value_type: integer
                  rdfs:comment: Controls the verbosity; the higher, the more messages.
                  rdfs:label: verbose
                algorithm:
                  '@schema':
                    '@id': padre:SparsePCA/verbose
                    '@type': padre:ModelParameters
                    padre:configures: padre:SparsePCA
              - '@schema':
                  '@id': padre:sklearn.decomposition.sparse_pca.SparsePCA/random_state
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.sparse_pca.SparsePCA/random_state
                  padre:implements: padre:SparsePCA/random_state
                  padre:optional: 'True'
                  padre:path: random_state
                  padre:value_default: None
                  padre:value_type: '{integer, RandomState instance, None}'
                  rdfs:comment: The seed of the pseudo random number generator to
                    use when shuffling the data. If int, random_state is the seed used
                    by the random number generator; If RandomState instance, random_state
                    is the random number generator; If None, the random number generator
                    is the RandomState instance used by np.random.
                  rdfs:label: random_state
                algorithm:
                  '@schema':
                    '@id': padre:SparsePCA/random_state
                    '@type': padre:ModelParameters
                    padre:configures: padre:SparsePCA
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.decomposition.sparse_pca.SparsePCA/max_iterations
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.decomposition.sparse_pca.SparsePCA/max_iterations
                  padre:implements: padre:SparsePCA/max_iterations
                  padre:optional: 'True'
                  padre:path: max_iter
                  padre:value_default: '1000'
                  padre:value_type: integer
                  rdfs:comment: Maximum number of iterations to perform.
                  rdfs:label: max_iterations
                algorithm:
                  '@schema':
                    '@id': padre:SparsePCA/max_iterations
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:SparsePCA
              - '@schema':
                  '@id': padre:sklearn.decomposition.sparse_pca.SparsePCA/jobs
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.decomposition.sparse_pca.SparsePCA/jobs
                  padre:implements: padre:SparsePCA/jobs
                  padre:optional: 'False'
                  padre:path: n_jobs
                  padre:value_default: '1'
                  padre:value_type: integer
                  rdfs:comment: The number of jobs to use for the computation. If
                    -1 all CPUs are used.
                  rdfs:label: jobs
                algorithm:
                  '@schema':
                    '@id': padre:SparsePCA/jobs
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:SparsePCA
    :decomposition.truncated_svd.TruncatedSVD:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.decomposition.truncated_svd.TruncatedSVD
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:TruncatedSVD
            rdfs:comment: null
            rdfs:label: truncated single value decomposition
          algorithm:
            '@schema':
              '@id': padre:TruncatedSVD
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: truncated single value decomposition
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.decomposition.truncated_svd.TruncatedSVD/num_components
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.truncated_svd.TruncatedSVD/num_components
                  padre:implements: padre:TruncatedSVD/num_components
                  padre:optional: 'False'
                  padre:path: n_components
                  padre:value_default: '2'
                  padre:value_type: '{integer, None}'
                  rdfs:comment: Number of sparse atoms to extract.
                  rdfs:label: num_components
                algorithm:
                  '@schema':
                    '@id': padre:TruncatedSVD/num_components
                    '@type': padre:ModelParameters
                    padre:configures: padre:TruncatedSVD
              - '@schema':
                  '@id': padre:sklearn.decomposition.truncated_svd.TruncatedSVD/svd_solver
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.truncated_svd.TruncatedSVD/svd_solver
                  padre:implements: padre:TruncatedSVD/svd_solver
                  padre:optional: 'False'
                  padre:path: algorithm
                  padre:value_default: '''randomized'''
                  padre:value_type: ' {''arpack'', ''randomized''}'
                  rdfs:comment: singular value decomposition solver
                  rdfs:label: svd_solver
                algorithm:
                  '@schema':
                    '@id': padre:TruncatedSVD/svd_solver
                    '@type': padre:ModelParameters
                    padre:configures: padre:TruncatedSVD
              - '@schema':
                  '@id': padre:sklearn.decomposition.truncated_svd.TruncatedSVD/tolerance
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.truncated_svd.TruncatedSVD/tolerance
                  padre:implements: padre:TruncatedSVD/tolerance
                  padre:optional: 'True'
                  padre:path: tol
                  padre:value_default: '0.0'
                  padre:value_type: float
                  rdfs:comment: Tolerance for ARPACK. 0 means machine precision.
                    Ignored by randomized SVD solver.
                  rdfs:label: tolerance
                algorithm:
                  '@schema':
                    '@id': padre:TruncatedSVD/tolerance
                    '@type': padre:ModelParameters
                    padre:configures: padre:TruncatedSVD
              - '@schema':
                  '@id': padre:sklearn.decomposition.truncated_svd.TruncatedSVD/random_state
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.decomposition.truncated_svd.TruncatedSVD/random_state
                  padre:implements: padre:TruncatedSVD/random_state
                  padre:optional: 'True'
                  padre:path: random_state
                  padre:value_default: None
                  padre:value_type: '{integer, RandomState instance, None}'
                  rdfs:comment: The seed of the pseudo random number generator to
                    use when shuffling the data. If int, random_state is the seed used
                    by the random number generator; If RandomState instance, random_state
                    is the random number generator; If None, the random number generator
                    is the RandomState instance used by np.random.
                  rdfs:label: random_state
                algorithm:
                  '@schema':
                    '@id': padre:TruncatedSVD/random_state
                    '@type': padre:ModelParameters
                    padre:configures: padre:TruncatedSVD
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.decomposition.truncated_svd.TruncatedSVD/num_iter
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.decomposition.truncated_svd.TruncatedSVD/num_iter
                  padre:implements: padre:TruncatedSVD/num_iter
                  padre:optional: 'True'
                  padre:path: n_iter
                  padre:value_default: '5'
                  padre:value_type: integer
                  rdfs:comment: Number of iterations for randomized SVD solver.
                    Not used by ARPACK. The default is larger than the default in randomized_svd
                    to handle sparse matrices that may have large slowly decaying spectrum.
                  rdfs:label: num_iter
                algorithm:
                  '@schema':
                    '@id': padre:TruncatedSVD/num_iter
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:TruncatedSVD
    :discriminant_analysis.LinearDiscriminantAnalysis:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.discriminant_analysis.LinearDiscriminantAnalysis
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:LinearDiscriminantAnalysis
            rdfs:comment: null
            rdfs:label: linear discriminant analysis
          algorithm:
            '@schema':
              '@id': padre:LinearDiscriminantAnalysis
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: linear discriminant analysis
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.discriminant_analysis.LinearDiscriminantAnalysis/estimation_algorithm
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.discriminant_analysis.LinearDiscriminantAnalysis/estimation_algorithm
                  padre:implements: padre:LinearDiscriminantAnalysis/estimation_algorithm
                  padre:optional: 'True'
                  padre:path: solver
                  padre:value_default: '''svd'''
                  padre:value_type: '{''svd'', ''lsqr'', ''eigen''}'
                  rdfs:comment: 'Possible values: singular value decomposition (svd),
                  least squares solution (lsqr), eigenvalue decomposition (eigen)'
                  rdfs:label: estimation_algorithm
                algorithm:
                  '@schema':
                    '@id': padre:LinearDiscriminantAnalysis/estimation_algorithm
                    '@type': padre:ModelParameters
                    padre:configures: padre:LinearDiscriminantAnalysis
              - '@schema':
                  '@id': padre:sklearn.discriminant_analysis.LinearDiscriminantAnalysis/shrinkage
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.discriminant_analysis.LinearDiscriminantAnalysis/shrinkage
                  padre:implements: padre:LinearDiscriminantAnalysis/shrinkage
                  padre:optional: 'True'
                  padre:path: shrinkage
                  padre:value_default: None
                  padre:value_type: '{None, ''auto'', float between 0 and 1}'
                  rdfs:comment: 'Shrinkage is a tool to improve estimation of covariance
                  matrices in situations where the number of training samples is small
                  compared to the number of features. Possible values: no shrinkage
                  (None), automatic shrinkage using the Ledoit-Wolf lemma (auto),
                  fixed shrinkage parameter(float between 0 and 1)'
                  rdfs:label: shrinkage
                algorithm:
                  '@schema':
                    '@id': padre:LinearDiscriminantAnalysis/shrinkage
                    '@type': padre:ModelParameters
                    padre:configures: padre:LinearDiscriminantAnalysis
              - '@schema':
                  '@id': padre:sklearn.discriminant_analysis.LinearDiscriminantAnalysis/priors
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.discriminant_analysis.LinearDiscriminantAnalysis/priors
                  padre:implements: padre:LinearDiscriminantAnalysis/priors
                  padre:optional: 'True'
                  padre:path: priors
                  padre:value_default: None
                  padre:value_type: array in shape of (n_classes,)
                  rdfs:comment: Class priors.
                  rdfs:label: priors
                algorithm:
                  '@schema':
                    '@id': padre:LinearDiscriminantAnalysis/priors
                    '@type': padre:ModelParameters
                    padre:configures: padre:LinearDiscriminantAnalysis
              - '@schema':
                  '@id': padre:sklearn.discriminant_analysis.LinearDiscriminantAnalysis/num_components
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.discriminant_analysis.LinearDiscriminantAnalysis/num_components
                  padre:implements: padre:LinearDiscriminantAnalysis/num_components
                  padre:optional: 'True'
                  padre:path: n_components
                  padre:value_default: None
                  padre:value_type: integer
                  rdfs:comment: Number of components (< n_classes - 1) for dimensionality
                    reduction.
                  rdfs:label: num_components
                algorithm:
                  '@schema':
                    '@id': padre:LinearDiscriminantAnalysis/num_components
                    '@type': padre:ModelParameters
                    padre:configures: padre:LinearDiscriminantAnalysis
              - '@schema':
                  '@id': padre:sklearn.discriminant_analysis.LinearDiscriminantAnalysis/store_covariance
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.discriminant_analysis.LinearDiscriminantAnalysis/store_covariance
                  padre:implements: padre:LinearDiscriminantAnalysis/store_covariance
                  padre:optional: 'True'
                  padre:path: store_covariance
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: "Additionally compute class covariance matrix (default\
                  \ False), used only in \u2018svd\u2019 solver."
                  rdfs:label: store_covariance
                algorithm:
                  '@schema':
                    '@id': padre:LinearDiscriminantAnalysis/store_covariance
                    '@type': padre:ModelParameters
                    padre:configures: padre:LinearDiscriminantAnalysis
              - '@schema':
                  '@id': padre:sklearn.discriminant_analysis.LinearDiscriminantAnalysis/tolerance
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.discriminant_analysis.LinearDiscriminantAnalysis/tolerance
                  padre:implements: padre:LinearDiscriminantAnalysis/tolerance
                  padre:optional: 'True'
                  padre:path: tol
                  padre:value_default: '0.0001'
                  padre:value_type: float
                  rdfs:comment: Threshold used for rank estimation in SVD solver.
                  rdfs:label: tolerance
                algorithm:
                  '@schema':
                    '@id': padre:LinearDiscriminantAnalysis/tolerance
                    '@type': padre:ModelParameters
                    padre:configures: padre:LinearDiscriminantAnalysis
            optimisation_parameters: []
    :discriminant_analysis.QuadraticDiscriminantAnalysis:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:QuadraticDiscriminantAnalysis
            rdfs:comment: null
            rdfs:label: quadratic discriminant analysis
          algorithm:
            '@schema':
              '@id': padre:QuadraticDiscriminantAnalysis
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: quadratic discriminant analysis
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis/priors
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis/priors
                  padre:implements: padre:QuadraticDiscriminantAnalysis/priors
                  padre:optional: 'True'
                  padre:path: priors
                  padre:value_default: None
                  padre:value_type: array in shape of [n_classes]
                  rdfs:comment: Class priors.
                  rdfs:label: priors
                algorithm:
                  '@schema':
                    '@id': padre:QuadraticDiscriminantAnalysis/priors
                    '@type': padre:ModelParameters
                    padre:configures: padre:QuadraticDiscriminantAnalysis
              - '@schema':
                  '@id': padre:sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis/regularisation_parameter
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis/regularisation_parameter
                  padre:implements: padre:QuadraticDiscriminantAnalysis/regularisation_parameter
                  padre:optional: 'True'
                  padre:path: reg_param
                  padre:value_default: '0.0'
                  padre:value_type: float
                  rdfs:comment: Regularizes the covariance estimate.
                  rdfs:label: regularisation_parameter
                algorithm:
                  '@schema':
                    '@id': padre:QuadraticDiscriminantAnalysis/regularisation_parameter
                    '@type': padre:ModelParameters
                    padre:configures: padre:QuadraticDiscriminantAnalysis
              - '@schema':
                  '@id': padre:sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis/store_covariance
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis/store_covariance
                  padre:implements: padre:QuadraticDiscriminantAnalysis/store_covariance
                  padre:optional: 'False'
                  padre:path: store_covariance
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: If True the covariance matrices are computed and
                    stored in the self.covariance_ attribute.
                  rdfs:label: store_covariance
                algorithm:
                  '@schema':
                    '@id': padre:QuadraticDiscriminantAnalysis/store_covariance
                    '@type': padre:ModelParameters
                    padre:configures: padre:QuadraticDiscriminantAnalysis
              - '@schema':
                  '@id': padre:sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis/tolerance
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis/tolerance
                  padre:implements: padre:QuadraticDiscriminantAnalysis/tolerance
                  padre:optional: 'True'
                  padre:path: tol
                  padre:value_default: '0.0001'
                  padre:value_type: float
                  rdfs:comment: Threshold used for rank estimation.
                  rdfs:label: tolerance
                algorithm:
                  '@schema':
                    '@id': padre:QuadraticDiscriminantAnalysis/tolerance
                    '@type': padre:ModelParameters
                    padre:configures: padre:QuadraticDiscriminantAnalysis
            optimisation_parameters: []
    :ensemble.VotingClassifier:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.ensemble.VotingClassifier
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:VotingClassifier
            rdfs:comment: null
            rdfs:label: voting classifier
          algorithm:
            '@schema':
              '@id': padre:VotingClassifier
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: voting classifier
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.ensemble.VotingClassifier/estimators
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.VotingClassifier/estimators
                  padre:implements: padre:VotingClassifier/estimators
                  padre:optional: 'False'
                  padre:path: estimators
                  padre:value_default: ''
                  padre:value_type: string, estimator tuple{('lr', clf1), ('rf', clf2),
                    ('gnb', clf3), ('dt', clf1), ('knn', clf2), ('svc', clf3)}
                  rdfs:comment: Used estimators.
                  rdfs:label: estimators
                algorithm:
                  '@schema':
                    '@id': padre:VotingClassifier/estimators
                    '@type': padre:ModelParameters
                    padre:configures: padre:VotingClassifier
              - '@schema':
                  '@id': padre:sklearn.ensemble.VotingClassifier/voting
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.VotingClassifier/voting
                  padre:implements: padre:VotingClassifier/voting
                  padre:optional: 'False'
                  padre:path: voting
                  padre:value_default: '''hard'''
                  padre:value_type: '{''hard'', ''soft''}'
                  rdfs:comment: If 'hard', uses predicted class labels for majority
                    rule voting. Else if 'soft', predicts the class label based on the
                    argmax of the sums of the predicted probabilities, which is recommended
                    for an ensemble of well-calibrated classifiers.
                  rdfs:label: voting
                algorithm:
                  '@schema':
                    '@id': padre:VotingClassifier/voting
                    '@type': padre:ModelParameters
                    padre:configures: padre:VotingClassifier
              - '@schema':
                  '@id': padre:sklearn.ensemble.VotingClassifier/weights
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.VotingClassifier/weights
                  padre:implements: padre:VotingClassifier/weights
                  padre:optional: 'True'
                  padre:path: weights
                  padre:value_default: None
                  padre:value_type: array-like, shape = [n_classifiers] integer, float,
                    None
                  rdfs:comment: Sequence of weights (float or int) to weight the
                    occurrences of predicted class labels (hard voting) or class probabilities
                    before averaging (soft voting). Uses uniform weights if None.
                  rdfs:label: weights
                algorithm:
                  '@schema':
                    '@id': padre:VotingClassifier/weights
                    '@type': padre:ModelParameters
                    padre:configures: padre:VotingClassifier
              - '@schema':
                  '@id': padre:sklearn.ensemble.VotingClassifier/flatten_transform
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.VotingClassifier/flatten_transform
                  padre:implements: padre:VotingClassifier/flatten_transform
                  padre:optional: 'True'
                  padre:path: flatten_transform
                  padre:value_default: None
                  padre:value_type: '{boolean, None}'
                  rdfs:comment: Affects shape of transform output only when voting='soft'.
                  rdfs:label: flatten_transform
                algorithm:
                  '@schema':
                    '@id': padre:VotingClassifier/flatten_transform
                    '@type': padre:ModelParameters
                    padre:configures: padre:VotingClassifier
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.ensemble.VotingClassifier/jobs
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.ensemble.VotingClassifier/jobs
                  padre:implements: padre:VotingClassifier/jobs
                  padre:optional: 'True'
                  padre:path: n_jobs
                  padre:value_default: '1'
                  padre:value_type: integer
                  rdfs:comment: The number of jobs to use for the computation. If
                    -1 all CPUs are used.
                  rdfs:label: jobs
                algorithm:
                  '@schema':
                    '@id': padre:VotingClassifier/jobs
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:VotingClassifier
    :ensemble.bagging.BaggingClassifier:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.ensemble.bagging.BaggingClassifier
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:BaggingClassifier
            rdfs:comment: null
            rdfs:label: bagging classifier
          algorithm:
            '@schema':
              '@id': padre:BaggingClassifier
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: bagging classifier
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.ensemble.bagging.BaggingClassifier/base_estimator
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.bagging.BaggingClassifier/base_estimator
                  padre:implements: padre:BaggingClassifier/base_estimator
                  padre:optional: 'True'
                  padre:path: base_estimator
                  padre:value_default: None
                  padre:value_type: '{object, None}'
                  rdfs:comment: The base estimator to fit on random subsets of the
                    dataset.
                  rdfs:label: base_estimator
                algorithm:
                  '@schema':
                    '@id': padre:BaggingClassifier/base_estimator
                    '@type': padre:ModelParameters
                    padre:configures: padre:BaggingClassifier
              - '@schema':
                  '@id': padre:sklearn.ensemble.bagging.BaggingClassifier/num_estimators
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.bagging.BaggingClassifier/num_estimators
                  padre:implements: padre:BaggingClassifier/num_estimators
                  padre:optional: 'True'
                  padre:path: n_estimators
                  padre:value_default: '10'
                  padre:value_type: integer
                  rdfs:comment: The number of trees in the forest.
                  rdfs:label: num_estimators
                algorithm:
                  '@schema':
                    '@id': padre:BaggingClassifier/num_estimators
                    '@type': padre:ModelParameters
                    padre:configures: padre:BaggingClassifier
              - '@schema':
                  '@id': padre:sklearn.ensemble.bagging.BaggingClassifier/max_samples
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.bagging.BaggingClassifier/max_samples
                  padre:implements: padre:BaggingClassifier/max_samples
                  padre:optional: 'True'
                  padre:path: max_samples
                  padre:value_default: '1.0'
                  padre:value_type: '{integer, float}'
                  rdfs:comment: The number of samples to draw from X to train each
                    base estimator.
                  rdfs:label: max_samples
                algorithm:
                  '@schema':
                    '@id': padre:BaggingClassifier/max_samples
                    '@type': padre:ModelParameters
                    padre:configures: padre:BaggingClassifier
              - '@schema':
                  '@id': padre:sklearn.ensemble.bagging.BaggingClassifier/max_features
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.bagging.BaggingClassifier/max_features
                  padre:implements: padre:BaggingClassifier/max_features
                  padre:optional: 'True'
                  padre:path: max_features
                  padre:value_default: '1.0'
                  padre:value_type: '{integer, float}'
                  rdfs:comment: The number of features to draw from X to train each
                    base estimator.
                  rdfs:label: max_features
                algorithm:
                  '@schema':
                    '@id': padre:BaggingClassifier/max_features
                    '@type': padre:ModelParameters
                    padre:configures: padre:BaggingClassifier
              - '@schema':
                  '@id': padre:sklearn.ensemble.bagging.BaggingClassifier/bootstrap
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.bagging.BaggingClassifier/bootstrap
                  padre:implements: padre:BaggingClassifier/bootstrap
                  padre:optional: 'True'
                  padre:path: bootstrap
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: Whether samples are drawn with replacement.
                  rdfs:label: bootstrap
                algorithm:
                  '@schema':
                    '@id': padre:BaggingClassifier/bootstrap
                    '@type': padre:ModelParameters
                    padre:configures: padre:BaggingClassifier
              - '@schema':
                  '@id': padre:sklearn.ensemble.bagging.BaggingClassifier/bootstrap_features
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.bagging.BaggingClassifier/bootstrap_features
                  padre:implements: padre:BaggingClassifier/bootstrap_features
                  padre:optional: 'True'
                  padre:path: bootstrap_features
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: Whether features are drawn with replacement.
                  rdfs:label: bootstrap_features
                algorithm:
                  '@schema':
                    '@id': padre:BaggingClassifier/bootstrap_features
                    '@type': padre:ModelParameters
                    padre:configures: padre:BaggingClassifier
              - '@schema':
                  '@id': padre:sklearn.ensemble.bagging.BaggingClassifier/oob_samples
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.bagging.BaggingClassifier/oob_samples
                  padre:implements: padre:BaggingClassifier/oob_samples
                  padre:optional: 'False'
                  padre:path: oob_score
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: Whether to use out-of-bag samples to estimate the
                    generalization error.
                  rdfs:label: oob_samples
                algorithm:
                  '@schema':
                    '@id': padre:BaggingClassifier/oob_samples
                    '@type': padre:ModelParameters
                    padre:configures: padre:BaggingClassifier
              - '@schema':
                  '@id': padre:sklearn.ensemble.bagging.BaggingClassifier/reuse_previous
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.bagging.BaggingClassifier/reuse_previous
                  padre:implements: padre:BaggingClassifier/reuse_previous
                  padre:optional: 'True'
                  padre:path: warm_start
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: When set to True, reuse the solution of the previous
                    call to fit and add more estimators to the ensemble, otherwise,
                    just fit a whole new ensemble.
                  rdfs:label: reuse_previous
                algorithm:
                  '@schema':
                    '@id': padre:BaggingClassifier/reuse_previous
                    '@type': padre:ModelParameters
                    padre:configures: padre:BaggingClassifier
              - '@schema':
                  '@id': padre:sklearn.ensemble.bagging.BaggingClassifier/random_state
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.bagging.BaggingClassifier/random_state
                  padre:implements: padre:BaggingClassifier/random_state
                  padre:optional: 'True'
                  padre:path: random_state
                  padre:value_default: None
                  padre:value_type: '{integer, RandomState instance, None}'
                  rdfs:comment: The seed of the pseudo random number generator to
                    use when shuffling the data. If int, random_state is the seed used
                    by the random number generator; If RandomState instance, random_state
                    is the random number generator; If None, the random number generator
                    is the RandomState instance used by np.random.
                  rdfs:label: random_state
                algorithm:
                  '@schema':
                    '@id': padre:BaggingClassifier/random_state
                    '@type': padre:ModelParameters
                    padre:configures: padre:BaggingClassifier
              - '@schema':
                  '@id': padre:sklearn.ensemble.bagging.BaggingClassifier/verbose
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.bagging.BaggingClassifier/verbose
                  padre:implements: padre:BaggingClassifier/verbose
                  padre:optional: 'True'
                  padre:path: verbose
                  padre:value_default: '0'
                  padre:value_type: integer
                  rdfs:comment: Controls the verbosity of the tree building process.
                  rdfs:label: verbose
                algorithm:
                  '@schema':
                    '@id': padre:BaggingClassifier/verbose
                    '@type': padre:ModelParameters
                    padre:configures: padre:BaggingClassifier
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.ensemble.bagging.BaggingClassifier/jobs
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.ensemble.bagging.BaggingClassifier/jobs
                  padre:implements: padre:BaggingClassifier/jobs
                  padre:optional: 'True'
                  padre:path: n_jobs
                  padre:value_default: '1'
                  padre:value_type: integer
                  rdfs:comment: The number of jobs to use for the computation. If
                    -1 all CPUs are used.
                  rdfs:label: jobs
                algorithm:
                  '@schema':
                    '@id': padre:BaggingClassifier/jobs
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:BaggingClassifier
    :ensemble.bagging.BaggingRegressor:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.ensemble.bagging.BaggingRegressor
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:BaggingRegressor
            rdfs:comment: null
            rdfs:label: bagging regressor
          algorithm:
            '@schema':
              '@id': padre:BaggingRegressor
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: bagging regressor
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.ensemble.bagging.BaggingRegressor/base_estimator
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.bagging.BaggingRegressor/base_estimator
                  padre:implements: padre:BaggingRegressor/base_estimator
                  padre:optional: 'True'
                  padre:path: base_estimator
                  padre:value_default: None
                  padre:value_type: '{object, None}'
                  rdfs:comment: The base estimator to fit on random subsets of the
                    dataset.
                  rdfs:label: base_estimator
                algorithm:
                  '@schema':
                    '@id': padre:BaggingRegressor/base_estimator
                    '@type': padre:ModelParameters
                    padre:configures: padre:BaggingRegressor
              - '@schema':
                  '@id': padre:sklearn.ensemble.bagging.BaggingRegressor/num_estimators
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.bagging.BaggingRegressor/num_estimators
                  padre:implements: padre:BaggingRegressor/num_estimators
                  padre:optional: 'True'
                  padre:path: n_estimators
                  padre:value_default: '10'
                  padre:value_type: integer
                  rdfs:comment: The number of trees in the forest.
                  rdfs:label: num_estimators
                algorithm:
                  '@schema':
                    '@id': padre:BaggingRegressor/num_estimators
                    '@type': padre:ModelParameters
                    padre:configures: padre:BaggingRegressor
              - '@schema':
                  '@id': padre:sklearn.ensemble.bagging.BaggingRegressor/max_samples
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.bagging.BaggingRegressor/max_samples
                  padre:implements: padre:BaggingRegressor/max_samples
                  padre:optional: 'True'
                  padre:path: max_samples
                  padre:value_default: '1.0'
                  padre:value_type: '{integer, float}'
                  rdfs:comment: The number of samples to draw from X to train each
                    base estimator.
                  rdfs:label: max_samples
                algorithm:
                  '@schema':
                    '@id': padre:BaggingRegressor/max_samples
                    '@type': padre:ModelParameters
                    padre:configures: padre:BaggingRegressor
              - '@schema':
                  '@id': padre:sklearn.ensemble.bagging.BaggingRegressor/max_features
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.bagging.BaggingRegressor/max_features
                  padre:implements: padre:BaggingRegressor/max_features
                  padre:optional: 'True'
                  padre:path: max_features
                  padre:value_default: '1.0'
                  padre:value_type: '{integer, float}'
                  rdfs:comment: The number of features to draw from X to train each
                    base estimator.
                  rdfs:label: max_features
                algorithm:
                  '@schema':
                    '@id': padre:BaggingRegressor/max_features
                    '@type': padre:ModelParameters
                    padre:configures: padre:BaggingRegressor
              - '@schema':
                  '@id': padre:sklearn.ensemble.bagging.BaggingRegressor/bootstrap
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.bagging.BaggingRegressor/bootstrap
                  padre:implements: padre:BaggingRegressor/bootstrap
                  padre:optional: 'True'
                  padre:path: bootstrap
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: Whether samples are drawn with replacement.
                  rdfs:label: bootstrap
                algorithm:
                  '@schema':
                    '@id': padre:BaggingRegressor/bootstrap
                    '@type': padre:ModelParameters
                    padre:configures: padre:BaggingRegressor
              - '@schema':
                  '@id': padre:sklearn.ensemble.bagging.BaggingRegressor/bootstrap_features
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.bagging.BaggingRegressor/bootstrap_features
                  padre:implements: padre:BaggingRegressor/bootstrap_features
                  padre:optional: 'True'
                  padre:path: bootstrap_features
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: Whether features are drawn with replacement.
                  rdfs:label: bootstrap_features
                algorithm:
                  '@schema':
                    '@id': padre:BaggingRegressor/bootstrap_features
                    '@type': padre:ModelParameters
                    padre:configures: padre:BaggingRegressor
              - '@schema':
                  '@id': padre:sklearn.ensemble.bagging.BaggingRegressor/oob_samples
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.bagging.BaggingRegressor/oob_samples
                  padre:implements: padre:BaggingRegressor/oob_samples
                  padre:optional: 'False'
                  padre:path: oob_score
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: Whether to use out-of-bag samples to estimate the
                    generalization error.
                  rdfs:label: oob_samples
                algorithm:
                  '@schema':
                    '@id': padre:BaggingRegressor/oob_samples
                    '@type': padre:ModelParameters
                    padre:configures: padre:BaggingRegressor
              - '@schema':
                  '@id': padre:sklearn.ensemble.bagging.BaggingRegressor/reuse_previous
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.bagging.BaggingRegressor/reuse_previous
                  padre:implements: padre:BaggingRegressor/reuse_previous
                  padre:optional: 'True'
                  padre:path: warm_start
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: When set to True, reuse the solution of the previous
                    call to fit and add more estimators to the ensemble, otherwise,
                    just fit a whole new ensemble.
                  rdfs:label: reuse_previous
                algorithm:
                  '@schema':
                    '@id': padre:BaggingRegressor/reuse_previous
                    '@type': padre:ModelParameters
                    padre:configures: padre:BaggingRegressor
              - '@schema':
                  '@id': padre:sklearn.ensemble.bagging.BaggingRegressor/random_state
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.bagging.BaggingRegressor/random_state
                  padre:implements: padre:BaggingRegressor/random_state
                  padre:optional: 'True'
                  padre:path: random_state
                  padre:value_default: None
                  padre:value_type: '{integer, RandomState instance, None}'
                  rdfs:comment: The seed of the pseudo random number generator to
                    use when shuffling the data. If int, random_state is the seed used
                    by the random number generator; If RandomState instance, random_state
                    is the random number generator; If None, the random number generator
                    is the RandomState instance used by np.random.
                  rdfs:label: random_state
                algorithm:
                  '@schema':
                    '@id': padre:BaggingRegressor/random_state
                    '@type': padre:ModelParameters
                    padre:configures: padre:BaggingRegressor
              - '@schema':
                  '@id': padre:sklearn.ensemble.bagging.BaggingRegressor/verbose
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.bagging.BaggingRegressor/verbose
                  padre:implements: padre:BaggingRegressor/verbose
                  padre:optional: 'True'
                  padre:path: verbose
                  padre:value_default: '0'
                  padre:value_type: integer
                  rdfs:comment: Controls the verbosity of the tree building process.
                  rdfs:label: verbose
                algorithm:
                  '@schema':
                    '@id': padre:BaggingRegressor/verbose
                    '@type': padre:ModelParameters
                    padre:configures: padre:BaggingRegressor
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.ensemble.bagging.BaggingRegressor/jobs
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.ensemble.bagging.BaggingRegressor/jobs
                  padre:implements: padre:BaggingRegressor/jobs
                  padre:optional: 'True'
                  padre:path: n_jobs
                  padre:value_default: '1'
                  padre:value_type: integer
                  rdfs:comment: The number of jobs to use for the computation. If
                    -1 all CPUs are used.
                  rdfs:label: jobs
                algorithm:
                  '@schema':
                    '@id': padre:BaggingRegressor/jobs
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:BaggingRegressor
    :ensemble.forest.ExtraTreesClassifier:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.ensemble.forest.ExtraTreesClassifier
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:ExtraTreesClassifier
            rdfs:comment: null
            rdfs:label: extra-trees classifier
          algorithm:
            '@schema':
              '@id': padre:ExtraTreesClassifier
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: extra-trees classifier
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.ensemble.forest.ExtraTreesClassifier/num_estimators
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.forest.ExtraTreesClassifier/num_estimators
                  padre:implements: padre:ExtraTreesClassifier/num_estimators
                  padre:optional: 'True'
                  padre:path: n_estimators
                  padre:value_default: '10'
                  padre:value_type: integer
                  rdfs:comment: The number of trees in the forest.
                  rdfs:label: num_estimators
                algorithm:
                  '@schema':
                    '@id': padre:ExtraTreesClassifier/num_estimators
                    '@type': padre:ModelParameters
                    padre:configures: padre:ExtraTreesClassifier
              - '@schema':
                  '@id': padre:sklearn.ensemble.forest.ExtraTreesClassifier/split_quality
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.forest.ExtraTreesClassifier/split_quality
                  padre:implements: padre:ExtraTreesClassifier/split_quality
                  padre:optional: 'True'
                  padre:path: criterion
                  padre:value_default: '''gini'''
                  padre:value_type: '{''gini'', ''entropy''}'
                  rdfs:comment: The function to measure the quality of a split.
                  rdfs:label: split_quality
                algorithm:
                  '@schema':
                    '@id': padre:ExtraTreesClassifier/split_quality
                    '@type': padre:ModelParameters
                    padre:configures: padre:ExtraTreesClassifier
              - '@schema':
                  '@id': padre:sklearn.ensemble.forest.ExtraTreesClassifier/max_features
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.forest.ExtraTreesClassifier/max_features
                  padre:implements: padre:ExtraTreesClassifier/max_features
                  padre:optional: 'True'
                  padre:path: max_features
                  padre:value_default: '''auto'''
                  padre:value_type: '{integer, float, ''auto'', ''sqrt'', ''log2'',
                  None}'
                  rdfs:comment: The number of features to consider when looking
                    for the best split.
                  rdfs:label: max_features
                algorithm:
                  '@schema':
                    '@id': padre:ExtraTreesClassifier/max_features
                    '@type': padre:ModelParameters
                    padre:configures: padre:ExtraTreesClassifier
              - '@schema':
                  '@id': padre:sklearn.ensemble.forest.ExtraTreesClassifier/max_depth_tree
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.forest.ExtraTreesClassifier/max_depth_tree
                  padre:implements: padre:ExtraTreesClassifier/max_depth_tree
                  padre:optional: 'True'
                  padre:path: max_depth
                  padre:value_default: None
                  padre:value_type: '{integer, None}'
                  rdfs:comment: The maximum depth of the tree.
                  rdfs:label: max_depth_tree
                algorithm:
                  '@schema':
                    '@id': padre:ExtraTreesClassifier/max_depth_tree
                    '@type': padre:ModelParameters
                    padre:configures: padre:ExtraTreesClassifier
              - '@schema':
                  '@id': padre:sklearn.ensemble.forest.ExtraTreesClassifier/min_samples_split
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.forest.ExtraTreesClassifier/min_samples_split
                  padre:implements: padre:ExtraTreesClassifier/min_samples_split
                  padre:optional: 'True'
                  padre:path: min_samples_split
                  padre:value_default: '2'
                  padre:value_type: '{integer, float}'
                  rdfs:comment: The minimum number of samples required to split
                    an internal node.
                  rdfs:label: min_samples_split
                algorithm:
                  '@schema':
                    '@id': padre:ExtraTreesClassifier/min_samples_split
                    '@type': padre:ModelParameters
                    padre:configures: padre:ExtraTreesClassifier
              - '@schema':
                  '@id': padre:sklearn.ensemble.forest.ExtraTreesClassifier/min_samples_leaf
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.forest.ExtraTreesClassifier/min_samples_leaf
                  padre:implements: padre:ExtraTreesClassifier/min_samples_leaf
                  padre:optional: 'True'
                  padre:path: min_samples_leaf
                  padre:value_default: '1'
                  padre:value_type: '{integer, float}'
                  rdfs:comment: The minimum number of samples required to be at
                    a leaf node.
                  rdfs:label: min_samples_leaf
                algorithm:
                  '@schema':
                    '@id': padre:ExtraTreesClassifier/min_samples_leaf
                    '@type': padre:ModelParameters
                    padre:configures: padre:ExtraTreesClassifier
              - '@schema':
                  '@id': padre:sklearn.ensemble.forest.ExtraTreesClassifier/min_weight_fraction_leaf
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.forest.ExtraTreesClassifier/min_weight_fraction_leaf
                  padre:implements: padre:ExtraTreesClassifier/min_weight_fraction_leaf
                  padre:optional: 'True'
                  padre:path: min_weight_fraction_leaf
                  padre:value_default: '0.0'
                  padre:value_type: float
                  rdfs:comment: The minimum weighted fraction of the sum total of
                    weights (of all the input samples) required to be at a leaf node.
                  rdfs:label: min_weight_fraction_leaf
                algorithm:
                  '@schema':
                    '@id': padre:ExtraTreesClassifier/min_weight_fraction_leaf
                    '@type': padre:ModelParameters
                    padre:configures: padre:ExtraTreesClassifier
              - '@schema':
                  '@id': padre:sklearn.ensemble.forest.ExtraTreesClassifier/max_leaf_nodes
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.forest.ExtraTreesClassifier/max_leaf_nodes
                  padre:implements: padre:ExtraTreesClassifier/max_leaf_nodes
                  padre:optional: 'True'
                  padre:path: max_leaf_nodes
                  padre:value_default: None
                  padre:value_type: '{integer, None}'
                  rdfs:comment: Grow a tree with max_leaf_nodes in best-first fashion.
                  rdfs:label: max_leaf_nodes
                algorithm:
                  '@schema':
                    '@id': padre:ExtraTreesClassifier/max_leaf_nodes
                    '@type': padre:ModelParameters
                    padre:configures: padre:ExtraTreesClassifier
              - '@schema':
                  '@id': padre:sklearn.ensemble.forest.ExtraTreesClassifier/min_impurity_decrease
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.forest.ExtraTreesClassifier/min_impurity_decrease
                  padre:implements: padre:ExtraTreesClassifier/min_impurity_decrease
                  padre:optional: 'True'
                  padre:path: min_impurity_decrease
                  padre:value_default: '0.0'
                  padre:value_type: float
                  rdfs:comment: A node will be split if this split induces a decrease
                    of the impurity greater than or equal to this value.
                  rdfs:label: min_impurity_decrease
                algorithm:
                  '@schema':
                    '@id': padre:ExtraTreesClassifier/min_impurity_decrease
                    '@type': padre:ModelParameters
                    padre:configures: padre:ExtraTreesClassifier
              - '@schema':
                  '@id': padre:sklearn.ensemble.forest.ExtraTreesClassifier/bootstrap
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.forest.ExtraTreesClassifier/bootstrap
                  padre:implements: padre:ExtraTreesClassifier/bootstrap
                  padre:optional: 'True'
                  padre:path: bootstrap
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: Whether bootstrap samples are used when building
                    trees.
                  rdfs:label: bootstrap
                algorithm:
                  '@schema':
                    '@id': padre:ExtraTreesClassifier/bootstrap
                    '@type': padre:ModelParameters
                    padre:configures: padre:ExtraTreesClassifier
              - '@schema':
                  '@id': padre:sklearn.ensemble.forest.ExtraTreesClassifier/oob_samples
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.forest.ExtraTreesClassifier/oob_samples
                  padre:implements: padre:ExtraTreesClassifier/oob_samples
                  padre:optional: 'False'
                  padre:path: oob_score
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: Whether to use out-of-bag samples to estimate the
                    generalization accuracy.
                  rdfs:label: oob_samples
                algorithm:
                  '@schema':
                    '@id': padre:ExtraTreesClassifier/oob_samples
                    '@type': padre:ModelParameters
                    padre:configures: padre:ExtraTreesClassifier
              - '@schema':
                  '@id': padre:sklearn.ensemble.forest.ExtraTreesClassifier/random_state
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.forest.ExtraTreesClassifier/random_state
                  padre:implements: padre:ExtraTreesClassifier/random_state
                  padre:optional: 'True'
                  padre:path: random_state
                  padre:value_default: None
                  padre:value_type: '{integer, RandomState instance, None}'
                  rdfs:comment: The seed of the pseudo random number generator to
                    use when shuffling the data. If int, random_state is the seed used
                    by the random number generator; If RandomState instance, random_state
                    is the random number generator; If None, the random number generator
                    is the RandomState instance used by np.random.
                  rdfs:label: random_state
                algorithm:
                  '@schema':
                    '@id': padre:ExtraTreesClassifier/random_state
                    '@type': padre:ModelParameters
                    padre:configures: padre:ExtraTreesClassifier
              - '@schema':
                  '@id': padre:sklearn.ensemble.forest.ExtraTreesClassifier/verbose
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.forest.ExtraTreesClassifier/verbose
                  padre:implements: padre:ExtraTreesClassifier/verbose
                  padre:optional: 'True'
                  padre:path: verbose
                  padre:value_default: '0'
                  padre:value_type: integer
                  rdfs:comment: Controls the verbosity of the tree building process.
                  rdfs:label: verbose
                algorithm:
                  '@schema':
                    '@id': padre:ExtraTreesClassifier/verbose
                    '@type': padre:ModelParameters
                    padre:configures: padre:ExtraTreesClassifier
              - '@schema':
                  '@id': padre:sklearn.ensemble.forest.ExtraTreesClassifier/reuse_previous
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.forest.ExtraTreesClassifier/reuse_previous
                  padre:implements: padre:ExtraTreesClassifier/reuse_previous
                  padre:optional: 'True'
                  padre:path: warm_start
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: When set to True, reuse the solution of the previous
                    call to fit and add more estimators to the ensemble, otherwise,
                    just fit a whole new forest.
                  rdfs:label: reuse_previous
                algorithm:
                  '@schema':
                    '@id': padre:ExtraTreesClassifier/reuse_previous
                    '@type': padre:ModelParameters
                    padre:configures: padre:ExtraTreesClassifier
              - '@schema':
                  '@id': padre:sklearn.ensemble.forest.ExtraTreesClassifier/class_weight
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.forest.ExtraTreesClassifier/class_weight
                  padre:implements: padre:ExtraTreesClassifier/class_weight
                  padre:optional: 'True'
                  padre:path: class_weight
                  padre:value_default: None
                  padre:value_type: '{dict, ''balanced'', ''balanced_subsample'', None}'
                  rdfs:comment: Weights associated with classes.
                  rdfs:label: class_weight
                algorithm:
                  '@schema':
                    '@id': padre:ExtraTreesClassifier/class_weight
                    '@type': padre:ModelParameters
                    padre:configures: padre:ExtraTreesClassifier
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.ensemble.forest.ExtraTreesClassifier/jobs
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.ensemble.forest.ExtraTreesClassifier/jobs
                  padre:implements: padre:ExtraTreesClassifier/jobs
                  padre:optional: 'True'
                  padre:path: n_jobs
                  padre:value_default: '1'
                  padre:value_type: integer
                  rdfs:comment: The number of jobs to use for the computation. If
                    -1 all CPUs are used.
                  rdfs:label: jobs
                algorithm:
                  '@schema':
                    '@id': padre:ExtraTreesClassifier/jobs
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:ExtraTreesClassifier
    :ensemble.forest.ExtraTreesRegressor:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.ensemble.forest.ExtraTreesRegressor
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:ExtraTreesRegressor
            rdfs:comment: null
            rdfs:label: extra-trees regressor
          algorithm:
            '@schema':
              '@id': padre:ExtraTreesRegressor
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: extra-trees regressor
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.ensemble.forest.ExtraTreesRegressor/num_estimators
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.forest.ExtraTreesRegressor/num_estimators
                  padre:implements: padre:ExtraTreesRegressor/num_estimators
                  padre:optional: 'True'
                  padre:path: n_estimators
                  padre:value_default: '10'
                  padre:value_type: integer
                  rdfs:comment: The number of trees in the forest.
                  rdfs:label: num_estimators
                algorithm:
                  '@schema':
                    '@id': padre:ExtraTreesRegressor/num_estimators
                    '@type': padre:ModelParameters
                    padre:configures: padre:ExtraTreesRegressor
              - '@schema':
                  '@id': padre:sklearn.ensemble.forest.ExtraTreesRegressor/split_quality
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.forest.ExtraTreesRegressor/split_quality
                  padre:implements: padre:ExtraTreesRegressor/split_quality
                  padre:optional: 'True'
                  padre:path: criterion
                  padre:value_default: '''mse'''
                  padre:value_type: '{''mse'', ''mae''}'
                  rdfs:comment: The function to measure the quality of a split.
                  rdfs:label: split_quality
                algorithm:
                  '@schema':
                    '@id': padre:ExtraTreesRegressor/split_quality
                    '@type': padre:ModelParameters
                    padre:configures: padre:ExtraTreesRegressor
              - '@schema':
                  '@id': padre:sklearn.ensemble.forest.ExtraTreesRegressor/max_features
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.forest.ExtraTreesRegressor/max_features
                  padre:implements: padre:ExtraTreesRegressor/max_features
                  padre:optional: 'True'
                  padre:path: max_features
                  padre:value_default: '''auto'''
                  padre:value_type: '{integer, float, ''auto'', ''sqrt'', ''log2'',
                  None}'
                  rdfs:comment: The number of features to consider when looking
                    for the best split.
                  rdfs:label: max_features
                algorithm:
                  '@schema':
                    '@id': padre:ExtraTreesRegressor/max_features
                    '@type': padre:ModelParameters
                    padre:configures: padre:ExtraTreesRegressor
              - '@schema':
                  '@id': padre:sklearn.ensemble.forest.ExtraTreesRegressor/max_depth_tree
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.forest.ExtraTreesRegressor/max_depth_tree
                  padre:implements: padre:ExtraTreesRegressor/max_depth_tree
                  padre:optional: 'True'
                  padre:path: max_depth
                  padre:value_default: None
                  padre:value_type: '{integer, None}'
                  rdfs:comment: The maximum depth of the tree.
                  rdfs:label: max_depth_tree
                algorithm:
                  '@schema':
                    '@id': padre:ExtraTreesRegressor/max_depth_tree
                    '@type': padre:ModelParameters
                    padre:configures: padre:ExtraTreesRegressor
              - '@schema':
                  '@id': padre:sklearn.ensemble.forest.ExtraTreesRegressor/min_samples_split
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.forest.ExtraTreesRegressor/min_samples_split
                  padre:implements: padre:ExtraTreesRegressor/min_samples_split
                  padre:optional: 'True'
                  padre:path: min_samples_split
                  padre:value_default: '2'
                  padre:value_type: '{integer, float}'
                  rdfs:comment: The minimum number of samples required to split
                    an internal node.
                  rdfs:label: min_samples_split
                algorithm:
                  '@schema':
                    '@id': padre:ExtraTreesRegressor/min_samples_split
                    '@type': padre:ModelParameters
                    padre:configures: padre:ExtraTreesRegressor
              - '@schema':
                  '@id': padre:sklearn.ensemble.forest.ExtraTreesRegressor/min_samples_leaf
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.forest.ExtraTreesRegressor/min_samples_leaf
                  padre:implements: padre:ExtraTreesRegressor/min_samples_leaf
                  padre:optional: 'True'
                  padre:path: min_samples_leaf
                  padre:value_default: '1'
                  padre:value_type: '{integer, float}'
                  rdfs:comment: The minimum number of samples required to be at
                    a leaf node.
                  rdfs:label: min_samples_leaf
                algorithm:
                  '@schema':
                    '@id': padre:ExtraTreesRegressor/min_samples_leaf
                    '@type': padre:ModelParameters
                    padre:configures: padre:ExtraTreesRegressor
              - '@schema':
                  '@id': padre:sklearn.ensemble.forest.ExtraTreesRegressor/min_weight_fraction_leaf
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.forest.ExtraTreesRegressor/min_weight_fraction_leaf
                  padre:implements: padre:ExtraTreesRegressor/min_weight_fraction_leaf
                  padre:optional: 'True'
                  padre:path: min_weight_fraction_leaf
                  padre:value_default: '0.0'
                  padre:value_type: float
                  rdfs:comment: The minimum weighted fraction of the sum total of
                    weights (of all the input samples) required to be at a leaf node.
                  rdfs:label: min_weight_fraction_leaf
                algorithm:
                  '@schema':
                    '@id': padre:ExtraTreesRegressor/min_weight_fraction_leaf
                    '@type': padre:ModelParameters
                    padre:configures: padre:ExtraTreesRegressor
              - '@schema':
                  '@id': padre:sklearn.ensemble.forest.ExtraTreesRegressor/max_leaf_nodes
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.forest.ExtraTreesRegressor/max_leaf_nodes
                  padre:implements: padre:ExtraTreesRegressor/max_leaf_nodes
                  padre:optional: 'True'
                  padre:path: max_leaf_nodes
                  padre:value_default: None
                  padre:value_type: '{integer, None}'
                  rdfs:comment: Grow a tree with max_leaf_nodes in best-first fashion.
                  rdfs:label: max_leaf_nodes
                algorithm:
                  '@schema':
                    '@id': padre:ExtraTreesRegressor/max_leaf_nodes
                    '@type': padre:ModelParameters
                    padre:configures: padre:ExtraTreesRegressor
              - '@schema':
                  '@id': padre:sklearn.ensemble.forest.ExtraTreesRegressor/min_impurity_decrease
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.forest.ExtraTreesRegressor/min_impurity_decrease
                  padre:implements: padre:ExtraTreesRegressor/min_impurity_decrease
                  padre:optional: 'True'
                  padre:path: min_impurity_decrease
                  padre:value_default: '0.0'
                  padre:value_type: float
                  rdfs:comment: A node will be split if this split induces a decrease
                    of the impurity greater than or equal to this value.
                  rdfs:label: min_impurity_decrease
                algorithm:
                  '@schema':
                    '@id': padre:ExtraTreesRegressor/min_impurity_decrease
                    '@type': padre:ModelParameters
                    padre:configures: padre:ExtraTreesRegressor
              - '@schema':
                  '@id': padre:sklearn.ensemble.forest.ExtraTreesRegressor/bootstrap
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.forest.ExtraTreesRegressor/bootstrap
                  padre:implements: padre:ExtraTreesRegressor/bootstrap
                  padre:optional: 'True'
                  padre:path: bootstrap
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: Whether bootstrap samples are used when building
                    trees.
                  rdfs:label: bootstrap
                algorithm:
                  '@schema':
                    '@id': padre:ExtraTreesRegressor/bootstrap
                    '@type': padre:ModelParameters
                    padre:configures: padre:ExtraTreesRegressor
              - '@schema':
                  '@id': padre:sklearn.ensemble.forest.ExtraTreesRegressor/oob_samples
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.forest.ExtraTreesRegressor/oob_samples
                  padre:implements: padre:ExtraTreesRegressor/oob_samples
                  padre:optional: 'False'
                  padre:path: oob_score
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: Whether to use out-of-bag samples to estimate the
                    R^2 on unseen data.
                  rdfs:label: oob_samples
                algorithm:
                  '@schema':
                    '@id': padre:ExtraTreesRegressor/oob_samples
                    '@type': padre:ModelParameters
                    padre:configures: padre:ExtraTreesRegressor
              - '@schema':
                  '@id': padre:sklearn.ensemble.forest.ExtraTreesRegressor/verbose
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.forest.ExtraTreesRegressor/verbose
                  padre:implements: padre:ExtraTreesRegressor/verbose
                  padre:optional: 'True'
                  padre:path: verbose
                  padre:value_default: '0'
                  padre:value_type: integer
                  rdfs:comment: Controls the verbosity of the tree building process.
                  rdfs:label: verbose
                algorithm:
                  '@schema':
                    '@id': padre:ExtraTreesRegressor/verbose
                    '@type': padre:ModelParameters
                    padre:configures: padre:ExtraTreesRegressor
              - '@schema':
                  '@id': padre:sklearn.ensemble.forest.ExtraTreesRegressor/reuse_previous
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.forest.ExtraTreesRegressor/reuse_previous
                  padre:implements: padre:ExtraTreesRegressor/reuse_previous
                  padre:optional: 'True'
                  padre:path: warm_start
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: When set to True, reuse the solution of the previous
                    call to fit and add more estimators to the ensemble, otherwise,
                    just fit a whole new forest.
                  rdfs:label: reuse_previous
                algorithm:
                  '@schema':
                    '@id': padre:ExtraTreesRegressor/reuse_previous
                    '@type': padre:ModelParameters
                    padre:configures: padre:ExtraTreesRegressor
              - '@schema':
                  '@id': padre:sklearn.ensemble.forest.ExtraTreesRegressor/random_state
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.forest.ExtraTreesRegressor/random_state
                  padre:implements: padre:ExtraTreesRegressor/random_state
                  padre:optional: 'True'
                  padre:path: random_state
                  padre:value_default: None
                  padre:value_type: '{integer, RandomState instance, None}'
                  rdfs:comment: The seed of the pseudo random number generator to
                    use when shuffling the data. If int, random_state is the seed used
                    by the random number generator; If RandomState instance, random_state
                    is the random number generator; If None, the random number generator
                    is the RandomState instance used by np.random.
                  rdfs:label: random_state
                algorithm:
                  '@schema':
                    '@id': padre:ExtraTreesRegressor/random_state
                    '@type': padre:ModelParameters
                    padre:configures: padre:ExtraTreesRegressor
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.ensemble.forest.ExtraTreesRegressor/jobs
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.ensemble.forest.ExtraTreesRegressor/jobs
                  padre:implements: padre:ExtraTreesRegressor/jobs
                  padre:optional: 'True'
                  padre:path: n_jobs
                  padre:value_default: '1'
                  padre:value_type: integer
                  rdfs:comment: The number of jobs to use for the computation. If
                    -1 all CPUs are used.
                  rdfs:label: jobs
                algorithm:
                  '@schema':
                    '@id': padre:ExtraTreesRegressor/jobs
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:ExtraTreesRegressor
    :ensemble.forest.RandomForestClassifier:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.ensemble.forest.RandomForestClassifier
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:RandomForestClassifier
            rdfs:comment: null
            rdfs:label: random forest classifier
          algorithm:
            '@schema':
              '@id': padre:RandomForestClassifier
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: random forest classifier
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.ensemble.forest.RandomForestClassifier/num_estimators
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.forest.RandomForestClassifier/num_estimators
                  padre:implements: padre:RandomForestClassifier/num_estimators
                  padre:optional: 'True'
                  padre:path: n_estimators
                  padre:value_default: '10'
                  padre:value_type: integer
                  rdfs:comment: The number of trees in the forest.
                  rdfs:label: num_estimators
                algorithm:
                  '@schema':
                    '@id': padre:RandomForestClassifier/num_estimators
                    '@type': padre:ModelParameters
                    padre:configures: padre:RandomForestClassifier
              - '@schema':
                  '@id': padre:sklearn.ensemble.forest.RandomForestClassifier/split_quality
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.forest.RandomForestClassifier/split_quality
                  padre:implements: padre:RandomForestClassifier/split_quality
                  padre:optional: 'True'
                  padre:path: criterion
                  padre:value_default: '''gini'''
                  padre:value_type: '{''gini'', ''entropy''}'
                  rdfs:comment: The function to measure the quality of a split.
                  rdfs:label: split_quality
                algorithm:
                  '@schema':
                    '@id': padre:RandomForestClassifier/split_quality
                    '@type': padre:ModelParameters
                    padre:configures: padre:RandomForestClassifier
              - '@schema':
                  '@id': padre:sklearn.ensemble.forest.RandomForestClassifier/max_features
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.forest.RandomForestClassifier/max_features
                  padre:implements: padre:RandomForestClassifier/max_features
                  padre:optional: 'True'
                  padre:path: max_features
                  padre:value_default: '''auto'''
                  padre:value_type: '{integer, float, ''auto'', ''sqrt'', ''log2'',
                  None}'
                  rdfs:comment: The number of features to consider when looking
                    for the best split.
                  rdfs:label: max_features
                algorithm:
                  '@schema':
                    '@id': padre:RandomForestClassifier/max_features
                    '@type': padre:ModelParameters
                    padre:configures: padre:RandomForestClassifier
              - '@schema':
                  '@id': padre:sklearn.ensemble.forest.RandomForestClassifier/max_depth_tree
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.forest.RandomForestClassifier/max_depth_tree
                  padre:implements: padre:RandomForestClassifier/max_depth_tree
                  padre:optional: 'True'
                  padre:path: max_depth
                  padre:value_default: None
                  padre:value_type: '{integer, None}'
                  rdfs:comment: The maximum depth of the tree.
                  rdfs:label: max_depth_tree
                algorithm:
                  '@schema':
                    '@id': padre:RandomForestClassifier/max_depth_tree
                    '@type': padre:ModelParameters
                    padre:configures: padre:RandomForestClassifier
              - '@schema':
                  '@id': padre:sklearn.ensemble.forest.RandomForestClassifier/min_samples_split
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.forest.RandomForestClassifier/min_samples_split
                  padre:implements: padre:RandomForestClassifier/min_samples_split
                  padre:optional: 'True'
                  padre:path: min_samples_split
                  padre:value_default: '2'
                  padre:value_type: '{integer, float}'
                  rdfs:comment: The minimum number of samples required to split
                    an internal node.
                  rdfs:label: min_samples_split
                algorithm:
                  '@schema':
                    '@id': padre:RandomForestClassifier/min_samples_split
                    '@type': padre:ModelParameters
                    padre:configures: padre:RandomForestClassifier
              - '@schema':
                  '@id': padre:sklearn.ensemble.forest.RandomForestClassifier/min_samples_leaf
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.forest.RandomForestClassifier/min_samples_leaf
                  padre:implements: padre:RandomForestClassifier/min_samples_leaf
                  padre:optional: 'True'
                  padre:path: min_samples_leaf
                  padre:value_default: '1'
                  padre:value_type: '{integer, float}'
                  rdfs:comment: The minimum number of samples required to be at
                    a leaf node.
                  rdfs:label: min_samples_leaf
                algorithm:
                  '@schema':
                    '@id': padre:RandomForestClassifier/min_samples_leaf
                    '@type': padre:ModelParameters
                    padre:configures: padre:RandomForestClassifier
              - '@schema':
                  '@id': padre:sklearn.ensemble.forest.RandomForestClassifier/min_weight_fraction_leaf
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.forest.RandomForestClassifier/min_weight_fraction_leaf
                  padre:implements: padre:RandomForestClassifier/min_weight_fraction_leaf
                  padre:optional: 'True'
                  padre:path: min_weight_fraction_leaf
                  padre:value_default: '0.0'
                  padre:value_type: float
                  rdfs:comment: The minimum weighted fraction of the sum total of
                    weights (of all the input samples) required to be at a leaf node.
                  rdfs:label: min_weight_fraction_leaf
                algorithm:
                  '@schema':
                    '@id': padre:RandomForestClassifier/min_weight_fraction_leaf
                    '@type': padre:ModelParameters
                    padre:configures: padre:RandomForestClassifier
              - '@schema':
                  '@id': padre:sklearn.ensemble.forest.RandomForestClassifier/max_leaf_nodes
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.forest.RandomForestClassifier/max_leaf_nodes
                  padre:implements: padre:RandomForestClassifier/max_leaf_nodes
                  padre:optional: 'True'
                  padre:path: max_leaf_nodes
                  padre:value_default: None
                  padre:value_type: '{integer, None}'
                  rdfs:comment: Grow a tree with max_leaf_nodes in best-first fashion.
                  rdfs:label: max_leaf_nodes
                algorithm:
                  '@schema':
                    '@id': padre:RandomForestClassifier/max_leaf_nodes
                    '@type': padre:ModelParameters
                    padre:configures: padre:RandomForestClassifier
              - '@schema':
                  '@id': padre:sklearn.ensemble.forest.RandomForestClassifier/min_impurity_decrease
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.forest.RandomForestClassifier/min_impurity_decrease
                  padre:implements: padre:RandomForestClassifier/min_impurity_decrease
                  padre:optional: 'True'
                  padre:path: min_impurity_decrease
                  padre:value_default: '0.0'
                  padre:value_type: float
                  rdfs:comment: A node will be split if this split induces a decrease
                    of the impurity greater than or equal to this value.
                  rdfs:label: min_impurity_decrease
                algorithm:
                  '@schema':
                    '@id': padre:RandomForestClassifier/min_impurity_decrease
                    '@type': padre:ModelParameters
                    padre:configures: padre:RandomForestClassifier
              - '@schema':
                  '@id': padre:sklearn.ensemble.forest.RandomForestClassifier/bootstrap
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.forest.RandomForestClassifier/bootstrap
                  padre:implements: padre:RandomForestClassifier/bootstrap
                  padre:optional: 'True'
                  padre:path: bootstrap
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: Whether bootstrap samples are used when building
                    trees.
                  rdfs:label: bootstrap
                algorithm:
                  '@schema':
                    '@id': padre:RandomForestClassifier/bootstrap
                    '@type': padre:ModelParameters
                    padre:configures: padre:RandomForestClassifier
              - '@schema':
                  '@id': padre:sklearn.ensemble.forest.RandomForestClassifier/oob_samples
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.forest.RandomForestClassifier/oob_samples
                  padre:implements: padre:RandomForestClassifier/oob_samples
                  padre:optional: 'False'
                  padre:path: oob_score
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: Whether to use out-of-bag samples to estimate the
                    generalization accuracy.
                  rdfs:label: oob_samples
                algorithm:
                  '@schema':
                    '@id': padre:RandomForestClassifier/oob_samples
                    '@type': padre:ModelParameters
                    padre:configures: padre:RandomForestClassifier
              - '@schema':
                  '@id': padre:sklearn.ensemble.forest.RandomForestClassifier/random_state
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.forest.RandomForestClassifier/random_state
                  padre:implements: padre:RandomForestClassifier/random_state
                  padre:optional: 'True'
                  padre:path: random_state
                  padre:value_default: None
                  padre:value_type: '{integer, RandomState instance, None}'
                  rdfs:comment: The seed of the pseudo random number generator to
                    use when shuffling the data. If int, random_state is the seed used
                    by the random number generator; If RandomState instance, random_state
                    is the random number generator; If None, the random number generator
                    is the RandomState instance used by np.random.
                  rdfs:label: random_state
                algorithm:
                  '@schema':
                    '@id': padre:RandomForestClassifier/random_state
                    '@type': padre:ModelParameters
                    padre:configures: padre:RandomForestClassifier
              - '@schema':
                  '@id': padre:sklearn.ensemble.forest.RandomForestClassifier/verbose
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.forest.RandomForestClassifier/verbose
                  padre:implements: padre:RandomForestClassifier/verbose
                  padre:optional: 'True'
                  padre:path: verbose
                  padre:value_default: '0'
                  padre:value_type: integer
                  rdfs:comment: Controls the verbosity of the tree building process.
                  rdfs:label: verbose
                algorithm:
                  '@schema':
                    '@id': padre:RandomForestClassifier/verbose
                    '@type': padre:ModelParameters
                    padre:configures: padre:RandomForestClassifier
              - '@schema':
                  '@id': padre:sklearn.ensemble.forest.RandomForestClassifier/reuse_previous
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.forest.RandomForestClassifier/reuse_previous
                  padre:implements: padre:RandomForestClassifier/reuse_previous
                  padre:optional: 'True'
                  padre:path: warm_start
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: When set to True, reuse the solution of the previous
                    call to fit and add more estimators to the ensemble, otherwise,
                    just fit a whole new forest.
                  rdfs:label: reuse_previous
                algorithm:
                  '@schema':
                    '@id': padre:RandomForestClassifier/reuse_previous
                    '@type': padre:ModelParameters
                    padre:configures: padre:RandomForestClassifier
              - '@schema':
                  '@id': padre:sklearn.ensemble.forest.RandomForestClassifier/class_weight
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.forest.RandomForestClassifier/class_weight
                  padre:implements: padre:RandomForestClassifier/class_weight
                  padre:optional: 'False'
                  padre:path: class_weight
                  padre:value_default: None
                  padre:value_type: '{dict, ''balanced'', None}'
                  rdfs:comment: Weights associated with classes.
                  rdfs:label: class_weight
                algorithm:
                  '@schema':
                    '@id': padre:RandomForestClassifier/class_weight
                    '@type': padre:ModelParameters
                    padre:configures: padre:RandomForestClassifier
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.ensemble.forest.RandomForestClassifier/jobs
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.ensemble.forest.RandomForestClassifier/jobs
                  padre:implements: padre:RandomForestClassifier/jobs
                  padre:optional: 'True'
                  padre:path: n_jobs
                  padre:value_default: '1'
                  padre:value_type: integer
                  rdfs:comment: The number of jobs to use for the computation. If
                    -1 all CPUs are used.
                  rdfs:label: jobs
                algorithm:
                  '@schema':
                    '@id': padre:RandomForestClassifier/jobs
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:RandomForestClassifier
    :ensemble.forest.RandomForestRegressor:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.ensemble.forest.RandomForestRegressor
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:RandomForestRegressor
            rdfs:comment: null
            rdfs:label: random forest regressor
          algorithm:
            '@schema':
              '@id': padre:RandomForestRegressor
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: random forest regressor
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.ensemble.forest.RandomForestRegressor/num_estimators
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.forest.RandomForestRegressor/num_estimators
                  padre:implements: padre:RandomForestRegressor/num_estimators
                  padre:optional: 'True'
                  padre:path: n_estimators
                  padre:value_default: '10'
                  padre:value_type: integer
                  rdfs:comment: The number of trees in the forest.
                  rdfs:label: num_estimators
                algorithm:
                  '@schema':
                    '@id': padre:RandomForestRegressor/num_estimators
                    '@type': padre:ModelParameters
                    padre:configures: padre:RandomForestRegressor
              - '@schema':
                  '@id': padre:sklearn.ensemble.forest.RandomForestRegressor/split_quality
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.forest.RandomForestRegressor/split_quality
                  padre:implements: padre:RandomForestRegressor/split_quality
                  padre:optional: 'True'
                  padre:path: criterion
                  padre:value_default: '''mse'''
                  padre:value_type: '{''mse'', ''mae''}'
                  rdfs:comment: The function to measure the quality of a split.
                  rdfs:label: split_quality
                algorithm:
                  '@schema':
                    '@id': padre:RandomForestRegressor/split_quality
                    '@type': padre:ModelParameters
                    padre:configures: padre:RandomForestRegressor
              - '@schema':
                  '@id': padre:sklearn.ensemble.forest.RandomForestRegressor/max_features
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.forest.RandomForestRegressor/max_features
                  padre:implements: padre:RandomForestRegressor/max_features
                  padre:optional: 'True'
                  padre:path: max_features
                  padre:value_default: '''auto'''
                  padre:value_type: '{integer, float, ''auto'', ''sqrt'', ''log2'',
                  None}'
                  rdfs:comment: The number of features to consider when looking
                    for the best split.
                  rdfs:label: max_features
                algorithm:
                  '@schema':
                    '@id': padre:RandomForestRegressor/max_features
                    '@type': padre:ModelParameters
                    padre:configures: padre:RandomForestRegressor
              - '@schema':
                  '@id': padre:sklearn.ensemble.forest.RandomForestRegressor/max_depth_tree
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.forest.RandomForestRegressor/max_depth_tree
                  padre:implements: padre:RandomForestRegressor/max_depth_tree
                  padre:optional: 'True'
                  padre:path: max_depth
                  padre:value_default: None
                  padre:value_type: '{integer, None}'
                  rdfs:comment: The maximum depth of the tree.
                  rdfs:label: max_depth_tree
                algorithm:
                  '@schema':
                    '@id': padre:RandomForestRegressor/max_depth_tree
                    '@type': padre:ModelParameters
                    padre:configures: padre:RandomForestRegressor
              - '@schema':
                  '@id': padre:sklearn.ensemble.forest.RandomForestRegressor/min_samples_split
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.forest.RandomForestRegressor/min_samples_split
                  padre:implements: padre:RandomForestRegressor/min_samples_split
                  padre:optional: 'True'
                  padre:path: min_samples_split
                  padre:value_default: '2'
                  padre:value_type: '{integer, float}'
                  rdfs:comment: The minimum number of samples required to split
                    an internal node.
                  rdfs:label: min_samples_split
                algorithm:
                  '@schema':
                    '@id': padre:RandomForestRegressor/min_samples_split
                    '@type': padre:ModelParameters
                    padre:configures: padre:RandomForestRegressor
              - '@schema':
                  '@id': padre:sklearn.ensemble.forest.RandomForestRegressor/min_samples_leaf
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.forest.RandomForestRegressor/min_samples_leaf
                  padre:implements: padre:RandomForestRegressor/min_samples_leaf
                  padre:optional: 'True'
                  padre:path: min_samples_leaf
                  padre:value_default: '1'
                  padre:value_type: '{integer, float}'
                  rdfs:comment: The minimum number of samples required to be at
                    a leaf node.
                  rdfs:label: min_samples_leaf
                algorithm:
                  '@schema':
                    '@id': padre:RandomForestRegressor/min_samples_leaf
                    '@type': padre:ModelParameters
                    padre:configures: padre:RandomForestRegressor
              - '@schema':
                  '@id': padre:sklearn.ensemble.forest.RandomForestRegressor/min_weight_fraction_leaf
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.forest.RandomForestRegressor/min_weight_fraction_leaf
                  padre:implements: padre:RandomForestRegressor/min_weight_fraction_leaf
                  padre:optional: 'True'
                  padre:path: min_weight_fraction_leaf
                  padre:value_default: '0.0'
                  padre:value_type: float
                  rdfs:comment: The minimum weighted fraction of the sum total of
                    weights (of all the input samples) required to be at a leaf node.
                  rdfs:label: min_weight_fraction_leaf
                algorithm:
                  '@schema':
                    '@id': padre:RandomForestRegressor/min_weight_fraction_leaf
                    '@type': padre:ModelParameters
                    padre:configures: padre:RandomForestRegressor
              - '@schema':
                  '@id': padre:sklearn.ensemble.forest.RandomForestRegressor/max_leaf_nodes
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.forest.RandomForestRegressor/max_leaf_nodes
                  padre:implements: padre:RandomForestRegressor/max_leaf_nodes
                  padre:optional: 'True'
                  padre:path: max_leaf_nodes
                  padre:value_default: None
                  padre:value_type: '{integer, None}'
                  rdfs:comment: Grow a tree with max_leaf_nodes in best-first fashion.
                  rdfs:label: max_leaf_nodes
                algorithm:
                  '@schema':
                    '@id': padre:RandomForestRegressor/max_leaf_nodes
                    '@type': padre:ModelParameters
                    padre:configures: padre:RandomForestRegressor
              - '@schema':
                  '@id': padre:sklearn.ensemble.forest.RandomForestRegressor/min_impurity_decrease
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.forest.RandomForestRegressor/min_impurity_decrease
                  padre:implements: padre:RandomForestRegressor/min_impurity_decrease
                  padre:optional: 'True'
                  padre:path: min_impurity_decrease
                  padre:value_default: '0.0'
                  padre:value_type: float
                  rdfs:comment: A node will be split if this split induces a decrease
                    of the impurity greater than or equal to this value.
                  rdfs:label: min_impurity_decrease
                algorithm:
                  '@schema':
                    '@id': padre:RandomForestRegressor/min_impurity_decrease
                    '@type': padre:ModelParameters
                    padre:configures: padre:RandomForestRegressor
              - '@schema':
                  '@id': padre:sklearn.ensemble.forest.RandomForestRegressor/bootstrap
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.forest.RandomForestRegressor/bootstrap
                  padre:implements: padre:RandomForestRegressor/bootstrap
                  padre:optional: 'True'
                  padre:path: bootstrap
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: Whether bootstrap samples are used when building
                    trees.
                  rdfs:label: bootstrap
                algorithm:
                  '@schema':
                    '@id': padre:RandomForestRegressor/bootstrap
                    '@type': padre:ModelParameters
                    padre:configures: padre:RandomForestRegressor
              - '@schema':
                  '@id': padre:sklearn.ensemble.forest.RandomForestRegressor/oob_samples
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.forest.RandomForestRegressor/oob_samples
                  padre:implements: padre:RandomForestRegressor/oob_samples
                  padre:optional: 'True'
                  padre:path: oob_score
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: Whether to use out-of-bag samples to estimate the
                    R^2 on unseen data.
                  rdfs:label: oob_samples
                algorithm:
                  '@schema':
                    '@id': padre:RandomForestRegressor/oob_samples
                    '@type': padre:ModelParameters
                    padre:configures: padre:RandomForestRegressor
              - '@schema':
                  '@id': padre:sklearn.ensemble.forest.RandomForestRegressor/random_state
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.forest.RandomForestRegressor/random_state
                  padre:implements: padre:RandomForestRegressor/random_state
                  padre:optional: 'True'
                  padre:path: random_state
                  padre:value_default: None
                  padre:value_type: '{integer, RandomState instance, None}'
                  rdfs:comment: The seed of the pseudo random number generator to
                    use when shuffling the data. If int, random_state is the seed used
                    by the random number generator; If RandomState instance, random_state
                    is the random number generator; If None, the random number generator
                    is the RandomState instance used by np.random.
                  rdfs:label: random_state
                algorithm:
                  '@schema':
                    '@id': padre:RandomForestRegressor/random_state
                    '@type': padre:ModelParameters
                    padre:configures: padre:RandomForestRegressor
              - '@schema':
                  '@id': padre:sklearn.ensemble.forest.RandomForestRegressor/verbose
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.forest.RandomForestRegressor/verbose
                  padre:implements: padre:RandomForestRegressor/verbose
                  padre:optional: 'True'
                  padre:path: verbose
                  padre:value_default: '0'
                  padre:value_type: integer
                  rdfs:comment: Controls the verbosity of the tree building process.
                  rdfs:label: verbose
                algorithm:
                  '@schema':
                    '@id': padre:RandomForestRegressor/verbose
                    '@type': padre:ModelParameters
                    padre:configures: padre:RandomForestRegressor
              - '@schema':
                  '@id': padre:sklearn.ensemble.forest.RandomForestRegressor/reuse_previous
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.forest.RandomForestRegressor/reuse_previous
                  padre:implements: padre:RandomForestRegressor/reuse_previous
                  padre:optional: 'True'
                  padre:path: warm_start
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: When set to True, reuse the solution of the previous
                    call to fit and add more estimators to the ensemble, otherwise,
                    just fit a whole new forest.
                  rdfs:label: reuse_previous
                algorithm:
                  '@schema':
                    '@id': padre:RandomForestRegressor/reuse_previous
                    '@type': padre:ModelParameters
                    padre:configures: padre:RandomForestRegressor
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.ensemble.forest.RandomForestRegressor/jobs
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.ensemble.forest.RandomForestRegressor/jobs
                  padre:implements: padre:RandomForestRegressor/jobs
                  padre:optional: 'True'
                  padre:path: n_jobs
                  padre:value_default: '1'
                  padre:value_type: integer
                  rdfs:comment: The number of jobs to use for the computation. If
                    -1 all CPUs are used.
                  rdfs:label: jobs
                algorithm:
                  '@schema':
                    '@id': padre:RandomForestRegressor/jobs
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:RandomForestRegressor
    :ensemble.forest.RandomTreesEmbedding:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.ensemble.forest.RandomTreesEmbedding
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:RandomTreesEmbedding
            rdfs:comment: null
            rdfs:label: random trees ensemble
          algorithm:
            '@schema':
              '@id': padre:RandomTreesEmbedding
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: random trees ensemble
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.ensemble.forest.RandomTreesEmbedding/num_estimators
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.forest.RandomTreesEmbedding/num_estimators
                  padre:implements: padre:RandomTreesEmbedding/num_estimators
                  padre:optional: 'True'
                  padre:path: n_estimators
                  padre:value_default: '10'
                  padre:value_type: integer
                  rdfs:comment: The number of trees in the forest.
                  rdfs:label: num_estimators
                algorithm:
                  '@schema':
                    '@id': padre:RandomTreesEmbedding/num_estimators
                    '@type': padre:ModelParameters
                    padre:configures: padre:RandomTreesEmbedding
              - '@schema':
                  '@id': padre:sklearn.ensemble.forest.RandomTreesEmbedding/max_depth_tree
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.forest.RandomTreesEmbedding/max_depth_tree
                  padre:implements: padre:RandomTreesEmbedding/max_depth_tree
                  padre:optional: 'True'
                  padre:path: max_depth
                  padre:value_default: None
                  padre:value_type: '{integer, None}'
                  rdfs:comment: The maximum depth of the tree.
                  rdfs:label: max_depth_tree
                algorithm:
                  '@schema':
                    '@id': padre:RandomTreesEmbedding/max_depth_tree
                    '@type': padre:ModelParameters
                    padre:configures: padre:RandomTreesEmbedding
              - '@schema':
                  '@id': padre:sklearn.ensemble.forest.RandomTreesEmbedding/min_samples_split
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.forest.RandomTreesEmbedding/min_samples_split
                  padre:implements: padre:RandomTreesEmbedding/min_samples_split
                  padre:optional: 'True'
                  padre:path: min_samples_split
                  padre:value_default: '2'
                  padre:value_type: '{integer, float}'
                  rdfs:comment: The minimum number of samples required to split
                    an internal node.
                  rdfs:label: min_samples_split
                algorithm:
                  '@schema':
                    '@id': padre:RandomTreesEmbedding/min_samples_split
                    '@type': padre:ModelParameters
                    padre:configures: padre:RandomTreesEmbedding
              - '@schema':
                  '@id': padre:sklearn.ensemble.forest.RandomTreesEmbedding/min_samples_leaf
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.forest.RandomTreesEmbedding/min_samples_leaf
                  padre:implements: padre:RandomTreesEmbedding/min_samples_leaf
                  padre:optional: 'True'
                  padre:path: min_samples_leaf
                  padre:value_default: '1'
                  padre:value_type: '{integer, float}'
                  rdfs:comment: The minimum number of samples required to be at
                    a leaf node.
                  rdfs:label: min_samples_leaf
                algorithm:
                  '@schema':
                    '@id': padre:RandomTreesEmbedding/min_samples_leaf
                    '@type': padre:ModelParameters
                    padre:configures: padre:RandomTreesEmbedding
              - '@schema':
                  '@id': padre:sklearn.ensemble.forest.RandomTreesEmbedding/min_weight_fraction_leaf
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.forest.RandomTreesEmbedding/min_weight_fraction_leaf
                  padre:implements: padre:RandomTreesEmbedding/min_weight_fraction_leaf
                  padre:optional: 'True'
                  padre:path: min_weight_fraction_leaf
                  padre:value_default: '0.0'
                  padre:value_type: float
                  rdfs:comment: The minimum weighted fraction of the sum total of
                    weights (of all the input samples) required to be at a leaf node.
                  rdfs:label: min_weight_fraction_leaf
                algorithm:
                  '@schema':
                    '@id': padre:RandomTreesEmbedding/min_weight_fraction_leaf
                    '@type': padre:ModelParameters
                    padre:configures: padre:RandomTreesEmbedding
              - '@schema':
                  '@id': padre:sklearn.ensemble.forest.RandomTreesEmbedding/max_leaf_nodes
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.forest.RandomTreesEmbedding/max_leaf_nodes
                  padre:implements: padre:RandomTreesEmbedding/max_leaf_nodes
                  padre:optional: 'True'
                  padre:path: max_leaf_nodes
                  padre:value_default: None
                  padre:value_type: '{integer, None}'
                  rdfs:comment: Grow a tree with max_leaf_nodes in best-first fashion.
                  rdfs:label: max_leaf_nodes
                algorithm:
                  '@schema':
                    '@id': padre:RandomTreesEmbedding/max_leaf_nodes
                    '@type': padre:ModelParameters
                    padre:configures: padre:RandomTreesEmbedding
              - '@schema':
                  '@id': padre:sklearn.ensemble.forest.RandomTreesEmbedding/min_impurity_decrease
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.forest.RandomTreesEmbedding/min_impurity_decrease
                  padre:implements: padre:RandomTreesEmbedding/min_impurity_decrease
                  padre:optional: 'True'
                  padre:path: min_impurity_decrease
                  padre:value_default: '0.0'
                  padre:value_type: float
                  rdfs:comment: A node will be split if this split induces a decrease
                    of the impurity greater than or equal to this value.
                  rdfs:label: min_impurity_decrease
                algorithm:
                  '@schema':
                    '@id': padre:RandomTreesEmbedding/min_impurity_decrease
                    '@type': padre:ModelParameters
                    padre:configures: padre:RandomTreesEmbedding
              - '@schema':
                  '@id': padre:sklearn.ensemble.forest.RandomTreesEmbedding/bootstrap
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.forest.RandomTreesEmbedding/bootstrap
                  padre:implements: padre:RandomTreesEmbedding/bootstrap
                  padre:optional: 'True'
                  padre:path: bootstrap
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: Whether bootstrap samples are used when building
                    trees.
                  rdfs:label: bootstrap
                algorithm:
                  '@schema':
                    '@id': padre:RandomTreesEmbedding/bootstrap
                    '@type': padre:ModelParameters
                    padre:configures: padre:RandomTreesEmbedding
              - '@schema':
                  '@id': padre:sklearn.ensemble.forest.RandomTreesEmbedding/sparse_output
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.forest.RandomTreesEmbedding/sparse_output
                  padre:implements: padre:RandomTreesEmbedding/sparse_output
                  padre:optional: 'True'
                  padre:path: sparse_output
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: Whether or not to return a sparse CSR matrix, as
                    default behavior, or to return a dense array compatible with dense
                    pipeline operators.
                  rdfs:label: sparse_output
                algorithm:
                  '@schema':
                    '@id': padre:RandomTreesEmbedding/sparse_output
                    '@type': padre:ModelParameters
                    padre:configures: padre:RandomTreesEmbedding
              - '@schema':
                  '@id': padre:sklearn.ensemble.forest.RandomTreesEmbedding/verbose
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.forest.RandomTreesEmbedding/verbose
                  padre:implements: padre:RandomTreesEmbedding/verbose
                  padre:optional: 'True'
                  padre:path: verbose
                  padre:value_default: '0'
                  padre:value_type: integer
                  rdfs:comment: Controls the verbosity of the tree building process.
                  rdfs:label: verbose
                algorithm:
                  '@schema':
                    '@id': padre:RandomTreesEmbedding/verbose
                    '@type': padre:ModelParameters
                    padre:configures: padre:RandomTreesEmbedding
              - '@schema':
                  '@id': padre:sklearn.ensemble.forest.RandomTreesEmbedding/reuse_previous
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.forest.RandomTreesEmbedding/reuse_previous
                  padre:implements: padre:RandomTreesEmbedding/reuse_previous
                  padre:optional: 'True'
                  padre:path: warm_start
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: When set to True, reuse the solution of the previous
                    call to fit and add more estimators to the ensemble, otherwise,
                    just fit a whole new forest.
                  rdfs:label: reuse_previous
                algorithm:
                  '@schema':
                    '@id': padre:RandomTreesEmbedding/reuse_previous
                    '@type': padre:ModelParameters
                    padre:configures: padre:RandomTreesEmbedding
              - '@schema':
                  '@id': padre:sklearn.ensemble.forest.RandomTreesEmbedding/random_state
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.forest.RandomTreesEmbedding/random_state
                  padre:implements: padre:RandomTreesEmbedding/random_state
                  padre:optional: 'True'
                  padre:path: random_state
                  padre:value_default: None
                  padre:value_type: '{integer, RandomState instance, None}'
                  rdfs:comment: The seed of the pseudo random number generator to
                    use when shuffling the data. If int, random_state is the seed used
                    by the random number generator; If RandomState instance, random_state
                    is the random number generator; If None, the random number generator
                    is the RandomState instance used by np.random.
                  rdfs:label: random_state
                algorithm:
                  '@schema':
                    '@id': padre:RandomTreesEmbedding/random_state
                    '@type': padre:ModelParameters
                    padre:configures: padre:RandomTreesEmbedding
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.ensemble.forest.RandomTreesEmbedding/jobs
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.ensemble.forest.RandomTreesEmbedding/jobs
                  padre:implements: padre:RandomTreesEmbedding/jobs
                  padre:optional: 'True'
                  padre:path: n_jobs
                  padre:value_default: '1'
                  padre:value_type: integer
                  rdfs:comment: The number of jobs to use for the computation. If
                    -1 all CPUs are used.
                  rdfs:label: jobs
                algorithm:
                  '@schema':
                    '@id': padre:RandomTreesEmbedding/jobs
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:RandomTreesEmbedding
    :ensemble.gradient_boosting.GradientBoostingClassifier:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.ensemble.gradient_boosting.GradientBoostingClassifier
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:GradientBoostingClassifier
            rdfs:comment: null
            rdfs:label: gradient boosting for classification
          algorithm:
            '@schema':
              '@id': padre:GradientBoostingClassifier
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: gradient boosting for classification
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.ensemble.gradient_boosting.GradientBoostingClassifier/loss
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.gradient_boosting.GradientBoostingClassifier/loss
                  padre:implements: padre:GradientBoostingClassifier/loss
                  padre:optional: 'True'
                  padre:path: loss
                  padre:value_default: '''deviance'''
                  padre:value_type: '{''deviance'', ''exponential''}'
                  rdfs:comment: Loss function to be optimized.
                  rdfs:label: loss
                algorithm:
                  '@schema':
                    '@id': padre:GradientBoostingClassifier/loss
                    '@type': padre:ModelParameters
                    padre:configures: padre:GradientBoostingClassifier
              - '@schema':
                  '@id': padre:sklearn.ensemble.gradient_boosting.GradientBoostingClassifier/learning_rate
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.gradient_boosting.GradientBoostingClassifier/learning_rate
                  padre:implements: padre:GradientBoostingClassifier/learning_rate
                  padre:optional: 'True'
                  padre:path: learning_rate
                  padre:value_default: '0.1'
                  padre:value_type: float
                  rdfs:comment: learning rate shrinks the contribution of each tree
                    by learning_rate.
                  rdfs:label: learning_rate
                algorithm:
                  '@schema':
                    '@id': padre:GradientBoostingClassifier/learning_rate
                    '@type': padre:ModelParameters
                    padre:configures: padre:GradientBoostingClassifier
              - '@schema':
                  '@id': padre:sklearn.ensemble.gradient_boosting.GradientBoostingClassifier/num_estimators
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.gradient_boosting.GradientBoostingClassifier/num_estimators
                  padre:implements: padre:GradientBoostingClassifier/num_estimators
                  padre:optional: 'True'
                  padre:path: n_estimators
                  padre:value_default: '100'
                  padre:value_type: integer
                  rdfs:comment: The number of boosting stages to perform. Gradient
                    boosting is fairly robust to over-fitting so a large number usually
                    results in better performance.
                  rdfs:label: num_estimators
                algorithm:
                  '@schema':
                    '@id': padre:GradientBoostingClassifier/num_estimators
                    '@type': padre:ModelParameters
                    padre:configures: padre:GradientBoostingClassifier
              - '@schema':
                  '@id': padre:sklearn.ensemble.gradient_boosting.GradientBoostingClassifier/max_depth_tree
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.gradient_boosting.GradientBoostingClassifier/max_depth_tree
                  padre:implements: padre:GradientBoostingClassifier/max_depth_tree
                  padre:optional: 'True'
                  padre:path: max_depth
                  padre:value_default: '3'
                  padre:value_type: integer
                  rdfs:comment: The maximum depth of the individual regression estimators.
                    The maximum depth limits the number of nodes in the tree. Tune this
                    parameter for best performance; the best value depends on the interaction
                    of the input variables.
                  rdfs:label: max_depth_tree
                algorithm:
                  '@schema':
                    '@id': padre:GradientBoostingClassifier/max_depth_tree
                    '@type': padre:ModelParameters
                    padre:configures: padre:GradientBoostingClassifier
              - '@schema':
                  '@id': padre:sklearn.ensemble.gradient_boosting.GradientBoostingClassifier/split_quality
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.gradient_boosting.GradientBoostingClassifier/split_quality
                  padre:implements: padre:GradientBoostingClassifier/split_quality
                  padre:optional: 'True'
                  padre:path: criterion
                  padre:value_default: '''friedman_mse'''
                  padre:value_type: '{''mse'', ''friedman_mse'', ''mae''}'
                  rdfs:comment: The function to measure the quality of a split.
                  rdfs:label: split_quality
                algorithm:
                  '@schema':
                    '@id': padre:GradientBoostingClassifier/split_quality
                    '@type': padre:ModelParameters
                    padre:configures: padre:GradientBoostingClassifier
              - '@schema':
                  '@id': padre:sklearn.ensemble.gradient_boosting.GradientBoostingClassifier/min_samples_split
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.gradient_boosting.GradientBoostingClassifier/min_samples_split
                  padre:implements: padre:GradientBoostingClassifier/min_samples_split
                  padre:optional: 'True'
                  padre:path: min_samples_split
                  padre:value_default: '2'
                  padre:value_type: '{integer, float}'
                  rdfs:comment: The minimum number of samples required to split
                    an internal node.
                  rdfs:label: min_samples_split
                algorithm:
                  '@schema':
                    '@id': padre:GradientBoostingClassifier/min_samples_split
                    '@type': padre:ModelParameters
                    padre:configures: padre:GradientBoostingClassifier
              - '@schema':
                  '@id': padre:sklearn.ensemble.gradient_boosting.GradientBoostingClassifier/min_samples_leaf
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.gradient_boosting.GradientBoostingClassifier/min_samples_leaf
                  padre:implements: padre:GradientBoostingClassifier/min_samples_leaf
                  padre:optional: 'True'
                  padre:path: min_samples_leaf
                  padre:value_default: '1'
                  padre:value_type: '{integer, float}'
                  rdfs:comment: The minimum number of samples required to be at
                    a leaf node.
                  rdfs:label: min_samples_leaf
                algorithm:
                  '@schema':
                    '@id': padre:GradientBoostingClassifier/min_samples_leaf
                    '@type': padre:ModelParameters
                    padre:configures: padre:GradientBoostingClassifier
              - '@schema':
                  '@id': padre:sklearn.ensemble.gradient_boosting.GradientBoostingClassifier/min_weight_fraction_leaf
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.gradient_boosting.GradientBoostingClassifier/min_weight_fraction_leaf
                  padre:implements: padre:GradientBoostingClassifier/min_weight_fraction_leaf
                  padre:optional: 'True'
                  padre:path: min_weight_fraction_leaf
                  padre:value_default: '0.0'
                  padre:value_type: float
                  rdfs:comment: The minimum weighted fraction of the sum total of
                    weights (of all the input samples) required to be at a leaf node.
                  rdfs:label: min_weight_fraction_leaf
                algorithm:
                  '@schema':
                    '@id': padre:GradientBoostingClassifier/min_weight_fraction_leaf
                    '@type': padre:ModelParameters
                    padre:configures: padre:GradientBoostingClassifier
              - '@schema':
                  '@id': padre:sklearn.ensemble.gradient_boosting.GradientBoostingClassifier/frac_subsample
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.gradient_boosting.GradientBoostingClassifier/frac_subsample
                  padre:implements: padre:GradientBoostingClassifier/frac_subsample
                  padre:optional: 'True'
                  padre:path: subsample
                  padre:value_default: '1.0'
                  padre:value_type: float
                  rdfs:comment: The fraction of samples to be used for fitting the
                    individual base learners.
                  rdfs:label: frac_subsample
                algorithm:
                  '@schema':
                    '@id': padre:GradientBoostingClassifier/frac_subsample
                    '@type': padre:ModelParameters
                    padre:configures: padre:GradientBoostingClassifier
              - '@schema':
                  '@id': padre:sklearn.ensemble.gradient_boosting.GradientBoostingClassifier/max_features
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.gradient_boosting.GradientBoostingClassifier/max_features
                  padre:implements: padre:GradientBoostingClassifier/max_features
                  padre:optional: 'True'
                  padre:path: max_features
                  padre:value_default: None
                  padre:value_type: '{integer, float, ''auto'', ''sqrt'', ''log2'',
                  None}'
                  rdfs:comment: The number of features to consider when looking
                    for the best split.
                  rdfs:label: max_features
                algorithm:
                  '@schema':
                    '@id': padre:GradientBoostingClassifier/max_features
                    '@type': padre:ModelParameters
                    padre:configures: padre:GradientBoostingClassifier
              - '@schema':
                  '@id': padre:sklearn.ensemble.gradient_boosting.GradientBoostingClassifier/max_leaf_nodes
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.gradient_boosting.GradientBoostingClassifier/max_leaf_nodes
                  padre:implements: padre:GradientBoostingClassifier/max_leaf_nodes
                  padre:optional: 'True'
                  padre:path: max_leaf_nodes
                  padre:value_default: None
                  padre:value_type: integer, None
                  rdfs:comment: Grow a tree with max_leaf_nodes in best-first fashion.
                  rdfs:label: max_leaf_nodes
                algorithm:
                  '@schema':
                    '@id': padre:GradientBoostingClassifier/max_leaf_nodes
                    '@type': padre:ModelParameters
                    padre:configures: padre:GradientBoostingClassifier
              - '@schema':
                  '@id': padre:sklearn.ensemble.gradient_boosting.GradientBoostingClassifier/min_impurity_decrease
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.gradient_boosting.GradientBoostingClassifier/min_impurity_decrease
                  padre:implements: padre:GradientBoostingClassifier/min_impurity_decrease
                  padre:optional: 'True'
                  padre:path: min_impurity_decrease
                  padre:value_default: '0.0'
                  padre:value_type: float
                  rdfs:comment: A node will be split if this split induces a decrease
                    of the impurity greater than or equal to this value.
                  rdfs:label: min_impurity_decrease
                algorithm:
                  '@schema':
                    '@id': padre:GradientBoostingClassifier/min_impurity_decrease
                    '@type': padre:ModelParameters
                    padre:configures: padre:GradientBoostingClassifier
              - '@schema':
                  '@id': padre:sklearn.ensemble.gradient_boosting.GradientBoostingClassifier/init_estimator
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.gradient_boosting.GradientBoostingClassifier/init_estimator
                  padre:implements: padre:GradientBoostingClassifier/init_estimator
                  padre:optional: 'True'
                  padre:path: init
                  padre:value_default: None
                  padre:value_type: BaseEstimator, None
                  rdfs:comment: An estimator object that is used to compute the
                    initial predictions.
                  rdfs:label: init_estimator
                algorithm:
                  '@schema':
                    '@id': padre:GradientBoostingClassifier/init_estimator
                    '@type': padre:ModelParameters
                    padre:configures: padre:GradientBoostingClassifier
              - '@schema':
                  '@id': padre:sklearn.ensemble.gradient_boosting.GradientBoostingClassifier/verbose
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.gradient_boosting.GradientBoostingClassifier/verbose
                  padre:implements: padre:GradientBoostingClassifier/verbose
                  padre:optional: 'True'
                  padre:path: verbose
                  padre:value_default: '0'
                  padre:value_type: integer
                  rdfs:comment: Controls the verbosity of the tree building process.
                  rdfs:label: verbose
                algorithm:
                  '@schema':
                    '@id': padre:GradientBoostingClassifier/verbose
                    '@type': padre:ModelParameters
                    padre:configures: padre:GradientBoostingClassifier
              - '@schema':
                  '@id': padre:sklearn.ensemble.gradient_boosting.GradientBoostingClassifier/reuse_previous
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.gradient_boosting.GradientBoostingClassifier/reuse_previous
                  padre:implements: padre:GradientBoostingClassifier/reuse_previous
                  padre:optional: 'False'
                  padre:path: warm_start
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: When set to True, reuse the solution of the previous
                    call to fit and add more estimators to the ensemble, otherwise,
                    just erase the previous solution.
                  rdfs:label: reuse_previous
                algorithm:
                  '@schema':
                    '@id': padre:GradientBoostingClassifier/reuse_previous
                    '@type': padre:ModelParameters
                    padre:configures: padre:GradientBoostingClassifier
              - '@schema':
                  '@id': padre:sklearn.ensemble.gradient_boosting.GradientBoostingClassifier/random_state
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.gradient_boosting.GradientBoostingClassifier/random_state
                  padre:implements: padre:GradientBoostingClassifier/random_state
                  padre:optional: 'True'
                  padre:path: random_state
                  padre:value_default: None
                  padre:value_type: '{integer, RandomState instance, None}'
                  rdfs:comment: The seed of the pseudo random number generator to
                    use when shuffling the data. If int, random_state is the seed used
                    by the random number generator; If RandomState instance, random_state
                    is the random number generator; If None, the random number generator
                    is the RandomState instance used by np.random.
                  rdfs:label: random_state
                algorithm:
                  '@schema':
                    '@id': padre:GradientBoostingClassifier/random_state
                    '@type': padre:ModelParameters
                    padre:configures: padre:GradientBoostingClassifier
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.ensemble.gradient_boosting.GradientBoostingClassifier/presort
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.ensemble.gradient_boosting.GradientBoostingClassifier/presort
                  padre:implements: padre:GradientBoostingClassifier/presort
                  padre:optional: 'True'
                  padre:path: presort
                  padre:value_default: '''auto'''
                  padre:value_type: '{boolean, ''auto''}'
                  rdfs:comment: Whether to presort the data to speed up the finding
                    of best splits in fitting.
                  rdfs:label: presort
                algorithm:
                  '@schema':
                    '@id': padre:GradientBoostingClassifier/presort
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:GradientBoostingClassifier
    :ensemble.gradient_boosting.GradientBoostingRegressor:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.ensemble.gradient_boosting.GradientBoostingRegressor
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:GradientBoostingRegressor
            rdfs:comment: null
            rdfs:label: gradient boosting for regression
          algorithm:
            '@schema':
              '@id': padre:GradientBoostingRegressor
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: gradient boosting for regression
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.ensemble.gradient_boosting.GradientBoostingRegressor/loss
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.gradient_boosting.GradientBoostingRegressor/loss
                  padre:implements: padre:GradientBoostingRegressor/loss
                  padre:optional: 'True'
                  padre:path: loss
                  padre:value_default: '''ls'''
                  padre:value_type: '{''ls'', ''lad'', ''huber'', ''quantile''}'
                  rdfs:comment: Loss function to be optimized.
                  rdfs:label: loss
                algorithm:
                  '@schema':
                    '@id': padre:GradientBoostingRegressor/loss
                    '@type': padre:ModelParameters
                    padre:configures: padre:GradientBoostingRegressor
              - '@schema':
                  '@id': padre:sklearn.ensemble.gradient_boosting.GradientBoostingRegressor/learning_rate
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.gradient_boosting.GradientBoostingRegressor/learning_rate
                  padre:implements: padre:GradientBoostingRegressor/learning_rate
                  padre:optional: 'True'
                  padre:path: learning_rate
                  padre:value_default: '0.1'
                  padre:value_type: float
                  rdfs:comment: learning rate shrinks the contribution of each tree
                    by learning_rate.
                  rdfs:label: learning_rate
                algorithm:
                  '@schema':
                    '@id': padre:GradientBoostingRegressor/learning_rate
                    '@type': padre:ModelParameters
                    padre:configures: padre:GradientBoostingRegressor
              - '@schema':
                  '@id': padre:sklearn.ensemble.gradient_boosting.GradientBoostingRegressor/num_estimators
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.gradient_boosting.GradientBoostingRegressor/num_estimators
                  padre:implements: padre:GradientBoostingRegressor/num_estimators
                  padre:optional: 'False'
                  padre:path: n_estimators
                  padre:value_default: '100'
                  padre:value_type: integer
                  rdfs:comment: The number of boosting stages to perform. Gradient
                    boosting is fairly robust to over-fitting so a large number usually
                    results in better performance.
                  rdfs:label: num_estimators
                algorithm:
                  '@schema':
                    '@id': padre:GradientBoostingRegressor/num_estimators
                    '@type': padre:ModelParameters
                    padre:configures: padre:GradientBoostingRegressor
              - '@schema':
                  '@id': padre:sklearn.ensemble.gradient_boosting.GradientBoostingRegressor/max_depth_tree
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.gradient_boosting.GradientBoostingRegressor/max_depth_tree
                  padre:implements: padre:GradientBoostingRegressor/max_depth_tree
                  padre:optional: 'True'
                  padre:path: max_depth
                  padre:value_default: '3'
                  padre:value_type: integer
                  rdfs:comment: The maximum depth of the individual regression estimators.
                    The maximum depth limits the number of nodes in the tree. Tune this
                    parameter for best performance; the best value depends on the interaction
                    of the input variables.
                  rdfs:label: max_depth_tree
                algorithm:
                  '@schema':
                    '@id': padre:GradientBoostingRegressor/max_depth_tree
                    '@type': padre:ModelParameters
                    padre:configures: padre:GradientBoostingRegressor
              - '@schema':
                  '@id': padre:sklearn.ensemble.gradient_boosting.GradientBoostingRegressor/split_quality
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.gradient_boosting.GradientBoostingRegressor/split_quality
                  padre:implements: padre:GradientBoostingRegressor/split_quality
                  padre:optional: 'True'
                  padre:path: criterion
                  padre:value_default: '''friedman_mse'''
                  padre:value_type: '{''mse'', ''friedman_mse'', ''mae''}'
                  rdfs:comment: The function to measure the quality of a split.
                  rdfs:label: split_quality
                algorithm:
                  '@schema':
                    '@id': padre:GradientBoostingRegressor/split_quality
                    '@type': padre:ModelParameters
                    padre:configures: padre:GradientBoostingRegressor
              - '@schema':
                  '@id': padre:sklearn.ensemble.gradient_boosting.GradientBoostingRegressor/min_samples_split
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.gradient_boosting.GradientBoostingRegressor/min_samples_split
                  padre:implements: padre:GradientBoostingRegressor/min_samples_split
                  padre:optional: 'True'
                  padre:path: min_samples_split
                  padre:value_default: '2'
                  padre:value_type: '{integer, float}'
                  rdfs:comment: The minimum number of samples required to split
                    an internal node.
                  rdfs:label: min_samples_split
                algorithm:
                  '@schema':
                    '@id': padre:GradientBoostingRegressor/min_samples_split
                    '@type': padre:ModelParameters
                    padre:configures: padre:GradientBoostingRegressor
              - '@schema':
                  '@id': padre:sklearn.ensemble.gradient_boosting.GradientBoostingRegressor/min_samples_leaf
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.gradient_boosting.GradientBoostingRegressor/min_samples_leaf
                  padre:implements: padre:GradientBoostingRegressor/min_samples_leaf
                  padre:optional: 'True'
                  padre:path: min_samples_leaf
                  padre:value_default: '1'
                  padre:value_type: '{integer, float}'
                  rdfs:comment: The minimum number of samples required to be at
                    a leaf node.
                  rdfs:label: min_samples_leaf
                algorithm:
                  '@schema':
                    '@id': padre:GradientBoostingRegressor/min_samples_leaf
                    '@type': padre:ModelParameters
                    padre:configures: padre:GradientBoostingRegressor
              - '@schema':
                  '@id': padre:sklearn.ensemble.gradient_boosting.GradientBoostingRegressor/min_weight_fraction_leaf
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.gradient_boosting.GradientBoostingRegressor/min_weight_fraction_leaf
                  padre:implements: padre:GradientBoostingRegressor/min_weight_fraction_leaf
                  padre:optional: 'True'
                  padre:path: min_weight_fraction_leaf
                  padre:value_default: '0.0'
                  padre:value_type: float
                  rdfs:comment: The minimum weighted fraction of the sum total of
                    weights (of all the input samples) required to be at a leaf node.
                  rdfs:label: min_weight_fraction_leaf
                algorithm:
                  '@schema':
                    '@id': padre:GradientBoostingRegressor/min_weight_fraction_leaf
                    '@type': padre:ModelParameters
                    padre:configures: padre:GradientBoostingRegressor
              - '@schema':
                  '@id': padre:sklearn.ensemble.gradient_boosting.GradientBoostingRegressor/frac_subsample
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.gradient_boosting.GradientBoostingRegressor/frac_subsample
                  padre:implements: padre:GradientBoostingRegressor/frac_subsample
                  padre:optional: 'True'
                  padre:path: subsample
                  padre:value_default: '1.0'
                  padre:value_type: float
                  rdfs:comment: The fraction of samples to be used for fitting the
                    individual base learners.
                  rdfs:label: frac_subsample
                algorithm:
                  '@schema':
                    '@id': padre:GradientBoostingRegressor/frac_subsample
                    '@type': padre:ModelParameters
                    padre:configures: padre:GradientBoostingRegressor
              - '@schema':
                  '@id': padre:sklearn.ensemble.gradient_boosting.GradientBoostingRegressor/max_features
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.gradient_boosting.GradientBoostingRegressor/max_features
                  padre:implements: padre:GradientBoostingRegressor/max_features
                  padre:optional: 'True'
                  padre:path: max_features
                  padre:value_default: None
                  padre:value_type: '{integer, float, ''auto'', ''sqrt'', ''log2'',
                  None}'
                  rdfs:comment: The number of features to consider when looking
                    for the best split.
                  rdfs:label: max_features
                algorithm:
                  '@schema':
                    '@id': padre:GradientBoostingRegressor/max_features
                    '@type': padre:ModelParameters
                    padre:configures: padre:GradientBoostingRegressor
              - '@schema':
                  '@id': padre:sklearn.ensemble.gradient_boosting.GradientBoostingRegressor/max_leaf_nodes
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.gradient_boosting.GradientBoostingRegressor/max_leaf_nodes
                  padre:implements: padre:GradientBoostingRegressor/max_leaf_nodes
                  padre:optional: 'True'
                  padre:path: max_leaf_nodes
                  padre:value_default: None
                  padre:value_type: integer, None
                  rdfs:comment: Grow a tree with max_leaf_nodes in best-first fashion.
                  rdfs:label: max_leaf_nodes
                algorithm:
                  '@schema':
                    '@id': padre:GradientBoostingRegressor/max_leaf_nodes
                    '@type': padre:ModelParameters
                    padre:configures: padre:GradientBoostingRegressor
              - '@schema':
                  '@id': padre:sklearn.ensemble.gradient_boosting.GradientBoostingRegressor/min_impurity_decrease
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.gradient_boosting.GradientBoostingRegressor/min_impurity_decrease
                  padre:implements: padre:GradientBoostingRegressor/min_impurity_decrease
                  padre:optional: 'True'
                  padre:path: min_impurity_decrease
                  padre:value_default: '0.0'
                  padre:value_type: float
                  rdfs:comment: A node will be split if this split induces a decrease
                    of the impurity greater than or equal to this value.
                  rdfs:label: min_impurity_decrease
                algorithm:
                  '@schema':
                    '@id': padre:GradientBoostingRegressor/min_impurity_decrease
                    '@type': padre:ModelParameters
                    padre:configures: padre:GradientBoostingRegressor
              - '@schema':
                  '@id': padre:sklearn.ensemble.gradient_boosting.GradientBoostingRegressor/alpha_quantile
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.gradient_boosting.GradientBoostingRegressor/alpha_quantile
                  padre:implements: padre:GradientBoostingRegressor/alpha_quantile
                  padre:optional: 'False'
                  padre:path: alpha
                  padre:value_default: '0.9'
                  padre:value_type: float
                  rdfs:comment: 'The alpha-quantile of the huber loss function and
                  the quantile loss function. '
                  rdfs:label: alpha_quantile
                algorithm:
                  '@schema':
                    '@id': padre:GradientBoostingRegressor/alpha_quantile
                    '@type': padre:ModelParameters
                    padre:configures: padre:GradientBoostingRegressor
              - '@schema':
                  '@id': padre:sklearn.ensemble.gradient_boosting.GradientBoostingRegressor/init_estimator
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.gradient_boosting.GradientBoostingRegressor/init_estimator
                  padre:implements: padre:GradientBoostingRegressor/init_estimator
                  padre:optional: 'True'
                  padre:path: init
                  padre:value_default: None
                  padre:value_type: BaseEstimator, None
                  rdfs:comment: An estimator object that is used to compute the
                    initial predictions.
                  rdfs:label: init_estimator
                algorithm:
                  '@schema':
                    '@id': padre:GradientBoostingRegressor/init_estimator
                    '@type': padre:ModelParameters
                    padre:configures: padre:GradientBoostingRegressor
              - '@schema':
                  '@id': padre:sklearn.ensemble.gradient_boosting.GradientBoostingRegressor/verbose
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.gradient_boosting.GradientBoostingRegressor/verbose
                  padre:implements: padre:GradientBoostingRegressor/verbose
                  padre:optional: 'True'
                  padre:path: verbose
                  padre:value_default: '0'
                  padre:value_type: integer
                  rdfs:comment: Controls the verbosity of the tree building process.
                  rdfs:label: verbose
                algorithm:
                  '@schema':
                    '@id': padre:GradientBoostingRegressor/verbose
                    '@type': padre:ModelParameters
                    padre:configures: padre:GradientBoostingRegressor
              - '@schema':
                  '@id': padre:sklearn.ensemble.gradient_boosting.GradientBoostingRegressor/reuse_previous
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.gradient_boosting.GradientBoostingRegressor/reuse_previous
                  padre:implements: padre:GradientBoostingRegressor/reuse_previous
                  padre:optional: 'False'
                  padre:path: warm_start
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: When set to True, reuse the solution of the previous
                    call to fit and add more estimators to the ensemble, otherwise,
                    just erase the previous solution.
                  rdfs:label: reuse_previous
                algorithm:
                  '@schema':
                    '@id': padre:GradientBoostingRegressor/reuse_previous
                    '@type': padre:ModelParameters
                    padre:configures: padre:GradientBoostingRegressor
              - '@schema':
                  '@id': padre:sklearn.ensemble.gradient_boosting.GradientBoostingRegressor/random_state
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.gradient_boosting.GradientBoostingRegressor/random_state
                  padre:implements: padre:GradientBoostingRegressor/random_state
                  padre:optional: 'True'
                  padre:path: random_state
                  padre:value_default: None
                  padre:value_type: '{integer, RandomState instance, None}'
                  rdfs:comment: The seed of the pseudo random number generator to
                    use when shuffling the data. If int, random_state is the seed used
                    by the random number generator; If RandomState instance, random_state
                    is the random number generator; If None, the random number generator
                    is the RandomState instance used by np.random.
                  rdfs:label: random_state
                algorithm:
                  '@schema':
                    '@id': padre:GradientBoostingRegressor/random_state
                    '@type': padre:ModelParameters
                    padre:configures: padre:GradientBoostingRegressor
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.ensemble.gradient_boosting.GradientBoostingRegressor/presort
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.ensemble.gradient_boosting.GradientBoostingRegressor/presort
                  padre:implements: padre:GradientBoostingRegressor/presort
                  padre:optional: 'True'
                  padre:path: presort
                  padre:value_default: '''auto'''
                  padre:value_type: '{boolean, ''auto''}'
                  rdfs:comment: Whether to presort the data to speed up the finding
                    of best splits in fitting.
                  rdfs:label: presort
                algorithm:
                  '@schema':
                    '@id': padre:GradientBoostingRegressor/presort
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:GradientBoostingRegressor
    :ensemble.iforest.IsolationForest:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.ensemble.iforest.IsolationForest
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:IsolationForest
            rdfs:comment: null
            rdfs:label: isolation forest
          algorithm:
            '@schema':
              '@id': padre:IsolationForest
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: isolation forest
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.ensemble.iforest.IsolationForest/num_estimators
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.iforest.IsolationForest/num_estimators
                  padre:implements: padre:IsolationForest/num_estimators
                  padre:optional: 'True'
                  padre:path: n_estimators
                  padre:value_default: '100'
                  padre:value_type: integer
                  rdfs:comment: The number of base estimators in the ensemble.
                  rdfs:label: num_estimators
                algorithm:
                  '@schema':
                    '@id': padre:IsolationForest/num_estimators
                    '@type': padre:ModelParameters
                    padre:configures: padre:IsolationForest
              - '@schema':
                  '@id': padre:sklearn.ensemble.iforest.IsolationForest/max_samples
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.iforest.IsolationForest/max_samples
                  padre:implements: padre:IsolationForest/max_samples
                  padre:optional: 'True'
                  padre:path: max_samples
                  padre:value_default: '''auto'''
                  padre:value_type: '{integer, float, ''auto''}'
                  rdfs:comment: The number of samples to draw from X to train each
                    base estimator.
                  rdfs:label: max_samples
                algorithm:
                  '@schema':
                    '@id': padre:IsolationForest/max_samples
                    '@type': padre:ModelParameters
                    padre:configures: padre:IsolationForest
              - '@schema':
                  '@id': padre:sklearn.ensemble.iforest.IsolationForest/contamination
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.iforest.IsolationForest/contamination
                  padre:implements: padre:IsolationForest/contamination
                  padre:optional: 'True'
                  padre:path: contamination
                  padre:value_default: '0.1'
                  padre:value_type: float in (0., 0.5)
                  rdfs:comment: The amount of contamination of the data set, i.e.
                    the proportion of outliers in the data set.
                  rdfs:label: contamination
                algorithm:
                  '@schema':
                    '@id': padre:IsolationForest/contamination
                    '@type': padre:ModelParameters
                    padre:configures: padre:IsolationForest
              - '@schema':
                  '@id': padre:sklearn.ensemble.iforest.IsolationForest/max_features
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.iforest.IsolationForest/max_features
                  padre:implements: padre:IsolationForest/max_features
                  padre:optional: 'True'
                  padre:path: max_features
                  padre:value_default: '1.0'
                  padre:value_type: '{integer, float}'
                  rdfs:comment: The number of features to draw from X to train each
                    base estimator.
                  rdfs:label: max_features
                algorithm:
                  '@schema':
                    '@id': padre:IsolationForest/max_features
                    '@type': padre:ModelParameters
                    padre:configures: padre:IsolationForest
              - '@schema':
                  '@id': padre:sklearn.ensemble.iforest.IsolationForest/bootstrap
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.iforest.IsolationForest/bootstrap
                  padre:implements: padre:IsolationForest/bootstrap
                  padre:optional: 'True'
                  padre:path: bootstrap
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: If True, individual trees are fit on random subsets
                    of the training data sampled with replacement. If False, sampling
                    without replacement is performed.
                  rdfs:label: bootstrap
                algorithm:
                  '@schema':
                    '@id': padre:IsolationForest/bootstrap
                    '@type': padre:ModelParameters
                    padre:configures: padre:IsolationForest
              - '@schema':
                  '@id': padre:sklearn.ensemble.iforest.IsolationForest/random_state
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.iforest.IsolationForest/random_state
                  padre:implements: padre:IsolationForest/random_state
                  padre:optional: 'True'
                  padre:path: random_state
                  padre:value_default: None
                  padre:value_type: '{integer, RandomState instance, None}'
                  rdfs:comment: The seed of the pseudo random number generator to
                    use when shuffling the data. If int, random_state is the seed used
                    by the random number generator; If RandomState instance, random_state
                    is the random number generator; If None, the random number generator
                    is the RandomState instance used by np.random.
                  rdfs:label: random_state
                algorithm:
                  '@schema':
                    '@id': padre:IsolationForest/random_state
                    '@type': padre:ModelParameters
                    padre:configures: padre:IsolationForest
              - '@schema':
                  '@id': padre:sklearn.ensemble.iforest.IsolationForest/verbose
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.iforest.IsolationForest/verbose
                  padre:implements: padre:IsolationForest/verbose
                  padre:optional: 'True'
                  padre:path: verbose
                  padre:value_default: '0'
                  padre:value_type: integer
                  rdfs:comment: Controls the verbosity of the tree building process.
                  rdfs:label: verbose
                algorithm:
                  '@schema':
                    '@id': padre:IsolationForest/verbose
                    '@type': padre:ModelParameters
                    padre:configures: padre:IsolationForest
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.ensemble.iforest.IsolationForest/jobs
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.ensemble.iforest.IsolationForest/jobs
                  padre:implements: padre:IsolationForest/jobs
                  padre:optional: 'True'
                  padre:path: n_jobs
                  padre:value_default: '1'
                  padre:value_type: integer
                  rdfs:comment: The number of jobs to use for the computation. If
                    -1 all CPUs are used.
                  rdfs:label: jobs
                algorithm:
                  '@schema':
                    '@id': padre:IsolationForest/jobs
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:IsolationForest
    :ensemble.weight_boosting.AdaBoostClassifier:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.ensemble.weight_boosting.AdaBoostClassifier
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:AdaBoostClassifier
            rdfs:comment: null
            rdfs:label: AdaBoost classifier
          algorithm:
            '@schema':
              '@id': padre:AdaBoostClassifier
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: AdaBoost classifier
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.ensemble.weight_boosting.AdaBoostClassifier/base_estimator
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.weight_boosting.AdaBoostClassifier/base_estimator
                  padre:implements: padre:AdaBoostClassifier/base_estimator
                  padre:optional: 'True'
                  padre:path: base_estimator
                  padre:value_default: None
                  padre:value_type: '{object, None}'
                  rdfs:comment: base_estimator.
                  rdfs:label: base_estimator
                algorithm:
                  '@schema':
                    '@id': padre:AdaBoostClassifier/base_estimator
                    '@type': padre:ModelParameters
                    padre:configures: padre:AdaBoostClassifier
              - '@schema':
                  '@id': padre:sklearn.ensemble.weight_boosting.AdaBoostClassifier/num_estimators
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.weight_boosting.AdaBoostClassifier/num_estimators
                  padre:implements: padre:AdaBoostClassifier/num_estimators
                  padre:optional: 'True'
                  padre:path: n_estimators
                  padre:value_default: '50'
                  padre:value_type: integer
                  rdfs:comment: The maximum number of estimators at which boosting
                    is terminated. In case of perfect fit, the learning procedure is
                    stopped early.
                  rdfs:label: num_estimators
                algorithm:
                  '@schema':
                    '@id': padre:AdaBoostClassifier/num_estimators
                    '@type': padre:ModelParameters
                    padre:configures: padre:AdaBoostClassifier
              - '@schema':
                  '@id': padre:sklearn.ensemble.weight_boosting.AdaBoostClassifier/learning_rate
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.weight_boosting.AdaBoostClassifier/learning_rate
                  padre:implements: padre:AdaBoostClassifier/learning_rate
                  padre:optional: 'True'
                  padre:path: learning_rate
                  padre:value_default: '1.0'
                  padre:value_type: float
                  rdfs:comment: Learning rate shrinks the contribution of each regressor
                    by learning_rate.
                  rdfs:label: learning_rate
                algorithm:
                  '@schema':
                    '@id': padre:AdaBoostClassifier/learning_rate
                    '@type': padre:ModelParameters
                    padre:configures: padre:AdaBoostClassifier
              - '@schema':
                  '@id': padre:sklearn.ensemble.weight_boosting.AdaBoostClassifier/boosting_algorithm
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.weight_boosting.AdaBoostClassifier/boosting_algorithm
                  padre:implements: padre:AdaBoostClassifier/boosting_algorithm
                  padre:optional: 'True'
                  padre:path: algorithm
                  padre:value_default: '''SAMME.R'''
                  padre:value_type: ' {''SAMME'', ''SAMME.R''}'
                  rdfs:comment: "If \u2018SAMME.R\u2019 then use the SAMME.R real\
                  \ boosting algorithm. base_estimator must support calculation of\
                  \ class probabilities. If \u2018SAMME\u2019 then use the SAMME discrete\
                  \ boosting algorithm. The SAMME.R algorithm typically converges\
                  \ faster than SAMME, achieving a lower tests error with fewer boosting\
                  \ iterations."
                  rdfs:label: boosting_algorithm
                algorithm:
                  '@schema':
                    '@id': padre:AdaBoostClassifier/boosting_algorithm
                    '@type': padre:ModelParameters
                    padre:configures: padre:AdaBoostClassifier
              - '@schema':
                  '@id': padre:sklearn.ensemble.weight_boosting.AdaBoostClassifier/random_state
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.weight_boosting.AdaBoostClassifier/random_state
                  padre:implements: padre:AdaBoostClassifier/random_state
                  padre:optional: 'True'
                  padre:path: random_state
                  padre:value_default: None
                  padre:value_type: '{integer, RandomState instance, None}'
                  rdfs:comment: The seed of the pseudo random number generator to
                    use when shuffling the data. If int, random_state is the seed used
                    by the random number generator; If RandomState instance, random_state
                    is the random number generator; If None, the random number generator
                    is the RandomState instance used by np.random.
                  rdfs:label: random_state
                algorithm:
                  '@schema':
                    '@id': padre:AdaBoostClassifier/random_state
                    '@type': padre:ModelParameters
                    padre:configures: padre:AdaBoostClassifier
            optimisation_parameters: []
    :ensemble.weight_boosting.AdaBoostRegressor:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.ensemble.weight_boosting.AdaBoostRegressor
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:AdaBoostRegressor
            rdfs:comment: null
            rdfs:label: AdaBoost regressor
          algorithm:
            '@schema':
              '@id': padre:AdaBoostRegressor
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: AdaBoost regressor
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.ensemble.weight_boosting.AdaBoostRegressor/base_estimator
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.weight_boosting.AdaBoostRegressor/base_estimator
                  padre:implements: padre:AdaBoostRegressor/base_estimator
                  padre:optional: 'True'
                  padre:path: base_estimator
                  padre:value_default: None
                  padre:value_type: '{object, None}'
                  rdfs:comment: base_estimator.
                  rdfs:label: base_estimator
                algorithm:
                  '@schema':
                    '@id': padre:AdaBoostRegressor/base_estimator
                    '@type': padre:ModelParameters
                    padre:configures: padre:AdaBoostRegressor
              - '@schema':
                  '@id': padre:sklearn.ensemble.weight_boosting.AdaBoostRegressor/num_estimators
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.weight_boosting.AdaBoostRegressor/num_estimators
                  padre:implements: padre:AdaBoostRegressor/num_estimators
                  padre:optional: 'True'
                  padre:path: n_estimators
                  padre:value_default: '50'
                  padre:value_type: integer
                  rdfs:comment: The maximum number of estimators at which boosting
                    is terminated. In case of perfect fit, the learning procedure is
                    stopped early.
                  rdfs:label: num_estimators
                algorithm:
                  '@schema':
                    '@id': padre:AdaBoostRegressor/num_estimators
                    '@type': padre:ModelParameters
                    padre:configures: padre:AdaBoostRegressor
              - '@schema':
                  '@id': padre:sklearn.ensemble.weight_boosting.AdaBoostRegressor/learning_rate
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.weight_boosting.AdaBoostRegressor/learning_rate
                  padre:implements: padre:AdaBoostRegressor/learning_rate
                  padre:optional: 'True'
                  padre:path: learning_rate
                  padre:value_default: '1.0'
                  padre:value_type: float
                  rdfs:comment: Learning rate shrinks the contribution of each regressor
                    by learning_rate.
                  rdfs:label: learning_rate
                algorithm:
                  '@schema':
                    '@id': padre:AdaBoostRegressor/learning_rate
                    '@type': padre:ModelParameters
                    padre:configures: padre:AdaBoostRegressor
              - '@schema':
                  '@id': padre:sklearn.ensemble.weight_boosting.AdaBoostRegressor/loss
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.weight_boosting.AdaBoostRegressor/loss
                  padre:implements: padre:AdaBoostRegressor/loss
                  padre:optional: 'True'
                  padre:path: loss
                  padre:value_default: '''linear'''
                  padre:value_type: '{''linear'', ''square'', ''exponential''}'
                  rdfs:comment: Loss function to be optimized.
                  rdfs:label: loss
                algorithm:
                  '@schema':
                    '@id': padre:AdaBoostRegressor/loss
                    '@type': padre:ModelParameters
                    padre:configures: padre:AdaBoostRegressor
              - '@schema':
                  '@id': padre:sklearn.ensemble.weight_boosting.AdaBoostRegressor/random_state
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.ensemble.weight_boosting.AdaBoostRegressor/random_state
                  padre:implements: padre:AdaBoostRegressor/random_state
                  padre:optional: 'True'
                  padre:path: random_state
                  padre:value_default: None
                  padre:value_type: '{integer, RandomState instance, None}'
                  rdfs:comment: The seed of the pseudo random number generator to
                    use when shuffling the data. If int, random_state is the seed used
                    by the random number generator; If RandomState instance, random_state
                    is the random number generator; If None, the random number generator
                    is the RandomState instance used by np.random.
                  rdfs:label: random_state
                algorithm:
                  '@schema':
                    '@id': padre:AdaBoostRegressor/random_state
                    '@type': padre:ModelParameters
                    padre:configures: padre:AdaBoostRegressor
            optimisation_parameters: []
    :feature_selection.RFE:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.feature_selection.RFE
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:RFE
            rdfs:comment: null
            rdfs:label: recursive feature elimination
          algorithm:
            '@schema':
              '@id': padre:RFE
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: recursive feature elimination
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.feature_selection.RFE/estimator
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.feature_selection.RFE/estimator
                  padre:implements: padre:RFE/estimator
                  padre:optional: 'False'
                  padre:path: estimator
                  padre:value_default: ''
                  padre:value_type: estimator object
                  rdfs:comment: A supervised learning estimator with a fit method
                    that provides information about feature importance either through
                    a coef_ attribute or through a feature_importances_ attribute.
                  rdfs:label: estimator
                algorithm:
                  '@schema':
                    '@id': padre:RFE/estimator
                    '@type': padre:ModelParameters
                    padre:configures: padre:RFE
              - '@schema':
                  '@id': padre:sklearn.feature_selection.RFE/n_features_to_select
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.feature_selection.RFE/n_features_to_select
                  padre:implements: padre:RFE/n_features_to_select
                  padre:optional: 'False'
                  padre:path: n_features_to_select
                  padre:value_default: None
                  padre:value_type: '{integer, None}'
                  rdfs:comment: The number of features to select. If None, half
                    of the features are selected.
                  rdfs:label: n_features_to_select
                algorithm:
                  '@schema':
                    '@id': padre:RFE/n_features_to_select
                    '@type': padre:ModelParameters
                    padre:configures: padre:RFE
              - '@schema':
                  '@id': padre:sklearn.feature_selection.RFE/step
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.feature_selection.RFE/step
                  padre:implements: padre:RFE/step
                  padre:optional: 'True'
                  padre:path: step
                  padre:value_default: '1'
                  padre:value_type: '{integer, float}'
                  rdfs:comment: If greater than or equal to 1, then step corresponds
                    to the (integer) number of features to remove at each iteration.
                    If within (0.0, 1.0), then step corresponds to the percentage (rounded
                    down) of features to remove at each iteration.
                  rdfs:label: step
                algorithm:
                  '@schema':
                    '@id': padre:RFE/step
                    '@type': padre:ModelParameters
                    padre:configures: padre:RFE
              - '@schema':
                  '@id': padre:sklearn.feature_selection.RFE/verbose
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.feature_selection.RFE/verbose
                  padre:implements: padre:RFE/verbose
                  padre:optional: 'False'
                  padre:path: verbose
                  padre:value_default: '0'
                  padre:value_type: integer
                  rdfs:comment: Controls verbosity of output.
                  rdfs:label: verbose
                algorithm:
                  '@schema':
                    '@id': padre:RFE/verbose
                    '@type': padre:ModelParameters
                    padre:configures: padre:RFE
            optimisation_parameters: []
    :feature_selection.RFECV:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.feature_selection.RFECV
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:RFECV
            rdfs:comment: null
            rdfs:label: recursive feature elimination with cross-validation
          algorithm:
            '@schema':
              '@id': padre:RFECV
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: recursive feature elimination with cross-validation
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.feature_selection.RFECV/estimator
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.feature_selection.RFECV/estimator
                  padre:implements: padre:RFECV/estimator
                  padre:optional: 'False'
                  padre:path: estimator
                  padre:value_default: ''
                  padre:value_type: estimator object
                  rdfs:comment: The base estimator from which the transformer is
                    built.
                  rdfs:label: estimator
                algorithm:
                  '@schema':
                    '@id': padre:RFECV/estimator
                    '@type': padre:ModelParameters
                    padre:configures: padre:RFECV
              - '@schema':
                  '@id': padre:sklearn.feature_selection.RFECV/step
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.feature_selection.RFECV/step
                  padre:implements: padre:RFECV/step
                  padre:optional: 'True'
                  padre:path: step
                  padre:value_default: '1'
                  padre:value_type: '{integer, float}'
                  rdfs:comment: If greater than or equal to 1, then step corresponds
                    to the (integer) number of features to remove at each iteration.
                    If within (0.0, 1.0), then step corresponds to the percentage (rounded
                    down) of features to remove at each iteration.
                  rdfs:label: step
                algorithm:
                  '@schema':
                    '@id': padre:RFECV/step
                    '@type': padre:ModelParameters
                    padre:configures: padre:RFECV
              - '@schema':
                  '@id': padre:sklearn.feature_selection.RFECV/cross_validation
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.feature_selection.RFECV/cross_validation
                  padre:implements: padre:RFECV/cross_validation
                  padre:optional: 'True'
                  padre:path: cv
                  padre:value_default: None
                  padre:value_type: '{integer, object (cross-validation generator),  iterable
                  yielding train and tests splits, None'
                  rdfs:comment: Determines the cross-validation splitting strategy.
                  rdfs:label: cross_validation
                algorithm:
                  '@schema':
                    '@id': padre:RFECV/cross_validation
                    '@type': padre:ModelParameters
                    padre:configures: padre:RFECV
              - '@schema':
                  '@id': padre:sklearn.feature_selection.RFECV/scoring
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.feature_selection.RFECV/scoring
                  padre:implements: padre:RFECV/scoring
                  padre:optional: 'True'
                  padre:path: scoring
                  padre:value_default: None
                  padre:value_type: "{callable, None, 'accuracy', 'average_precision',\
                  \ 'f1', 'f1_micro', 'f1_macro', 'f1_weighted', 'f1_samples', 'neg_log_loss',\
                  \ 'precision', 'recall', 'roc_auc', 'adjusted_mutual_info_score',\
                  \ 'adjusted_rand_score', 'completeness_score', 'fowlkes_mallows_score',\
                  \ 'homogeneity_score', 'mutual_info_score', 'normalized_mutual_info_score',\
                  \ 'v_measure_score', 'explained_variance', 'neg_mean_absolute_error',\
                  \ '\u2018neg_mean_squared_error', 'neg_mean_squared_log_error',\
                  \ 'neg_median_absolute_error', 'r2'}"
                  rdfs:comment: Scoring parameter that is applied to the evaluated
                    estimator.
                  rdfs:label: scoring
                algorithm:
                  '@schema':
                    '@id': padre:RFECV/scoring
                    '@type': padre:ModelParameters
                    padre:configures: padre:RFECV
              - '@schema':
                  '@id': padre:sklearn.feature_selection.RFECV/verbose
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.feature_selection.RFECV/verbose
                  padre:implements: padre:RFECV/verbose
                  padre:optional: 'False'
                  padre:path: verbose
                  padre:value_default: '0'
                  padre:value_type: integer
                  rdfs:comment: Controls verbosity of output.
                  rdfs:label: verbose
                algorithm:
                  '@schema':
                    '@id': padre:RFECV/verbose
                    '@type': padre:ModelParameters
                    padre:configures: padre:RFECV
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.feature_selection.RFECV/jobs
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.feature_selection.RFECV/jobs
                  padre:implements: padre:RFECV/jobs
                  padre:optional: 'True'
                  padre:path: n_jobs
                  padre:value_default: '1'
                  padre:value_type: integer
                  rdfs:comment: The number of jobs to use for the computation. If
                    -1 all CPUs are used.
                  rdfs:label: jobs
                algorithm:
                  '@schema':
                    '@id': padre:RFECV/jobs
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:RFECV
    :feature_selection.SelectFromModel:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.feature_selection.SelectFromModel
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:SelectFromModel
            rdfs:comment: null
            rdfs:label: select from model
          algorithm:
            '@schema':
              '@id': padre:SelectFromModel
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: select from model
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.feature_selection.SelectFromModel/estimator
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.feature_selection.SelectFromModel/estimator
                  padre:implements: padre:SelectFromModel/estimator
                  padre:optional: 'False'
                  padre:path: estimator
                  padre:value_default: ''
                  padre:value_type: estimator object
                  rdfs:comment: The base estimator from which the transformer is
                    built.
                  rdfs:label: estimator
                algorithm:
                  '@schema':
                    '@id': padre:SelectFromModel/estimator
                    '@type': padre:ModelParameters
                    padre:configures: padre:SelectFromModel
              - '@schema':
                  '@id': padre:sklearn.feature_selection.SelectFromModel/threshold
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.feature_selection.SelectFromModel/threshold
                  padre:implements: padre:SelectFromModel/threshold
                  padre:optional: 'True'
                  padre:path: threshold
                  padre:value_default: None
                  padre:value_type: '{''median'', ''mean'', float, None}'
                  rdfs:comment: The threshold value to use for feature selection.
                  rdfs:label: threshold
                algorithm:
                  '@schema':
                    '@id': padre:SelectFromModel/threshold
                    '@type': padre:ModelParameters
                    padre:configures: padre:SelectFromModel
              - '@schema':
                  '@id': padre:sklearn.feature_selection.SelectFromModel/prefit_model
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.feature_selection.SelectFromModel/prefit_model
                  padre:implements: padre:SelectFromModel/prefit_model
                  padre:optional: 'False'
                  padre:path: prefit
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: Whether a prefit model is expected to be passed
                    into the constructor directly or not.
                  rdfs:label: prefit_model
                algorithm:
                  '@schema':
                    '@id': padre:SelectFromModel/prefit_model
                    '@type': padre:ModelParameters
                    padre:configures: padre:SelectFromModel
              - '@schema':
                  '@id': padre:sklearn.feature_selection.SelectFromModel/norm_order
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.feature_selection.SelectFromModel/norm_order
                  padre:implements: padre:SelectFromModel/norm_order
                  padre:optional: 'False'
                  padre:path: norm_order
                  padre:value_default: '1'
                  padre:value_type: non-zero integer
                  rdfs:comment: Order of the norm used to filter the vectors of
                    coefficients below threshold in the case where the coef_ attribute
                    of the estimator is of dimension 2.
                  rdfs:label: norm_order
                algorithm:
                  '@schema':
                    '@id': padre:SelectFromModel/norm_order
                    '@type': padre:ModelParameters
                    padre:configures: padre:SelectFromModel
            optimisation_parameters: []
    :feature_selection.univariate_selection.GenericUnivariateSelect:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.feature_selection.univariate_selection.GenericUnivariateSelect
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:GenericUnivariateSelect
            rdfs:comment: null
            rdfs:label: univariate feature selector
          algorithm:
            '@schema':
              '@id': padre:GenericUnivariateSelect
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: univariate feature selector
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.feature_selection.univariate_selection.GenericUnivariateSelect/score_function
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.feature_selection.univariate_selection.GenericUnivariateSelect/score_function
                  padre:implements: padre:GenericUnivariateSelect/score_function
                  padre:optional: 'False'
                  padre:path: score_func
                  padre:value_default: <function f_classif>
                  padre:value_type: callable
                  rdfs:comment: 'Function taking two arrays X and y, and returning
                  a pair of arrays (scores, pvalues). '
                  rdfs:label: score_function
                algorithm:
                  '@schema':
                    '@id': padre:GenericUnivariateSelect/score_function
                    '@type': padre:ModelParameters
                    padre:configures: padre:GenericUnivariateSelect
              - '@schema':
                  '@id': padre:sklearn.feature_selection.univariate_selection.GenericUnivariateSelect/mode
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.feature_selection.univariate_selection.GenericUnivariateSelect/mode
                  padre:implements: padre:GenericUnivariateSelect/mode
                  padre:optional: 'False'
                  padre:path: mode
                  padre:value_default: '''percentile'''
                  padre:value_type: ' {''percentile'', ''k_best'', ''fpr'', ''fdr'',
                  ''fwe''}'
                  rdfs:comment: Feature selection mode.
                  rdfs:label: mode
                algorithm:
                  '@schema':
                    '@id': padre:GenericUnivariateSelect/mode
                    '@type': padre:ModelParameters
                    padre:configures: padre:GenericUnivariateSelect
              - '@schema':
                  '@id': padre:sklearn.feature_selection.univariate_selection.GenericUnivariateSelect/mode_parameter
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.feature_selection.univariate_selection.GenericUnivariateSelect/mode_parameter
                  padre:implements: padre:GenericUnivariateSelect/mode_parameter
                  padre:optional: 'False'
                  padre:path: param
                  padre:value_default: 0,00001
                  padre:value_type: '{float, integer}'
                  rdfs:comment: Parameter of the corresponding mode.
                  rdfs:label: mode_parameter
                algorithm:
                  '@schema':
                    '@id': padre:GenericUnivariateSelect/mode_parameter
                    '@type': padre:ModelParameters
                    padre:configures: padre:GenericUnivariateSelect
            optimisation_parameters: []
    :feature_selection.univariate_selection.SelectFdr:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.feature_selection.univariate_selection.SelectFdr
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:SelectFdr
            rdfs:comment: null
            rdfs:label: select estimated false discovery rate
          algorithm:
            '@schema':
              '@id': padre:SelectFdr
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: select estimated false discovery rate
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.feature_selection.univariate_selection.SelectFdr/score_function
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.feature_selection.univariate_selection.SelectFdr/score_function
                  padre:implements: padre:SelectFdr/score_function
                  padre:optional: 'False'
                  padre:path: score_func
                  padre:value_default: <function f_classif>
                  padre:value_type: callable
                  rdfs:comment: 'Function taking two arrays X and y, and returning
                  a pair of arrays (scores, pvalues). '
                  rdfs:label: score_function
                algorithm:
                  '@schema':
                    '@id': padre:SelectFdr/score_function
                    '@type': padre:ModelParameters
                    padre:configures: padre:SelectFdr
              - '@schema':
                  '@id': padre:sklearn.feature_selection.univariate_selection.SelectFdr/max_uncorrected_p-value
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.feature_selection.univariate_selection.SelectFdr/max_uncorrected_p-value
                  padre:implements: padre:SelectFdr/max_uncorrected_p-value
                  padre:optional: 'True'
                  padre:path: alpha
                  padre:value_default: '0.05'
                  padre:value_type: float
                  rdfs:comment: The highest uncorrected p-value for features to
                    keep.
                  rdfs:label: max_uncorrected_p-value
                algorithm:
                  '@schema':
                    '@id': padre:SelectFdr/max_uncorrected_p-value
                    '@type': padre:ModelParameters
                    padre:configures: padre:SelectFdr
            optimisation_parameters: []
    :feature_selection.univariate_selection.SelectFpr:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.feature_selection.univariate_selection.SelectFpr
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:SelectFpr
            rdfs:comment: null
            rdfs:label: select below false positive rate
          algorithm:
            '@schema':
              '@id': padre:SelectFpr
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: select below false positive rate
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.feature_selection.univariate_selection.SelectFpr/score_function
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.feature_selection.univariate_selection.SelectFpr/score_function
                  padre:implements: padre:SelectFpr/score_function
                  padre:optional: 'False'
                  padre:path: score_func
                  padre:value_default: <function f_classif>
                  padre:value_type: callable
                  rdfs:comment: 'Function taking two arrays X and y, and returning
                  a pair of arrays (scores, pvalues). '
                  rdfs:label: score_function
                algorithm:
                  '@schema':
                    '@id': padre:SelectFpr/score_function
                    '@type': padre:ModelParameters
                    padre:configures: padre:SelectFpr
              - '@schema':
                  '@id': padre:sklearn.feature_selection.univariate_selection.SelectFpr/max_uncorrected_p-value
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.feature_selection.univariate_selection.SelectFpr/max_uncorrected_p-value
                  padre:implements: padre:SelectFpr/max_uncorrected_p-value
                  padre:optional: 'True'
                  padre:path: alpha
                  padre:value_default: '0.05'
                  padre:value_type: float
                  rdfs:comment: The highest uncorrected p-value for features to
                    keep.
                  rdfs:label: max_uncorrected_p-value
                algorithm:
                  '@schema':
                    '@id': padre:SelectFpr/max_uncorrected_p-value
                    '@type': padre:ModelParameters
                    padre:configures: padre:SelectFpr
            optimisation_parameters: []
    :feature_selection.univariate_selection.SelectFwe:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.feature_selection.univariate_selection.SelectFwe
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:SelectFwe
            rdfs:comment: null
            rdfs:label: select familiy-wise error rate
          algorithm:
            '@schema':
              '@id': padre:SelectFwe
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: select familiy-wise error rate
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.feature_selection.univariate_selection.SelectFwe/score_function
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.feature_selection.univariate_selection.SelectFwe/score_function
                  padre:implements: padre:SelectFwe/score_function
                  padre:optional: 'False'
                  padre:path: score_func
                  padre:value_default: <function f_classif>
                  padre:value_type: callable
                  rdfs:comment: 'Function taking two arrays X and y, and returning
                  a pair of arrays (scores, pvalues). '
                  rdfs:label: score_function
                algorithm:
                  '@schema':
                    '@id': padre:SelectFwe/score_function
                    '@type': padre:ModelParameters
                    padre:configures: padre:SelectFwe
              - '@schema':
                  '@id': padre:sklearn.feature_selection.univariate_selection.SelectFwe/max_uncorrected_p-value
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.feature_selection.univariate_selection.SelectFwe/max_uncorrected_p-value
                  padre:implements: padre:SelectFwe/max_uncorrected_p-value
                  padre:optional: 'True'
                  padre:path: alpha
                  padre:value_default: '0.05'
                  padre:value_type: float
                  rdfs:comment: The highest uncorrected p-value for features to
                    keep.
                  rdfs:label: max_uncorrected_p-value
                algorithm:
                  '@schema':
                    '@id': padre:SelectFwe/max_uncorrected_p-value
                    '@type': padre:ModelParameters
                    padre:configures: padre:SelectFwe
            optimisation_parameters: []
    :feature_selection.univariate_selection.SelectKBest:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.feature_selection.univariate_selection.SelectKBest
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:SelectKBest
            rdfs:comment: null
            rdfs:label: select k best
          algorithm:
            '@schema':
              '@id': padre:SelectKBest
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: select k best
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.feature_selection.univariate_selection.SelectKBest/score_function
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.feature_selection.univariate_selection.SelectKBest/score_function
                  padre:implements: padre:SelectKBest/score_function
                  padre:optional: 'False'
                  padre:path: score_func
                  padre:value_default: <function f_classif>
                  padre:value_type: callable
                  rdfs:comment: 'Function taking two arrays X and y, and returning
                  a pair of arrays (scores, pvalues). '
                  rdfs:label: score_function
                algorithm:
                  '@schema':
                    '@id': padre:SelectKBest/score_function
                    '@type': padre:ModelParameters
                    padre:configures: padre:SelectKBest
              - '@schema':
                  '@id': padre:sklearn.feature_selection.univariate_selection.SelectKBest/k
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.feature_selection.univariate_selection.SelectKBest/k
                  padre:implements: padre:SelectKBest/k
                  padre:optional: 'True'
                  padre:path: k
                  padre:value_default: '10'
                  padre:value_type: '{integer, ''all''}'
                  rdfs:comment: Number of top features to select.
                  rdfs:label: k
                algorithm:
                  '@schema':
                    '@id': padre:SelectKBest/k
                    '@type': padre:ModelParameters
                    padre:configures: padre:SelectKBest
            optimisation_parameters: []
    :feature_selection.univariate_selection.SelectPercentile:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.feature_selection.univariate_selection.SelectPercentile
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:SelectPercentile
            rdfs:comment: null
            rdfs:label: select percentile
          algorithm:
            '@schema':
              '@id': padre:SelectPercentile
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: select percentile
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.feature_selection.univariate_selection.SelectPercentile/score_function
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.feature_selection.univariate_selection.SelectPercentile/score_function
                  padre:implements: padre:SelectPercentile/score_function
                  padre:optional: 'False'
                  padre:path: score_func
                  padre:value_default: <function f_classif>
                  padre:value_type: callable
                  rdfs:comment: 'Function taking two arrays X and y, and returning
                  a pair of arrays (scores, pvalues). '
                  rdfs:label: score_function
                algorithm:
                  '@schema':
                    '@id': padre:SelectPercentile/score_function
                    '@type': padre:ModelParameters
                    padre:configures: padre:SelectPercentile
              - '@schema':
                  '@id': padre:sklearn.feature_selection.univariate_selection.SelectPercentile/percentile
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.feature_selection.univariate_selection.SelectPercentile/percentile
                  padre:implements: padre:SelectPercentile/percentile
                  padre:optional: 'True'
                  padre:path: percentile
                  padre:value_default: '10'
                  padre:value_type: integer
                  rdfs:comment: Percent of features to keep.
                  rdfs:label: percentile
                algorithm:
                  '@schema':
                    '@id': padre:SelectPercentile/percentile
                    '@type': padre:ModelParameters
                    padre:configures: padre:SelectPercentile
            optimisation_parameters: []
    :feature_selection.variance_threshold.VarianceThreshold:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.feature_selection.variance_threshold.VarianceThreshold
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:VarianceThreshold
            rdfs:comment: null
            rdfs:label: variance threshold
          algorithm:
            '@schema':
              '@id': padre:VarianceThreshold
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: variance threshold
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.feature_selection.variance_threshold.VarianceThreshold/threshold
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.feature_selection.variance_threshold.VarianceThreshold/threshold
                  padre:implements: padre:VarianceThreshold/threshold
                  padre:optional: 'True'
                  padre:path: threshold
                  padre:value_default: '0.0'
                  padre:value_type: float
                  rdfs:comment: Features with a training-set variance lower than
                    this threshold will be removed.
                  rdfs:label: threshold
                algorithm:
                  '@schema':
                    '@id': padre:VarianceThreshold/threshold
                    '@type': padre:ModelParameters
                    padre:configures: padre:VarianceThreshold
            optimisation_parameters: []
    :gaussian_process.gpc.GaussianProcessClassifier:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.gaussian_process.gpc.GaussianProcessClassifier
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:GaussianProcessClassifier
            rdfs:comment: null
            rdfs:label: gaussian process classification
          algorithm:
            '@schema':
              '@id': padre:GaussianProcessClassifier
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: gaussian process classification
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.gaussian_process.gpc.GaussianProcessClassifier/kernel
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.gaussian_process.gpc.GaussianProcessClassifier/kernel
                  padre:implements: padre:GaussianProcessClassifier/kernel
                  padre:optional: 'False'
                  padre:path: kernel
                  padre:value_default: None
                  padre:value_type: kernel object
                  rdfs:comment: The kernel specifying the covariance function of
                    the GP.
                  rdfs:label: kernel
                algorithm:
                  '@schema':
                    '@id': padre:GaussianProcessClassifier/kernel
                    '@type': padre:ModelParameters
                    padre:configures: padre:GaussianProcessClassifier
              - '@schema':
                  '@id': padre:sklearn.gaussian_process.gpc.GaussianProcessClassifier/kernel_optimizer
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.gaussian_process.gpc.GaussianProcessClassifier/kernel_optimizer
                  padre:implements: padre:GaussianProcessClassifier/kernel_optimizer
                  padre:optional: 'True'
                  padre:path: optimizer
                  padre:value_default: '''fmin_l_bfgs_b'''
                  padre:value_type: '{''fmin_l_bfgs_b'', externally defined optimizer
                  passed as a callable }'
                  rdfs:comment: Optimizer to optimize the kernel parameters.
                  rdfs:label: kernel_optimizer
                algorithm:
                  '@schema':
                    '@id': padre:GaussianProcessClassifier/kernel_optimizer
                    '@type': padre:ModelParameters
                    padre:configures: padre:GaussianProcessClassifier
              - '@schema':
                  '@id': padre:sklearn.gaussian_process.gpc.GaussianProcessClassifier/n_restarts_optimizer
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.gaussian_process.gpc.GaussianProcessClassifier/n_restarts_optimizer
                  padre:implements: padre:GaussianProcessClassifier/n_restarts_optimizer
                  padre:optional: 'True'
                  padre:path: n_restarts_optimizer
                  padre:value_default: '0'
                  padre:value_type: integer
                  rdfs:comment: The number of restarts of the optimizer for finding
                    the kernel's parameters which maximize the log-marginal likelihood.
                    The first run of the optimizer is performed from the kernel's initial
                    parameters, the remaining ones (if any) from thetas sampled log-uniform
                    randomly from the space of allowed theta-values.
                  rdfs:label: n_restarts_optimizer
                algorithm:
                  '@schema':
                    '@id': padre:GaussianProcessClassifier/n_restarts_optimizer
                    '@type': padre:ModelParameters
                    padre:configures: padre:GaussianProcessClassifier
              - '@schema':
                  '@id': padre:sklearn.gaussian_process.gpc.GaussianProcessClassifier/reuse_previous
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.gaussian_process.gpc.GaussianProcessClassifier/reuse_previous
                  padre:implements: padre:GaussianProcessClassifier/reuse_previous
                  padre:optional: 'True'
                  padre:path: warm_start
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: When set to True, the solution of the last Newton
                    iteration on the Laplace approximation of the posterior mode is
                    used as initialization for the next call, otherwise, just erase
                    the previous solution.
                  rdfs:label: reuse_previous
                algorithm:
                  '@schema':
                    '@id': padre:GaussianProcessClassifier/reuse_previous
                    '@type': padre:ModelParameters
                    padre:configures: padre:GaussianProcessClassifier
              - '@schema':
                  '@id': padre:sklearn.gaussian_process.gpc.GaussianProcessClassifier/copy_X_train
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.gaussian_process.gpc.GaussianProcessClassifier/copy_X_train
                  padre:implements: padre:GaussianProcessClassifier/copy_X_train
                  padre:optional: 'True'
                  padre:path: copy_X_train
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: If True, a persistent copy of the training data
                    is stored in the object. Otherwise, just a reference to the training
                    data is stored, which might cause predictions to change if the data
                    is modified externally.
                  rdfs:label: copy_X_train
                algorithm:
                  '@schema':
                    '@id': padre:GaussianProcessClassifier/copy_X_train
                    '@type': padre:ModelParameters
                    padre:configures: padre:GaussianProcessClassifier
              - '@schema':
                  '@id': padre:sklearn.gaussian_process.gpc.GaussianProcessClassifier/random_state
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.gaussian_process.gpc.GaussianProcessClassifier/random_state
                  padre:implements: padre:GaussianProcessClassifier/random_state
                  padre:optional: 'True'
                  padre:path: random_state
                  padre:value_default: None
                  padre:value_type: '{integer, RandomState instance, None}'
                  rdfs:comment: The seed of the pseudo random number generator to
                    use when shuffling the data. If int, random_state is the seed used
                    by the random number generator; If RandomState instance, random_state
                    is the random number generator; If None, the random number generator
                    is the RandomState instance used by np.random.
                  rdfs:label: random_state
                algorithm:
                  '@schema':
                    '@id': padre:GaussianProcessClassifier/random_state
                    '@type': padre:ModelParameters
                    padre:configures: padre:GaussianProcessClassifier
              - '@schema':
                  '@id': padre:sklearn.gaussian_process.gpc.GaussianProcessClassifier/multi_class
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.gaussian_process.gpc.GaussianProcessClassifier/multi_class
                  padre:implements: padre:GaussianProcessClassifier/multi_class
                  padre:optional: 'False'
                  padre:path: multi_class
                  padre:value_default: '''one_vs_rest'''
                  padre:value_type: '{''one_vs_rest'', ''one_vs_one''}'
                  rdfs:comment: Specifies how multi-class classification problems
                    are handled.
                  rdfs:label: multi_class
                algorithm:
                  '@schema':
                    '@id': padre:GaussianProcessClassifier/multi_class
                    '@type': padre:ModelParameters
                    padre:configures: padre:GaussianProcessClassifier
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.gaussian_process.gpc.GaussianProcessClassifier/max_iter_predict
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.gaussian_process.gpc.GaussianProcessClassifier/max_iter_predict
                  padre:implements: padre:GaussianProcessClassifier/max_iter_predict
                  padre:optional: 'True'
                  padre:path: max_iter_predict
                  padre:value_default: '100'
                  padre:value_type: integer
                  rdfs:comment: "The maximum number of iterations in Newton\u2019\
                  s method for approximating the posterior during predict. Smaller\
                  \ values will reduce computation time at the cost of worse results."
                  rdfs:label: max_iter_predict
                algorithm:
                  '@schema':
                    '@id': padre:GaussianProcessClassifier/max_iter_predict
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:GaussianProcessClassifier
              - '@schema':
                  '@id': padre:sklearn.gaussian_process.gpc.GaussianProcessClassifier/jobs
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.gaussian_process.gpc.GaussianProcessClassifier/jobs
                  padre:implements: padre:GaussianProcessClassifier/jobs
                  padre:optional: 'True'
                  padre:path: n_jobs
                  padre:value_default: '1'
                  padre:value_type: integer
                  rdfs:comment: The number of jobs to use for the computation. If
                    -1 all CPUs are used.
                  rdfs:label: jobs
                algorithm:
                  '@schema':
                    '@id': padre:GaussianProcessClassifier/jobs
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:GaussianProcessClassifier
    :gaussian_process.gpr.GaussianProcessRegressor:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.gaussian_process.gpr.GaussianProcessRegressor
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:GaussianProcessRegressor
            rdfs:comment: null
            rdfs:label: gaussian process regression
          algorithm:
            '@schema':
              '@id': padre:GaussianProcessRegressor
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: gaussian process regression
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.gaussian_process.gpr.GaussianProcessRegressor/kernel
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.gaussian_process.gpr.GaussianProcessRegressor/kernel
                  padre:implements: padre:GaussianProcessRegressor/kernel
                  padre:optional: 'False'
                  padre:path: kernel
                  padre:value_default: None
                  padre:value_type: kernel object
                  rdfs:comment: The kernel specifying the covariance function of
                    the GP.
                  rdfs:label: kernel
                algorithm:
                  '@schema':
                    '@id': padre:GaussianProcessRegressor/kernel
                    '@type': padre:ModelParameters
                    padre:configures: padre:GaussianProcessRegressor
              - '@schema':
                  '@id': padre:sklearn.gaussian_process.gpr.GaussianProcessRegressor/alpha
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.gaussian_process.gpr.GaussianProcessRegressor/alpha
                  padre:implements: padre:GaussianProcessRegressor/alpha
                  padre:optional: 'True'
                  padre:path: alpha
                  padre:value_default: '0.0000000001'
                  padre:value_type: '{float, array}'
                  rdfs:comment: Value added to the diagonal of the kernel matrix
                    during fitting. Larger values correspond to increased noise level
                    in the observations. This can also prevent a potential numerical
                    issue during fitting, by ensuring that the calculated values form
                    a positive definite matrix. If an array is passed, it must have
                    the same number of entries as the data used for fitting and is used
                    as datapoint-dependent noise level. Note that this is equivalent
                    to adding a WhiteKernel with c=alpha. Allowing to specify the noise
                    level directly as a parameter is mainly for convenience and for
                    consistency with Ridge.
                  rdfs:label: alpha
                algorithm:
                  '@schema':
                    '@id': padre:GaussianProcessRegressor/alpha
                    '@type': padre:ModelParameters
                    padre:configures: padre:GaussianProcessRegressor
              - '@schema':
                  '@id': padre:sklearn.gaussian_process.gpr.GaussianProcessRegressor/kernel_optimizer
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.gaussian_process.gpr.GaussianProcessRegressor/kernel_optimizer
                  padre:implements: padre:GaussianProcessRegressor/kernel_optimizer
                  padre:optional: 'True'
                  padre:path: optimizer
                  padre:value_default: '''fmin_l_bfgs_b'''
                  padre:value_type: '{''fmin_l_bfgs_b'', externally defined optimizer
                  passed as a callable }'
                  rdfs:comment: Optimizer to optimize the kernel parameters.
                  rdfs:label: kernel_optimizer
                algorithm:
                  '@schema':
                    '@id': padre:GaussianProcessRegressor/kernel_optimizer
                    '@type': padre:ModelParameters
                    padre:configures: padre:GaussianProcessRegressor
              - '@schema':
                  '@id': padre:sklearn.gaussian_process.gpr.GaussianProcessRegressor/n_restarts_optimizer
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.gaussian_process.gpr.GaussianProcessRegressor/n_restarts_optimizer
                  padre:implements: padre:GaussianProcessRegressor/n_restarts_optimizer
                  padre:optional: 'True'
                  padre:path: n_restarts_optimizer
                  padre:value_default: '0'
                  padre:value_type: integer
                  rdfs:comment: The number of restarts of the optimizer for finding
                    the kernel's parameters which maximize the log-marginal likelihood.
                    The first run of the optimizer is performed from the kernel's initial
                    parameters, the remaining ones (if any) from thetas sampled log-uniform
                    randomly from the space of allowed theta-values.
                  rdfs:label: n_restarts_optimizer
                algorithm:
                  '@schema':
                    '@id': padre:GaussianProcessRegressor/n_restarts_optimizer
                    '@type': padre:ModelParameters
                    padre:configures: padre:GaussianProcessRegressor
              - '@schema':
                  '@id': padre:sklearn.gaussian_process.gpr.GaussianProcessRegressor/normalize_y
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.gaussian_process.gpr.GaussianProcessRegressor/normalize_y
                  padre:implements: padre:GaussianProcessRegressor/normalize_y
                  padre:optional: 'True'
                  padre:path: normalize_y
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: Whether the target values y are normalized, i.e.,
                    the mean of the observed target values become zero. This parameter
                    should be set to True if the target values' mean is expected to
                    differ considerable from zero. When enabled, the normalization effectively
                    modifies the GP's prior based on the data, which contradicts the
                    likelihood principle.
                  rdfs:label: normalize_y
                algorithm:
                  '@schema':
                    '@id': padre:GaussianProcessRegressor/normalize_y
                    '@type': padre:ModelParameters
                    padre:configures: padre:GaussianProcessRegressor
              - '@schema':
                  '@id': padre:sklearn.gaussian_process.gpr.GaussianProcessRegressor/copy_X_train
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.gaussian_process.gpr.GaussianProcessRegressor/copy_X_train
                  padre:implements: padre:GaussianProcessRegressor/copy_X_train
                  padre:optional: 'True'
                  padre:path: copy_X_train
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: If True, a persistent copy of the training data
                    is stored in the object. Otherwise, just a reference to the training
                    data is stored, which might cause predictions to change if the data
                    is modified externally.
                  rdfs:label: copy_X_train
                algorithm:
                  '@schema':
                    '@id': padre:GaussianProcessRegressor/copy_X_train
                    '@type': padre:ModelParameters
                    padre:configures: padre:GaussianProcessRegressor
              - '@schema':
                  '@id': padre:sklearn.gaussian_process.gpr.GaussianProcessRegressor/random_state
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.gaussian_process.gpr.GaussianProcessRegressor/random_state
                  padre:implements: padre:GaussianProcessRegressor/random_state
                  padre:optional: 'True'
                  padre:path: random_state
                  padre:value_default: None
                  padre:value_type: '{integer, RandomState instance, None}'
                  rdfs:comment: The seed of the pseudo random number generator to
                    use when shuffling the data. If int, random_state is the seed used
                    by the random number generator; If RandomState instance, random_state
                    is the random number generator; If None, the random number generator
                    is the RandomState instance used by np.random.
                  rdfs:label: random_state
                algorithm:
                  '@schema':
                    '@id': padre:GaussianProcessRegressor/random_state
                    '@type': padre:ModelParameters
                    padre:configures: padre:GaussianProcessRegressor
            optimisation_parameters: []
    :isotonic.IsotonicRegression:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.isotonic.IsotonicRegression
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:IsotonicRegression
            rdfs:comment: null
            rdfs:label: isotonic regression
          algorithm:
            '@schema':
              '@id': padre:IsotonicRegression
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: isotonic regression
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.isotonic.IsotonicRegression/min_fit
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.isotonic.IsotonicRegression/min_fit
                  padre:implements: padre:IsotonicRegression/min_fit
                  padre:optional: 'True'
                  padre:path: y_min
                  padre:value_default: None
                  padre:value_type: '{float, None}'
                  rdfs:comment: If not None, set the lowest value of the fit to
                    min_fit
                  rdfs:label: min_fit
                algorithm:
                  '@schema':
                    '@id': padre:IsotonicRegression/min_fit
                    '@type': padre:ModelParameters
                    padre:configures: padre:IsotonicRegression
              - '@schema':
                  '@id': padre:sklearn.isotonic.IsotonicRegression/max_fit
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.isotonic.IsotonicRegression/max_fit
                  padre:implements: padre:IsotonicRegression/max_fit
                  padre:optional: 'True'
                  padre:path: y_max
                  padre:value_default: None
                  padre:value_type: '{float, None}'
                  rdfs:comment: If not None, set the highest value of the fit to
                    max_fit
                  rdfs:label: max_fit
                algorithm:
                  '@schema':
                    '@id': padre:IsotonicRegression/max_fit
                    '@type': padre:ModelParameters
                    padre:configures: padre:IsotonicRegression
              - '@schema':
                  '@id': padre:sklearn.isotonic.IsotonicRegression/increasing
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.isotonic.IsotonicRegression/increasing
                  padre:implements: padre:IsotonicRegression/increasing
                  padre:optional: 'True'
                  padre:path: increasing
                  padre:value_default: 'True'
                  padre:value_type: '{''auto'', boolean}'
                  rdfs:comment: "If boolean, whether or not to fit the isotonic\
                  \ regression with outputs increasing or decreasing. The string value\
                  \ \u201Cauto\u201D determines whether outputs should increase or\
                  \ decrease based on the Spearman correlation estimate\u2019s sign."
                  rdfs:label: increasing
                algorithm:
                  '@schema':
                    '@id': padre:IsotonicRegression/increasing
                    '@type': padre:ModelParameters
                    padre:configures: padre:IsotonicRegression
              - '@schema':
                  '@id': padre:sklearn.isotonic.IsotonicRegression/out_of_bounds
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.isotonic.IsotonicRegression/out_of_bounds
                  padre:implements: padre:IsotonicRegression/out_of_bounds
                  padre:optional: 'True'
                  padre:path: out_of_bounds
                  padre:value_default: '''nan'''
                  padre:value_type: '{''nan, ''clip'', ''raise''}'
                  rdfs:comment: Defines how input-values outside the training domain
                    should be handled. 'nan' set predictions to NaN, 'clip' set predicted
                    values to the value corresponding to the nearest train interval
                    endpoint. 'raise' allows to throw a ValueError.
                  rdfs:label: out_of_bounds
                algorithm:
                  '@schema':
                    '@id': padre:IsotonicRegression/out_of_bounds
                    '@type': padre:ModelParameters
                    padre:configures: padre:IsotonicRegression
            optimisation_parameters: []
    :kernel_ridge.KernelRidge:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.kernel_ridge.KernelRidge
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:KernelRidge
            rdfs:comment: null
            rdfs:label: kernel ridge regression
          algorithm:
            '@schema':
              '@id': padre:KernelRidge
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: kernel ridge regression
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.kernel_ridge.KernelRidge/regularisation_strength
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.kernel_ridge.KernelRidge/regularisation_strength
                  padre:implements: padre:KernelRidge/regularisation_strength
                  padre:optional: 'False'
                  padre:path: alpha
                  padre:value_default: '1.0'
                  padre:value_type: float, array-like in the shape of the targets
                  rdfs:comment: Regularization strength; must be a positive float.
                    Regularization improves the conditioning of the problem and reduces
                    the variance of the estimates. Larger values specify stronger regularization.
                    Lambda corresponds to C^-1 in other linear models such as LogisticRegression
                    or LinearSVC.
                  rdfs:label: regularisation_strength
                algorithm:
                  '@schema':
                    '@id': padre:KernelRidge/regularisation_strength
                    '@type': padre:ModelParameters
                    padre:configures: padre:KernelRidge
              - '@schema':
                  '@id': padre:sklearn.kernel_ridge.KernelRidge/kernel
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.kernel_ridge.KernelRidge/kernel
                  padre:implements: padre:KernelRidge/kernel
                  padre:optional: 'False'
                  padre:path: kernel
                  padre:value_default: '''linear'''
                  padre:value_type: '{''linear'', ''poly'', ''rbf'', ''sigmoid'', ''cosine'',
                  ''gaussian'', ''tophat'', ''epanechnikov'', ''exponential'', ''precomputed'',
                  callable which accepts two arguments and the keyword arguments passed
                  to this object as kernel_params, and should return a floating point
                  number.}'
                  rdfs:comment: Kernel mapping used internally.
                  rdfs:label: kernel
                algorithm:
                  '@schema':
                    '@id': padre:KernelRidge/kernel
                    '@type': padre:ModelParameters
                    padre:configures: padre:KernelRidge
              - '@schema':
                  '@id': padre:sklearn.kernel_ridge.KernelRidge/gamma
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.kernel_ridge.KernelRidge/gamma
                  padre:implements: padre:KernelRidge/gamma
                  padre:optional: 'False'
                  padre:path: gamma
                  padre:value_default: None
                  padre:value_type: float
                  rdfs:comment: Gamma parameter for the RBF, laplacian, polynomial,
                    exponential chi2 and sigmoid kernels. Interpretation depends on
                    kernels.
                  rdfs:label: gamma
                algorithm:
                  '@schema':
                    '@id': padre:KernelRidge/gamma
                    '@type': padre:ModelParameters
                    padre:configures: padre:KernelRidge
              - '@schema':
                  '@id': padre:sklearn.kernel_ridge.KernelRidge/kernel_degree
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.kernel_ridge.KernelRidge/kernel_degree
                  padre:implements: padre:KernelRidge/kernel_degree
                  padre:optional: 'False'
                  padre:path: degree
                  padre:value_default: '3.0'
                  padre:value_type: float
                  rdfs:comment: Degree of the polynomial kernel.
                  rdfs:label: kernel_degree
                algorithm:
                  '@schema':
                    '@id': padre:KernelRidge/kernel_degree
                    '@type': padre:ModelParameters
                    padre:configures: padre:KernelRidge
              - '@schema':
                  '@id': padre:sklearn.kernel_ridge.KernelRidge/zero_coefficient
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.kernel_ridge.KernelRidge/zero_coefficient
                  padre:implements: padre:KernelRidge/zero_coefficient
                  padre:optional: 'False'
                  padre:path: coef0
                  padre:value_default: '1.0'
                  padre:value_type: float
                  rdfs:comment: Zero coefficient for polynomial and sigmoid kernels.
                  rdfs:label: zero_coefficient
                algorithm:
                  '@schema':
                    '@id': padre:KernelRidge/zero_coefficient
                    '@type': padre:ModelParameters
                    padre:configures: padre:KernelRidge
              - '@schema':
                  '@id': padre:sklearn.kernel_ridge.KernelRidge/kernel_parameters
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.kernel_ridge.KernelRidge/kernel_parameters
                  padre:implements: padre:KernelRidge/kernel_parameters
                  padre:optional: 'True'
                  padre:path: kernel_params
                  padre:value_default: None
                  padre:value_type: mapping of string to any
                  rdfs:comment: Additional parameters (keyword arguments) for kernel
                    function passed as callable object.
                  rdfs:label: kernel_parameters
                algorithm:
                  '@schema':
                    '@id': padre:KernelRidge/kernel_parameters
                    '@type': padre:ModelParameters
                    padre:configures: padre:KernelRidge
            optimisation_parameters: []
    :linear_model.base.LinearRegression:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.linear_model.base.LinearRegression
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:LinearRegression
            rdfs:comment: null
            rdfs:label: linear regression
          algorithm:
            '@schema':
              '@id': padre:LinearRegression
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: linear regression
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.linear_model.base.LinearRegression/fit_intercept
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.base.LinearRegression/fit_intercept
                  padre:implements: padre:LinearRegression/fit_intercept
                  padre:optional: 'True'
                  padre:path: fit_intercept
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: Whether to calculate the intercept for this model.
                  rdfs:label: fit_intercept
                algorithm:
                  '@schema':
                    '@id': padre:LinearRegression/fit_intercept
                    '@type': padre:ModelParameters
                    padre:configures: padre:LinearRegression
              - '@schema':
                  '@id': padre:sklearn.linear_model.base.LinearRegression/normalize
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.base.LinearRegression/normalize
                  padre:implements: padre:LinearRegression/normalize
                  padre:optional: 'True'
                  padre:path: normalize
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: Normalizes the regressors before regression by subtracting
                    the mean and dividing by the l2-norm.
                  rdfs:label: normalize
                algorithm:
                  '@schema':
                    '@id': padre:LinearRegression/normalize
                    '@type': padre:ModelParameters
                    padre:configures: padre:LinearRegression
              - '@schema':
                  '@id': padre:sklearn.linear_model.base.LinearRegression/copy_X
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.base.LinearRegression/copy_X
                  padre:implements: padre:LinearRegression/copy_X
                  padre:optional: 'True'
                  padre:path: copy_X
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: If True, X will be copied; else, it may be overwritten.
                  rdfs:label: copy_X
                algorithm:
                  '@schema':
                    '@id': padre:LinearRegression/copy_X
                    '@type': padre:ModelParameters
                    padre:configures: padre:LinearRegression
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.linear_model.base.LinearRegression/jobs
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.linear_model.base.LinearRegression/jobs
                  padre:implements: padre:LinearRegression/jobs
                  padre:optional: 'True'
                  padre:path: n_jobs
                  padre:value_default: '1'
                  padre:value_type: integer
                  rdfs:comment: The number of jobs to use for the computation. If
                    -1 all CPUs are used.
                  rdfs:label: jobs
                algorithm:
                  '@schema':
                    '@id': padre:LinearRegression/jobs
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:LinearRegression
    :linear_model.bayes.ARDRegression:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.linear_model.bayes.ARDRegression
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:ARDRegression
            rdfs:comment: null
            rdfs:label: automatic relevance determination regression
          algorithm:
            '@schema':
              '@id': padre:ARDRegression
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: automatic relevance determination regression
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.linear_model.bayes.ARDRegression/tolerance
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.bayes.ARDRegression/tolerance
                  padre:implements: padre:ARDRegression/tolerance
                  padre:optional: 'True'
                  padre:path: tol
                  padre:value_default: '0.001'
                  padre:value_type: float
                  rdfs:comment: Precision of the solution. (The tolerance for the
                    optimisation.)
                  rdfs:label: tolerance
                algorithm:
                  '@schema':
                    '@id': padre:ARDRegression/tolerance
                    '@type': padre:ModelParameters
                    padre:configures: padre:ARDRegression
              - '@schema':
                  '@id': padre:sklearn.linear_model.bayes.ARDRegression/alpha_1
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.bayes.ARDRegression/alpha_1
                  padre:implements: padre:ARDRegression/alpha_1
                  padre:optional: 'True'
                  padre:path: alpha_1
                  padre:value_default: 1e-06
                  padre:value_type: float
                  rdfs:comment: Shape parameter for the Gamma distribution prior
                    over the alpha parameter.
                  rdfs:label: alpha_1
                algorithm:
                  '@schema':
                    '@id': padre:ARDRegression/alpha_1
                    '@type': padre:ModelParameters
                    padre:configures: padre:ARDRegression
              - '@schema':
                  '@id': padre:sklearn.linear_model.bayes.ARDRegression/alpha_2
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.bayes.ARDRegression/alpha_2
                  padre:implements: padre:ARDRegression/alpha_2
                  padre:optional: 'True'
                  padre:path: alpha_2
                  padre:value_default: 1e-06
                  padre:value_type: float
                  rdfs:comment: Inverse scale parameter (rate parameter) for the
                    Gamma distribution prior over the alpha parameter.
                  rdfs:label: alpha_2
                algorithm:
                  '@schema':
                    '@id': padre:ARDRegression/alpha_2
                    '@type': padre:ModelParameters
                    padre:configures: padre:ARDRegression
              - '@schema':
                  '@id': padre:sklearn.linear_model.bayes.ARDRegression/lambda_1
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.bayes.ARDRegression/lambda_1
                  padre:implements: padre:ARDRegression/lambda_1
                  padre:optional: 'True'
                  padre:path: lambda_1
                  padre:value_default: 1e-06
                  padre:value_type: float
                  rdfs:comment: Shape parameter for the Gamma distribution prior
                    over the lambda parameter.
                  rdfs:label: lambda_1
                algorithm:
                  '@schema':
                    '@id': padre:ARDRegression/lambda_1
                    '@type': padre:ModelParameters
                    padre:configures: padre:ARDRegression
              - '@schema':
                  '@id': padre:sklearn.linear_model.bayes.ARDRegression/lambda_2
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.bayes.ARDRegression/lambda_2
                  padre:implements: padre:ARDRegression/lambda_2
                  padre:optional: 'True'
                  padre:path: lambda_2
                  padre:value_default: 1e-06
                  padre:value_type: float
                  rdfs:comment: Inverse scale parameter (rate parameter) for the
                    Gamma distribution prior over the lambda parameter.
                  rdfs:label: lambda_2
                algorithm:
                  '@schema':
                    '@id': padre:ARDRegression/lambda_2
                    '@type': padre:ModelParameters
                    padre:configures: padre:ARDRegression
              - '@schema':
                  '@id': padre:sklearn.linear_model.bayes.ARDRegression/threshold_lambda
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.bayes.ARDRegression/threshold_lambda
                  padre:implements: padre:ARDRegression/threshold_lambda
                  padre:optional: 'True'
                  padre:path: threshold_lambda
                  padre:value_default: '10000.0'
                  padre:value_type: float
                  rdfs:comment: Threshold for removing (pruning) weights with high
                    precision from the computation.
                  rdfs:label: threshold_lambda
                algorithm:
                  '@schema':
                    '@id': padre:ARDRegression/threshold_lambda
                    '@type': padre:ModelParameters
                    padre:configures: padre:ARDRegression
              - '@schema':
                  '@id': padre:sklearn.linear_model.bayes.ARDRegression/fit_intercept
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.bayes.ARDRegression/fit_intercept
                  padre:implements: padre:ARDRegression/fit_intercept
                  padre:optional: 'True'
                  padre:path: fit_intercept
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: Whether to calculate the intercept for this model.
                  rdfs:label: fit_intercept
                algorithm:
                  '@schema':
                    '@id': padre:ARDRegression/fit_intercept
                    '@type': padre:ModelParameters
                    padre:configures: padre:ARDRegression
              - '@schema':
                  '@id': padre:sklearn.linear_model.bayes.ARDRegression/normalize
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.bayes.ARDRegression/normalize
                  padre:implements: padre:ARDRegression/normalize
                  padre:optional: 'True'
                  padre:path: normalize
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: Normalizes the regressors before regression by subtracting
                    the mean and dividing by the l2-norm.
                  rdfs:label: normalize
                algorithm:
                  '@schema':
                    '@id': padre:ARDRegression/normalize
                    '@type': padre:ModelParameters
                    padre:configures: padre:ARDRegression
              - '@schema':
                  '@id': padre:sklearn.linear_model.bayes.ARDRegression/copy_X
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.bayes.ARDRegression/copy_X
                  padre:implements: padre:ARDRegression/copy_X
                  padre:optional: 'True'
                  padre:path: copy_X
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: If True, X will be copied; else, it may be overwritten.
                  rdfs:label: copy_X
                algorithm:
                  '@schema':
                    '@id': padre:ARDRegression/copy_X
                    '@type': padre:ModelParameters
                    padre:configures: padre:ARDRegression
              - '@schema':
                  '@id': padre:sklearn.linear_model.bayes.ARDRegression/verbose
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.bayes.ARDRegression/verbose
                  padre:implements: padre:ARDRegression/verbose
                  padre:optional: 'True'
                  padre:path: verbose
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: Verbose mode when fitting the model.
                  rdfs:label: verbose
                algorithm:
                  '@schema':
                    '@id': padre:ARDRegression/verbose
                    '@type': padre:ModelParameters
                    padre:configures: padre:ARDRegression
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.linear_model.bayes.ARDRegression/max_iterations
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.linear_model.bayes.ARDRegression/max_iterations
                  padre:implements: padre:ARDRegression/max_iterations
                  padre:optional: 'True'
                  padre:path: n_iter
                  padre:value_default: '300'
                  padre:value_type: integer
                  rdfs:comment: Maximum number of iterations.
                  rdfs:label: max_iterations
                algorithm:
                  '@schema':
                    '@id': padre:ARDRegression/max_iterations
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:ARDRegression
              - '@schema':
                  '@id': padre:sklearn.linear_model.bayes.ARDRegression/compute_score
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.linear_model.bayes.ARDRegression/compute_score
                  padre:implements: padre:ARDRegression/compute_score
                  padre:optional: 'True'
                  padre:path: compute_score
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: If True, compute the objective function at each
                    step of the model.
                  rdfs:label: compute_score
                algorithm:
                  '@schema':
                    '@id': padre:ARDRegression/compute_score
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:ARDRegression
    :linear_model.bayes.BayesianRidge:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.linear_model.bayes.BayesianRidge
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:BayesianRidge
            rdfs:comment: null
            rdfs:label: bayesian ridge regression
          algorithm:
            '@schema':
              '@id': padre:BayesianRidge
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: bayesian ridge regression
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.linear_model.bayes.BayesianRidge/tolerance
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.bayes.BayesianRidge/tolerance
                  padre:implements: padre:BayesianRidge/tolerance
                  padre:optional: 'True'
                  padre:path: tol
                  padre:value_default: '0.001'
                  padre:value_type: float
                  rdfs:comment: Precision of the solution. (The tolerance for the
                    optimisation.)
                  rdfs:label: tolerance
                algorithm:
                  '@schema':
                    '@id': padre:BayesianRidge/tolerance
                    '@type': padre:ModelParameters
                    padre:configures: padre:BayesianRidge
              - '@schema':
                  '@id': padre:sklearn.linear_model.bayes.BayesianRidge/alpha_1
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.bayes.BayesianRidge/alpha_1
                  padre:implements: padre:BayesianRidge/alpha_1
                  padre:optional: 'True'
                  padre:path: alpha_1
                  padre:value_default: '0.000006'
                  padre:value_type: float
                  rdfs:comment: Shape parameter for the Gamma distribution prior
                    over the alpha parameter.
                  rdfs:label: alpha_1
                algorithm:
                  '@schema':
                    '@id': padre:BayesianRidge/alpha_1
                    '@type': padre:ModelParameters
                    padre:configures: padre:BayesianRidge
              - '@schema':
                  '@id': padre:sklearn.linear_model.bayes.BayesianRidge/alpha_2
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.bayes.BayesianRidge/alpha_2
                  padre:implements: padre:BayesianRidge/alpha_2
                  padre:optional: 'True'
                  padre:path: alpha_2
                  padre:value_default: '0.000006'
                  padre:value_type: float
                  rdfs:comment: Inverse scale parameter (rate parameter) for the
                    Gamma distribution prior over the alpha parameter.
                  rdfs:label: alpha_2
                algorithm:
                  '@schema':
                    '@id': padre:BayesianRidge/alpha_2
                    '@type': padre:ModelParameters
                    padre:configures: padre:BayesianRidge
              - '@schema':
                  '@id': padre:sklearn.linear_model.bayes.BayesianRidge/lambda_1
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.bayes.BayesianRidge/lambda_1
                  padre:implements: padre:BayesianRidge/lambda_1
                  padre:optional: 'True'
                  padre:path: lambda_1
                  padre:value_default: '0.000006'
                  padre:value_type: float
                  rdfs:comment: Shape parameter for the Gamma distribution prior
                    over the lambda parameter.
                  rdfs:label: lambda_1
                algorithm:
                  '@schema':
                    '@id': padre:BayesianRidge/lambda_1
                    '@type': padre:ModelParameters
                    padre:configures: padre:BayesianRidge
              - '@schema':
                  '@id': padre:sklearn.linear_model.bayes.BayesianRidge/lambda_2
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.bayes.BayesianRidge/lambda_2
                  padre:implements: padre:BayesianRidge/lambda_2
                  padre:optional: 'True'
                  padre:path: lambda_2
                  padre:value_default: '0.000006'
                  padre:value_type: float
                  rdfs:comment: Inverse scale parameter (rate parameter) for the
                    Gamma distribution prior over the lambda parameter.
                  rdfs:label: lambda_2
                algorithm:
                  '@schema':
                    '@id': padre:BayesianRidge/lambda_2
                    '@type': padre:ModelParameters
                    padre:configures: padre:BayesianRidge
              - '@schema':
                  '@id': padre:sklearn.linear_model.bayes.BayesianRidge/fit_intercept
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.bayes.BayesianRidge/fit_intercept
                  padre:implements: padre:BayesianRidge/fit_intercept
                  padre:optional: 'True'
                  padre:path: fit_intercept
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: Whether to calculate the intercept for this model.
                  rdfs:label: fit_intercept
                algorithm:
                  '@schema':
                    '@id': padre:BayesianRidge/fit_intercept
                    '@type': padre:ModelParameters
                    padre:configures: padre:BayesianRidge
              - '@schema':
                  '@id': padre:sklearn.linear_model.bayes.BayesianRidge/normalize
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.bayes.BayesianRidge/normalize
                  padre:implements: padre:BayesianRidge/normalize
                  padre:optional: 'True'
                  padre:path: normalize
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: Normalizes the regressors before regression by subtracting
                    the mean and dividing by the l2-norm.
                  rdfs:label: normalize
                algorithm:
                  '@schema':
                    '@id': padre:BayesianRidge/normalize
                    '@type': padre:ModelParameters
                    padre:configures: padre:BayesianRidge
              - '@schema':
                  '@id': padre:sklearn.linear_model.bayes.BayesianRidge/copy_X
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.bayes.BayesianRidge/copy_X
                  padre:implements: padre:BayesianRidge/copy_X
                  padre:optional: 'True'
                  padre:path: copy_X
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: If True, X will be copied; else, it may be overwritten.
                  rdfs:label: copy_X
                algorithm:
                  '@schema':
                    '@id': padre:BayesianRidge/copy_X
                    '@type': padre:ModelParameters
                    padre:configures: padre:BayesianRidge
              - '@schema':
                  '@id': padre:sklearn.linear_model.bayes.BayesianRidge/verbose
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.bayes.BayesianRidge/verbose
                  padre:implements: padre:BayesianRidge/verbose
                  padre:optional: 'True'
                  padre:path: verbose
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: Verbose mode when fitting the model.
                  rdfs:label: verbose
                algorithm:
                  '@schema':
                    '@id': padre:BayesianRidge/verbose
                    '@type': padre:ModelParameters
                    padre:configures: padre:BayesianRidge
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.linear_model.bayes.BayesianRidge/max_iterations
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.linear_model.bayes.BayesianRidge/max_iterations
                  padre:implements: padre:BayesianRidge/max_iterations
                  padre:optional: 'True'
                  padre:path: n_iter
                  padre:value_default: '300'
                  padre:value_type: integer
                  rdfs:comment: Maximum number of iterations.
                  rdfs:label: max_iterations
                algorithm:
                  '@schema':
                    '@id': padre:BayesianRidge/max_iterations
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:BayesianRidge
              - '@schema':
                  '@id': padre:sklearn.linear_model.bayes.BayesianRidge/compute_score
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.linear_model.bayes.BayesianRidge/compute_score
                  padre:implements: padre:BayesianRidge/compute_score
                  padre:optional: 'True'
                  padre:path: compute_score
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: If True, compute the objective function at each
                    step of the model.
                  rdfs:label: compute_score
                algorithm:
                  '@schema':
                    '@id': padre:BayesianRidge/compute_score
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:BayesianRidge
    :linear_model.coordinate_descent.ElasticNet:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.linear_model.coordinate_descent.ElasticNet
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:ElasticNet
            rdfs:comment: null
            rdfs:label: elastic net
          algorithm:
            '@schema':
              '@id': padre:ElasticNet
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: elastic net
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.linear_model.coordinate_descent.ElasticNet/l1_l2_multiplier
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.coordinate_descent.ElasticNet/l1_l2_multiplier
                  padre:implements: padre:ElasticNet/l1_l2_multiplier
                  padre:optional: 'True'
                  padre:path: alpha
                  padre:value_default: '1.0'
                  padre:value_type: float
                  rdfs:comment: Constant that multiplies the L1/L2 term.
                  rdfs:label: l1_l2_multiplier
                algorithm:
                  '@schema':
                    '@id': padre:ElasticNet/l1_l2_multiplier
                    '@type': padre:ModelParameters
                    padre:configures: padre:ElasticNet
              - '@schema':
                  '@id': padre:sklearn.linear_model.coordinate_descent.ElasticNet/l1_ratio
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.coordinate_descent.ElasticNet/l1_ratio
                  padre:implements: padre:ElasticNet/l1_ratio
                  padre:optional: 'False'
                  padre:path: l1_ratio
                  padre:value_default: '0.5'
                  padre:value_type: float
                  rdfs:comment: The ElasticNet mixing parameter, with 0 <= l1_ratio
                    <= 1. For l1_ratio = 0 the penalty is an L2 penalty. For l1_ratio
                    = 1 it is an L1 penalty. For 0 < l1_ratio < 1, the penalty is a
                    combination of L1 and L2.
                  rdfs:label: l1_ratio
                algorithm:
                  '@schema':
                    '@id': padre:ElasticNet/l1_ratio
                    '@type': padre:ModelParameters
                    padre:configures: padre:ElasticNet
              - '@schema':
                  '@id': padre:sklearn.linear_model.coordinate_descent.ElasticNet/fit_intercept
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.coordinate_descent.ElasticNet/fit_intercept
                  padre:implements: padre:ElasticNet/fit_intercept
                  padre:optional: 'False'
                  padre:path: fit_intercept
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: Whether to calculate the intercept for this model.
                  rdfs:label: fit_intercept
                algorithm:
                  '@schema':
                    '@id': padre:ElasticNet/fit_intercept
                    '@type': padre:ModelParameters
                    padre:configures: padre:ElasticNet
              - '@schema':
                  '@id': padre:sklearn.linear_model.coordinate_descent.ElasticNet/normalize
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.coordinate_descent.ElasticNet/normalize
                  padre:implements: padre:ElasticNet/normalize
                  padre:optional: 'True'
                  padre:path: normalize
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: Normalizes the regressors before regression by subtracting
                    the mean and dividing by the I2-norm.
                  rdfs:label: normalize
                algorithm:
                  '@schema':
                    '@id': padre:ElasticNet/normalize
                    '@type': padre:ModelParameters
                    padre:configures: padre:ElasticNet
              - '@schema':
                  '@id': padre:sklearn.linear_model.coordinate_descent.ElasticNet/copy_X
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.coordinate_descent.ElasticNet/copy_X
                  padre:implements: padre:ElasticNet/copy_X
                  padre:optional: 'True'
                  padre:path: copy_X
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: If True, X will be copied; else, it may be overwritten.
                  rdfs:label: copy_X
                algorithm:
                  '@schema':
                    '@id': padre:ElasticNet/copy_X
                    '@type': padre:ModelParameters
                    padre:configures: padre:ElasticNet
              - '@schema':
                  '@id': padre:sklearn.linear_model.coordinate_descent.ElasticNet/tolerance
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.coordinate_descent.ElasticNet/tolerance
                  padre:implements: padre:ElasticNet/tolerance
                  padre:optional: 'True'
                  padre:path: tol
                  padre:value_default: '0.0001'
                  padre:value_type: float
                  rdfs:comment: 'The tolerance for the optimization: if the updates
                  are smaller than tol, the optimization code checks the dual gap
                  for optimality and continues until it is smaller than tol.'
                  rdfs:label: tolerance
                algorithm:
                  '@schema':
                    '@id': padre:ElasticNet/tolerance
                    '@type': padre:ModelParameters
                    padre:configures: padre:ElasticNet
              - '@schema':
                  '@id': padre:sklearn.linear_model.coordinate_descent.ElasticNet/reuse_previous
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.coordinate_descent.ElasticNet/reuse_previous
                  padre:implements: padre:ElasticNet/reuse_previous
                  padre:optional: 'True'
                  padre:path: warm_start
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: When set to True, reuse the solution of the previous
                    call to fit as initialization, otherwise, just erase the previous
                    solution.
                  rdfs:label: reuse_previous
                algorithm:
                  '@schema':
                    '@id': padre:ElasticNet/reuse_previous
                    '@type': padre:ModelParameters
                    padre:configures: padre:ElasticNet
              - '@schema':
                  '@id': padre:sklearn.linear_model.coordinate_descent.ElasticNet/positive_coef
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.coordinate_descent.ElasticNet/positive_coef
                  padre:implements: padre:ElasticNet/positive_coef
                  padre:optional: 'True'
                  padre:path: positive
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: When set to True, forces the coefficients to be
                    positive.
                  rdfs:label: positive_coef
                algorithm:
                  '@schema':
                    '@id': padre:ElasticNet/positive_coef
                    '@type': padre:ModelParameters
                    padre:configures: padre:ElasticNet
              - '@schema':
                  '@id': padre:sklearn.linear_model.coordinate_descent.ElasticNet/random_state
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.coordinate_descent.ElasticNet/random_state
                  padre:implements: padre:ElasticNet/random_state
                  padre:optional: 'True'
                  padre:path: random_state
                  padre:value_default: None
                  padre:value_type: '{integer, RandomState instance, None}'
                  rdfs:comment: The seed of the pseudo random number generator to
                    use when shuffling the data. If int, random_state is the seed used
                    by the random number generator; If RandomState instance, random_state
                    is the random number generator; If None, the random number generator
                    is the RandomState instance used by np.random.
                  rdfs:label: random_state
                algorithm:
                  '@schema':
                    '@id': padre:ElasticNet/random_state
                    '@type': padre:ModelParameters
                    padre:configures: padre:ElasticNet
              - '@schema':
                  '@id': padre:sklearn.linear_model.coordinate_descent.ElasticNet/selection
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.coordinate_descent.ElasticNet/selection
                  padre:implements: padre:ElasticNet/selection
                  padre:optional: 'False'
                  padre:path: selection
                  padre:value_default: '''cyclic'''
                  padre:value_type: '{''random'', ''cyclic''}'
                  rdfs:comment: If set to 'random', a random coefficient is updated
                    every iteration rather than looping over features sequentially by
                    default.
                  rdfs:label: selection
                algorithm:
                  '@schema':
                    '@id': padre:ElasticNet/selection
                    '@type': padre:ModelParameters
                    padre:configures: padre:ElasticNet
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.linear_model.coordinate_descent.ElasticNet/precompute
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.linear_model.coordinate_descent.ElasticNet/precompute
                  padre:implements: padre:ElasticNet/precompute
                  padre:optional: 'False'
                  padre:path: precompute
                  padre:value_default: 'False'
                  padre:value_type: '{boolean, array-like, ''auto''}'
                  rdfs:comment: Whether to use a precomputed Gram matrix to speed
                    up calculations. The Gram matrix can also be passed as argument.
                  rdfs:label: precompute
                algorithm:
                  '@schema':
                    '@id': padre:ElasticNet/precompute
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:ElasticNet
              - '@schema':
                  '@id': padre:sklearn.linear_model.coordinate_descent.ElasticNet/max_iterations
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.linear_model.coordinate_descent.ElasticNet/max_iterations
                  padre:implements: padre:ElasticNet/max_iterations
                  padre:optional: 'True'
                  padre:path: max_iter
                  padre:value_default: None
                  padre:value_type: integer
                  rdfs:comment: Maximum number of iterations.
                  rdfs:label: max_iterations
                algorithm:
                  '@schema':
                    '@id': padre:ElasticNet/max_iterations
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:ElasticNet
    :linear_model.coordinate_descent.Lasso:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.linear_model.coordinate_descent.Lasso
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:Lasso
            rdfs:comment: null
            rdfs:label: lasso
          algorithm:
            '@schema':
              '@id': padre:Lasso
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: lasso
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.linear_model.coordinate_descent.Lasso/l1_multiplier
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.coordinate_descent.Lasso/l1_multiplier
                  padre:implements: padre:Lasso/l1_multiplier
                  padre:optional: 'True'
                  padre:path: alpha
                  padre:value_default: '1.0'
                  padre:value_type: float
                  rdfs:comment: Constant that multiplies the L1 term.
                  rdfs:label: l1_multiplier
                algorithm:
                  '@schema':
                    '@id': padre:Lasso/l1_multiplier
                    '@type': padre:ModelParameters
                    padre:configures: padre:Lasso
              - '@schema':
                  '@id': padre:sklearn.linear_model.coordinate_descent.Lasso/fit_intercept
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.coordinate_descent.Lasso/fit_intercept
                  padre:implements: padre:Lasso/fit_intercept
                  padre:optional: 'False'
                  padre:path: fit_intercept
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: Whether to calculate the intercept for this model.
                  rdfs:label: fit_intercept
                algorithm:
                  '@schema':
                    '@id': padre:Lasso/fit_intercept
                    '@type': padre:ModelParameters
                    padre:configures: padre:Lasso
              - '@schema':
                  '@id': padre:sklearn.linear_model.coordinate_descent.Lasso/normalize
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.coordinate_descent.Lasso/normalize
                  padre:implements: padre:Lasso/normalize
                  padre:optional: 'True'
                  padre:path: normalize
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: Normalizes the regressors before regression by subtracting
                    the mean and dividing by the I2-norm.
                  rdfs:label: normalize
                algorithm:
                  '@schema':
                    '@id': padre:Lasso/normalize
                    '@type': padre:ModelParameters
                    padre:configures: padre:Lasso
              - '@schema':
                  '@id': padre:sklearn.linear_model.coordinate_descent.Lasso/copy_X
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.coordinate_descent.Lasso/copy_X
                  padre:implements: padre:Lasso/copy_X
                  padre:optional: 'True'
                  padre:path: copy_X
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: If True, X will be copied; else, it may be overwritten.
                  rdfs:label: copy_X
                algorithm:
                  '@schema':
                    '@id': padre:Lasso/copy_X
                    '@type': padre:ModelParameters
                    padre:configures: padre:Lasso
              - '@schema':
                  '@id': padre:sklearn.linear_model.coordinate_descent.Lasso/tolerance
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.coordinate_descent.Lasso/tolerance
                  padre:implements: padre:Lasso/tolerance
                  padre:optional: 'True'
                  padre:path: tol
                  padre:value_default: '0.0001'
                  padre:value_type: float
                  rdfs:comment: 'The tolerance for the optimization: if the updates
                  are smaller than tolerance, the optimization code checks the dual
                  gap for optimality and continues until it is smaller than tol.'
                  rdfs:label: tolerance
                algorithm:
                  '@schema':
                    '@id': padre:Lasso/tolerance
                    '@type': padre:ModelParameters
                    padre:configures: padre:Lasso
              - '@schema':
                  '@id': padre:sklearn.linear_model.coordinate_descent.Lasso/reuse_previous
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.coordinate_descent.Lasso/reuse_previous
                  padre:implements: padre:Lasso/reuse_previous
                  padre:optional: 'True'
                  padre:path: warm_start
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: When set to True, reuse the solution of the previous
                    call to fit as initialization, otherwise, just erase the previous
                    solution.
                  rdfs:label: reuse_previous
                algorithm:
                  '@schema':
                    '@id': padre:Lasso/reuse_previous
                    '@type': padre:ModelParameters
                    padre:configures: padre:Lasso
              - '@schema':
                  '@id': padre:sklearn.linear_model.coordinate_descent.Lasso/positive_coef
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.coordinate_descent.Lasso/positive_coef
                  padre:implements: padre:Lasso/positive_coef
                  padre:optional: 'True'
                  padre:path: positive
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: When set to True, forces the coefficients to be
                    positive.
                  rdfs:label: positive_coef
                algorithm:
                  '@schema':
                    '@id': padre:Lasso/positive_coef
                    '@type': padre:ModelParameters
                    padre:configures: padre:Lasso
              - '@schema':
                  '@id': padre:sklearn.linear_model.coordinate_descent.Lasso/random_state
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.coordinate_descent.Lasso/random_state
                  padre:implements: padre:Lasso/random_state
                  padre:optional: 'True'
                  padre:path: random_state
                  padre:value_default: None
                  padre:value_type: '{integer, RandomState instance, None}'
                  rdfs:comment: The seed of the pseudo random number generator to
                    use when shuffling the data. If int, random_state is the seed used
                    by the random number generator; If RandomState instance, random_state
                    is the random number generator; If None, the random number generator
                    is the RandomState instance used by np.random.
                  rdfs:label: random_state
                algorithm:
                  '@schema':
                    '@id': padre:Lasso/random_state
                    '@type': padre:ModelParameters
                    padre:configures: padre:Lasso
              - '@schema':
                  '@id': padre:sklearn.linear_model.coordinate_descent.Lasso/selection
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.coordinate_descent.Lasso/selection
                  padre:implements: padre:Lasso/selection
                  padre:optional: 'False'
                  padre:path: selection
                  padre:value_default: '''cyclic'''
                  padre:value_type: '{''cyclic'', ''random''}'
                  rdfs:comment: If set to 'random', a random coefficient is updated
                    every iteration rather than looping over features sequentially by
                    default.
                  rdfs:label: selection
                algorithm:
                  '@schema':
                    '@id': padre:Lasso/selection
                    '@type': padre:ModelParameters
                    padre:configures: padre:Lasso
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.linear_model.coordinate_descent.Lasso/max_iterations
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.linear_model.coordinate_descent.Lasso/max_iterations
                  padre:implements: padre:Lasso/max_iterations
                  padre:optional: 'True'
                  padre:path: max_iter
                  padre:value_default: None
                  padre:value_type: integer
                  rdfs:comment: Maximum number of iterations.
                  rdfs:label: max_iterations
                algorithm:
                  '@schema':
                    '@id': padre:Lasso/max_iterations
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:Lasso
              - '@schema':
                  '@id': padre:sklearn.linear_model.coordinate_descent.Lasso/precompute
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.linear_model.coordinate_descent.Lasso/precompute
                  padre:implements: padre:Lasso/precompute
                  padre:optional: 'False'
                  padre:path: precompute
                  padre:value_default: 'False'
                  padre:value_type: '{boolean, array-like, ''auto''}'
                  rdfs:comment: Whether to use a precomputed Gram matrix to speed
                    up calculations. The Gram matrix can also be passed as argument.
                  rdfs:label: precompute
                algorithm:
                  '@schema':
                    '@id': padre:Lasso/precompute
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:Lasso
    :linear_model.coordinate_descent.MultiTaskElasticNet:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.linear_model.coordinate_descent.MultiTaskElasticNet
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:MultiTaskElasticNet
            rdfs:comment: null
            rdfs:label: multi-task elastic net
          algorithm:
            '@schema':
              '@id': padre:MultiTaskElasticNet
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: multi-task elastic net
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.linear_model.coordinate_descent.MultiTaskElasticNet/l1_l2_multiplier
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.coordinate_descent.MultiTaskElasticNet/l1_l2_multiplier
                  padre:implements: padre:MultiTaskElasticNet/l1_l2_multiplier
                  padre:optional: 'True'
                  padre:path: alpha
                  padre:value_default: '1.0'
                  padre:value_type: float
                  rdfs:comment: Constant that multiplies the L1/L2 term.
                  rdfs:label: l1_l2_multiplier
                algorithm:
                  '@schema':
                    '@id': padre:MultiTaskElasticNet/l1_l2_multiplier
                    '@type': padre:ModelParameters
                    padre:configures: padre:MultiTaskElasticNet
              - '@schema':
                  '@id': padre:sklearn.linear_model.coordinate_descent.MultiTaskElasticNet/l1_ratio
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.coordinate_descent.MultiTaskElasticNet/l1_ratio
                  padre:implements: padre:MultiTaskElasticNet/l1_ratio
                  padre:optional: 'False'
                  padre:path: l1_ratio
                  padre:value_default: '0.5'
                  padre:value_type: float
                  rdfs:comment: The ElasticNet mixing parameter, with 0 <= l1_ratio
                    <= 1. For l1_ratio = 0 the penalty is an L2 penalty. For l1_ratio
                    = 1 it is an L1 penalty. For 0 < l1_ratio < 1, the penalty is a
                    combination of L1 and L2.
                  rdfs:label: l1_ratio
                algorithm:
                  '@schema':
                    '@id': padre:MultiTaskElasticNet/l1_ratio
                    '@type': padre:ModelParameters
                    padre:configures: padre:MultiTaskElasticNet
              - '@schema':
                  '@id': padre:sklearn.linear_model.coordinate_descent.MultiTaskElasticNet/fit_intercept
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.coordinate_descent.MultiTaskElasticNet/fit_intercept
                  padre:implements: padre:MultiTaskElasticNet/fit_intercept
                  padre:optional: 'False'
                  padre:path: fit_intercept
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: Whether to calculate the intercept for this model.
                  rdfs:label: fit_intercept
                algorithm:
                  '@schema':
                    '@id': padre:MultiTaskElasticNet/fit_intercept
                    '@type': padre:ModelParameters
                    padre:configures: padre:MultiTaskElasticNet
              - '@schema':
                  '@id': padre:sklearn.linear_model.coordinate_descent.MultiTaskElasticNet/normalize
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.coordinate_descent.MultiTaskElasticNet/normalize
                  padre:implements: padre:MultiTaskElasticNet/normalize
                  padre:optional: 'True'
                  padre:path: normalize
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: Normalizes the regressors before regression by subtracting
                    the mean and dividing by the I2-norm.
                  rdfs:label: normalize
                algorithm:
                  '@schema':
                    '@id': padre:MultiTaskElasticNet/normalize
                    '@type': padre:ModelParameters
                    padre:configures: padre:MultiTaskElasticNet
              - '@schema':
                  '@id': padre:sklearn.linear_model.coordinate_descent.MultiTaskElasticNet/copy_X
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.coordinate_descent.MultiTaskElasticNet/copy_X
                  padre:implements: padre:MultiTaskElasticNet/copy_X
                  padre:optional: 'True'
                  padre:path: copy_X
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: If True, X will be copied; else, it may be overwritten.
                  rdfs:label: copy_X
                algorithm:
                  '@schema':
                    '@id': padre:MultiTaskElasticNet/copy_X
                    '@type': padre:ModelParameters
                    padre:configures: padre:MultiTaskElasticNet
              - '@schema':
                  '@id': padre:sklearn.linear_model.coordinate_descent.MultiTaskElasticNet/tolerance
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.coordinate_descent.MultiTaskElasticNet/tolerance
                  padre:implements: padre:MultiTaskElasticNet/tolerance
                  padre:optional: 'True'
                  padre:path: tol
                  padre:value_default: '0.0001'
                  padre:value_type: float
                  rdfs:comment: 'The tolerance for the optimization: if the updates
                  are smaller than tol, the optimization code checks the dual gap
                  for optimality and continues until it is smaller than tol.'
                  rdfs:label: tolerance
                algorithm:
                  '@schema':
                    '@id': padre:MultiTaskElasticNet/tolerance
                    '@type': padre:ModelParameters
                    padre:configures: padre:MultiTaskElasticNet
              - '@schema':
                  '@id': padre:sklearn.linear_model.coordinate_descent.MultiTaskElasticNet/reuse_previous
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.coordinate_descent.MultiTaskElasticNet/reuse_previous
                  padre:implements: padre:MultiTaskElasticNet/reuse_previous
                  padre:optional: 'True'
                  padre:path: warm_start
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: When set to True, reuse the solution of the previous
                    call to fit as initialization, otherwise, just erase the previous
                    solution.
                  rdfs:label: reuse_previous
                algorithm:
                  '@schema':
                    '@id': padre:MultiTaskElasticNet/reuse_previous
                    '@type': padre:ModelParameters
                    padre:configures: padre:MultiTaskElasticNet
              - '@schema':
                  '@id': padre:sklearn.linear_model.coordinate_descent.MultiTaskElasticNet/random_state
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.coordinate_descent.MultiTaskElasticNet/random_state
                  padre:implements: padre:MultiTaskElasticNet/random_state
                  padre:optional: 'True'
                  padre:path: random_state
                  padre:value_default: None
                  padre:value_type: '{integer, RandomState instance, None}'
                  rdfs:comment: The seed of the pseudo random number generator to
                    use when shuffling the data. If int, random_state is the seed used
                    by the random number generator; If RandomState instance, random_state
                    is the random number generator; If None, the random number generator
                    is the RandomState instance used by np.random.
                  rdfs:label: random_state
                algorithm:
                  '@schema':
                    '@id': padre:MultiTaskElasticNet/random_state
                    '@type': padre:ModelParameters
                    padre:configures: padre:MultiTaskElasticNet
              - '@schema':
                  '@id': padre:sklearn.linear_model.coordinate_descent.MultiTaskElasticNet/selection
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.coordinate_descent.MultiTaskElasticNet/selection
                  padre:implements: padre:MultiTaskElasticNet/selection
                  padre:optional: 'False'
                  padre:path: selection
                  padre:value_default: '''cyclic'''
                  padre:value_type: '{''random'', ''cyclic''}'
                  rdfs:comment: If set to 'random', a random coefficient is updated
                    every iteration rather than looping over features sequentially by
                    default.
                  rdfs:label: selection
                algorithm:
                  '@schema':
                    '@id': padre:MultiTaskElasticNet/selection
                    '@type': padre:ModelParameters
                    padre:configures: padre:MultiTaskElasticNet
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.linear_model.coordinate_descent.MultiTaskElasticNet/max_iterations
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.linear_model.coordinate_descent.MultiTaskElasticNet/max_iterations
                  padre:implements: padre:MultiTaskElasticNet/max_iterations
                  padre:optional: 'True'
                  padre:path: max_iter
                  padre:value_default: None
                  padre:value_type: integer
                  rdfs:comment: Maximum number of iterations.
                  rdfs:label: max_iterations
                algorithm:
                  '@schema':
                    '@id': padre:MultiTaskElasticNet/max_iterations
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:MultiTaskElasticNet
    :linear_model.coordinate_descent.MultiTaskLasso:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.linear_model.coordinate_descent.MultiTaskLasso
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:MultiTaskLasso
            rdfs:comment: null
            rdfs:label: multi-task lasso
          algorithm:
            '@schema':
              '@id': padre:MultiTaskLasso
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: multi-task lasso
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.linear_model.coordinate_descent.MultiTaskLasso/l1_l2_multiplier
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.coordinate_descent.MultiTaskLasso/l1_l2_multiplier
                  padre:implements: padre:MultiTaskLasso/l1_l2_multiplier
                  padre:optional: 'True'
                  padre:path: alpha
                  padre:value_default: '1.0'
                  padre:value_type: float
                  rdfs:comment: Constant that multiplies the L1/L2 term.
                  rdfs:label: l1_l2_multiplier
                algorithm:
                  '@schema':
                    '@id': padre:MultiTaskLasso/l1_l2_multiplier
                    '@type': padre:ModelParameters
                    padre:configures: padre:MultiTaskLasso
              - '@schema':
                  '@id': padre:sklearn.linear_model.coordinate_descent.MultiTaskLasso/fit_intercept
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.coordinate_descent.MultiTaskLasso/fit_intercept
                  padre:implements: padre:MultiTaskLasso/fit_intercept
                  padre:optional: 'False'
                  padre:path: fit_intercept
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: Whether to calculate the intercept for this model.
                  rdfs:label: fit_intercept
                algorithm:
                  '@schema':
                    '@id': padre:MultiTaskLasso/fit_intercept
                    '@type': padre:ModelParameters
                    padre:configures: padre:MultiTaskLasso
              - '@schema':
                  '@id': padre:sklearn.linear_model.coordinate_descent.MultiTaskLasso/normalize
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.coordinate_descent.MultiTaskLasso/normalize
                  padre:implements: padre:MultiTaskLasso/normalize
                  padre:optional: 'True'
                  padre:path: normalize
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: Normalizes the regressors before regression by subtracting
                    the mean and dividing by the I2-norm.
                  rdfs:label: normalize
                algorithm:
                  '@schema':
                    '@id': padre:MultiTaskLasso/normalize
                    '@type': padre:ModelParameters
                    padre:configures: padre:MultiTaskLasso
              - '@schema':
                  '@id': padre:sklearn.linear_model.coordinate_descent.MultiTaskLasso/copy_X
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.coordinate_descent.MultiTaskLasso/copy_X
                  padre:implements: padre:MultiTaskLasso/copy_X
                  padre:optional: 'True'
                  padre:path: copy_X
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: If True, X will be copied; else, it may be overwritten.
                  rdfs:label: copy_X
                algorithm:
                  '@schema':
                    '@id': padre:MultiTaskLasso/copy_X
                    '@type': padre:ModelParameters
                    padre:configures: padre:MultiTaskLasso
              - '@schema':
                  '@id': padre:sklearn.linear_model.coordinate_descent.MultiTaskLasso/tolerance
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.coordinate_descent.MultiTaskLasso/tolerance
                  padre:implements: padre:MultiTaskLasso/tolerance
                  padre:optional: 'True'
                  padre:path: tol
                  padre:value_default: '0.0001'
                  padre:value_type: float
                  rdfs:comment: 'The tolerance for the optimization: if the updates
                  are smaller than tol, the optimization code checks the dual gap
                  for optimality and continues until it is smaller than tol.'
                  rdfs:label: tolerance
                algorithm:
                  '@schema':
                    '@id': padre:MultiTaskLasso/tolerance
                    '@type': padre:ModelParameters
                    padre:configures: padre:MultiTaskLasso
              - '@schema':
                  '@id': padre:sklearn.linear_model.coordinate_descent.MultiTaskLasso/reuse_previous
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.coordinate_descent.MultiTaskLasso/reuse_previous
                  padre:implements: padre:MultiTaskLasso/reuse_previous
                  padre:optional: 'True'
                  padre:path: warm_start
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: When set to True, reuse the solution of the previous
                    call to fit as initialization, otherwise, just erase the previous
                    solution.
                  rdfs:label: reuse_previous
                algorithm:
                  '@schema':
                    '@id': padre:MultiTaskLasso/reuse_previous
                    '@type': padre:ModelParameters
                    padre:configures: padre:MultiTaskLasso
              - '@schema':
                  '@id': padre:sklearn.linear_model.coordinate_descent.MultiTaskLasso/random_state
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.coordinate_descent.MultiTaskLasso/random_state
                  padre:implements: padre:MultiTaskLasso/random_state
                  padre:optional: 'True'
                  padre:path: random_state
                  padre:value_default: None
                  padre:value_type: '{integer, RandomState instance, None}'
                  rdfs:comment: The seed of the pseudo random number generator to
                    use when shuffling the data. If int, random_state is the seed used
                    by the random number generator; If RandomState instance, random_state
                    is the random number generator; If None, the random number generator
                    is the RandomState instance used by np.random.
                  rdfs:label: random_state
                algorithm:
                  '@schema':
                    '@id': padre:MultiTaskLasso/random_state
                    '@type': padre:ModelParameters
                    padre:configures: padre:MultiTaskLasso
              - '@schema':
                  '@id': padre:sklearn.linear_model.coordinate_descent.MultiTaskLasso/selection
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.coordinate_descent.MultiTaskLasso/selection
                  padre:implements: padre:MultiTaskLasso/selection
                  padre:optional: 'False'
                  padre:path: selection
                  padre:value_default: '''cyclic'''
                  padre:value_type: '{''random'', ''cyclic''}'
                  rdfs:comment: If set to 'random', a random coefficient is updated
                    every iteration rather than looping over features sequentially by
                    default.
                  rdfs:label: selection
                algorithm:
                  '@schema':
                    '@id': padre:MultiTaskLasso/selection
                    '@type': padre:ModelParameters
                    padre:configures: padre:MultiTaskLasso
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.linear_model.coordinate_descent.MultiTaskLasso/max_iterations
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.linear_model.coordinate_descent.MultiTaskLasso/max_iterations
                  padre:implements: padre:MultiTaskLasso/max_iterations
                  padre:optional: 'True'
                  padre:path: max_iter
                  padre:value_default: None
                  padre:value_type: integer
                  rdfs:comment: Maximum number of iterations.
                  rdfs:label: max_iterations
                algorithm:
                  '@schema':
                    '@id': padre:MultiTaskLasso/max_iterations
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:MultiTaskLasso
    :linear_model.huber.HuberRegressor:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.linear_model.huber.HuberRegressor
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:HuberRegressor
            rdfs:comment: null
            rdfs:label: huber regressor
          algorithm:
            '@schema':
              '@id': padre:HuberRegressor
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: huber regressor
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.linear_model.huber.HuberRegressor/number_of_outliers
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.huber.HuberRegressor/number_of_outliers
                  padre:implements: padre:HuberRegressor/number_of_outliers
                  padre:optional: 'False'
                  padre:path: epsilon
                  padre:value_default: '1.35'
                  padre:value_type: float > 1.0
                  rdfs:comment: The parameter controls the number of samples that
                    should be classified as outliers. The smaller the parameter, the
                    more robust it is to outliers.
                  rdfs:label: number_of_outliers
                algorithm:
                  '@schema':
                    '@id': padre:HuberRegressor/number_of_outliers
                    '@type': padre:ModelParameters
                    padre:configures: padre:HuberRegressor
              - '@schema':
                  '@id': padre:sklearn.linear_model.huber.HuberRegressor/regularization_parameter
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.huber.HuberRegressor/regularization_parameter
                  padre:implements: padre:HuberRegressor/regularization_parameter
                  padre:optional: 'False'
                  padre:path: alpha
                  padre:value_default: '0.0001'
                  padre:value_type: float
                  rdfs:comment: Regularization parameter.
                  rdfs:label: regularization_parameter
                algorithm:
                  '@schema':
                    '@id': padre:HuberRegressor/regularization_parameter
                    '@type': padre:ModelParameters
                    padre:configures: padre:HuberRegressor
              - '@schema':
                  '@id': padre:sklearn.linear_model.huber.HuberRegressor/reuse_previous
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.huber.HuberRegressor/reuse_previous
                  padre:implements: padre:HuberRegressor/reuse_previous
                  padre:optional: 'False'
                  padre:path: warm_start
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: When set to True, reuse the solution of the previous
                    call to fit as initialization, otherwise, just erase the previous
                    solution.
                  rdfs:label: reuse_previous
                algorithm:
                  '@schema':
                    '@id': padre:HuberRegressor/reuse_previous
                    '@type': padre:ModelParameters
                    padre:configures: padre:HuberRegressor
              - '@schema':
                  '@id': padre:sklearn.linear_model.huber.HuberRegressor/fit_intercept
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.huber.HuberRegressor/fit_intercept
                  padre:implements: padre:HuberRegressor/fit_intercept
                  padre:optional: 'True'
                  padre:path: fit_intercept
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: Whether to calculate the intercept for this model.
                  rdfs:label: fit_intercept
                algorithm:
                  '@schema':
                    '@id': padre:HuberRegressor/fit_intercept
                    '@type': padre:ModelParameters
                    padre:configures: padre:HuberRegressor
              - '@schema':
                  '@id': padre:sklearn.linear_model.huber.HuberRegressor/tolerance
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.huber.HuberRegressor/tolerance
                  padre:implements: padre:HuberRegressor/tolerance
                  padre:optional: 'True'
                  padre:path: tol
                  padre:value_default: 1e-05
                  padre:value_type: float
                  rdfs:comment: The stopping criterion.
                  rdfs:label: tolerance
                algorithm:
                  '@schema':
                    '@id': padre:HuberRegressor/tolerance
                    '@type': padre:ModelParameters
                    padre:configures: padre:HuberRegressor
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.linear_model.huber.HuberRegressor/max_iterations
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.linear_model.huber.HuberRegressor/max_iterations
                  padre:implements: padre:HuberRegressor/max_iterations
                  padre:optional: 'False'
                  padre:path: max_iter
                  padre:value_default: '100'
                  padre:value_type: integer
                  rdfs:comment: Maximum number of iterations that scipy.optimize.fmin_l_bfgs_b
                    should run for.
                  rdfs:label: max_iterations
                algorithm:
                  '@schema':
                    '@id': padre:HuberRegressor/max_iterations
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:HuberRegressor
    :linear_model.least_angle.Lars:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.linear_model.least_angle.Lars
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:Lars
            rdfs:comment: null
            rdfs:label: least angle regression
          algorithm:
            '@schema':
              '@id': padre:Lars
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: least angle regression
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.linear_model.least_angle.Lars/fit_intercept
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.least_angle.Lars/fit_intercept
                  padre:implements: padre:Lars/fit_intercept
                  padre:optional: 'False'
                  padre:path: fit_intercept
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: Whether to calculate the intercept for this model.
                  rdfs:label: fit_intercept
                algorithm:
                  '@schema':
                    '@id': padre:Lars/fit_intercept
                    '@type': padre:ModelParameters
                    padre:configures: padre:Lars
              - '@schema':
                  '@id': padre:sklearn.linear_model.least_angle.Lars/normalize
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.least_angle.Lars/normalize
                  padre:implements: padre:Lars/normalize
                  padre:optional: 'True'
                  padre:path: normalize
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: Normalizes the regressors before regression by subtracting
                    the mean and dividing by the I2-norm.
                  rdfs:label: normalize
                algorithm:
                  '@schema':
                    '@id': padre:Lars/normalize
                    '@type': padre:ModelParameters
                    padre:configures: padre:Lars
              - '@schema':
                  '@id': padre:sklearn.linear_model.least_angle.Lars/nonzero_coefficients
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.least_angle.Lars/nonzero_coefficients
                  padre:implements: padre:Lars/nonzero_coefficients
                  padre:optional: 'True'
                  padre:path: n_nonzero_coefs
                  padre:value_default: '500'
                  padre:value_type: integer
                  rdfs:comment: Target number of non-zero coefficients.
                  rdfs:label: nonzero_coefficients
                algorithm:
                  '@schema':
                    '@id': padre:Lars/nonzero_coefficients
                    '@type': padre:ModelParameters
                    padre:configures: padre:Lars
              - '@schema':
                  '@id': padre:sklearn.linear_model.least_angle.Lars/eps
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.least_angle.Lars/eps
                  padre:implements: padre:Lars/eps
                  padre:optional: 'True'
                  padre:path: eps
                  padre:value_default: '2.2204460492503131e-16'
                  padre:value_type: float
                  rdfs:comment: The machine-precision regularization in the computation
                    of the Cholesky diagonal factors. Increase this for very ill-conditioned
                    systems.
                  rdfs:label: eps
                algorithm:
                  '@schema':
                    '@id': padre:Lars/eps
                    '@type': padre:ModelParameters
                    padre:configures: padre:Lars
              - '@schema':
                  '@id': padre:sklearn.linear_model.least_angle.Lars/copy_X
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.least_angle.Lars/copy_X
                  padre:implements: padre:Lars/copy_X
                  padre:optional: 'True'
                  padre:path: copy_X
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: If True, X will be copied; else, it may be overwritten.
                  rdfs:label: copy_X
                algorithm:
                  '@schema':
                    '@id': padre:Lars/copy_X
                    '@type': padre:ModelParameters
                    padre:configures: padre:Lars
              - '@schema':
                  '@id': padre:sklearn.linear_model.least_angle.Lars/positive_coef
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.least_angle.Lars/positive_coef
                  padre:implements: padre:Lars/positive_coef
                  padre:optional: 'True'
                  padre:path: positive
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: When set to True, forces the coefficients to be
                    positive.
                  rdfs:label: positive_coef
                algorithm:
                  '@schema':
                    '@id': padre:Lars/positive_coef
                    '@type': padre:ModelParameters
                    padre:configures: padre:Lars
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.linear_model.least_angle.Lars/precompute
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.linear_model.least_angle.Lars/precompute
                  padre:implements: padre:Lars/precompute
                  padre:optional: 'False'
                  padre:path: precompute
                  padre:value_default: 'False'
                  padre:value_type: '{boolean, array-like, ''auto''}'
                  rdfs:comment: Whether to use a precomputed Gram matrix to speed
                    up calculations. The Gram matrix can also be passed as argument.
                  rdfs:label: precompute
                algorithm:
                  '@schema':
                    '@id': padre:Lars/precompute
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:Lars
              - '@schema':
                  '@id': padre:sklearn.linear_model.least_angle.Lars/fit_path
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.linear_model.least_angle.Lars/fit_path
                  padre:implements: padre:Lars/fit_path
                  padre:optional: 'False'
                  padre:path: fit_path
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: If True the full path is stored in the coef_path_
                    attribute. If you compute the solution for a large problem or many
                    targets, setting fit_path to False will lead to a speedup, especially
                    with a small alpha.
                  rdfs:label: fit_path
                algorithm:
                  '@schema':
                    '@id': padre:Lars/fit_path
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:Lars
    :linear_model.least_angle.LassoLars:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.linear_model.least_angle.LassoLars
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:LassoLars
            rdfs:comment: null
            rdfs:label: lasso least angle regression
          algorithm:
            '@schema':
              '@id': padre:LassoLars
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: lasso least angle regression
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.linear_model.least_angle.LassoLars/penalty_multiplier
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.least_angle.LassoLars/penalty_multiplier
                  padre:implements: padre:LassoLars/penalty_multiplier
                  padre:optional: 'True'
                  padre:path: alpha
                  padre:value_default: '1.0'
                  padre:value_type: float
                  rdfs:comment: Constant that multiplies the penalty term.
                  rdfs:label: penalty_multiplier
                algorithm:
                  '@schema':
                    '@id': padre:LassoLars/penalty_multiplier
                    '@type': padre:ModelParameters
                    padre:configures: padre:LassoLars
              - '@schema':
                  '@id': padre:sklearn.linear_model.least_angle.LassoLars/fit_intercept
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.least_angle.LassoLars/fit_intercept
                  padre:implements: padre:LassoLars/fit_intercept
                  padre:optional: 'False'
                  padre:path: fit_intercept
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: Whether to calculate the intercept for this model.
                  rdfs:label: fit_intercept
                algorithm:
                  '@schema':
                    '@id': padre:LassoLars/fit_intercept
                    '@type': padre:ModelParameters
                    padre:configures: padre:LassoLars
              - '@schema':
                  '@id': padre:sklearn.linear_model.least_angle.LassoLars/verbose
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.least_angle.LassoLars/verbose
                  padre:implements: padre:LassoLars/verbose
                  padre:optional: 'True'
                  padre:path: verbose
                  padre:value_default: 'False'
                  padre:value_type: '{boolean, integer}'
                  rdfs:comment: Sets the verbosity amount.
                  rdfs:label: verbose
                algorithm:
                  '@schema':
                    '@id': padre:LassoLars/verbose
                    '@type': padre:ModelParameters
                    padre:configures: padre:LassoLars
              - '@schema':
                  '@id': padre:sklearn.linear_model.least_angle.LassoLars/normalize
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.least_angle.LassoLars/normalize
                  padre:implements: padre:LassoLars/normalize
                  padre:optional: 'True'
                  padre:path: normalize
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: Normalizes the regressors before regression by subtracting
                    the mean and dividing by the I2-norm.
                  rdfs:label: normalize
                algorithm:
                  '@schema':
                    '@id': padre:LassoLars/normalize
                    '@type': padre:ModelParameters
                    padre:configures: padre:LassoLars
              - '@schema':
                  '@id': padre:sklearn.linear_model.least_angle.LassoLars/eps
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.least_angle.LassoLars/eps
                  padre:implements: padre:LassoLars/eps
                  padre:optional: 'True'
                  padre:path: eps
                  padre:value_default: '2.2204460492503131e-16'
                  padre:value_type: float
                  rdfs:comment: The machine-precision regularization in the computation
                    of the Cholesky diagonal factors. Increase this for very ill-conditioned
                    systems.
                  rdfs:label: eps
                algorithm:
                  '@schema':
                    '@id': padre:LassoLars/eps
                    '@type': padre:ModelParameters
                    padre:configures: padre:LassoLars
              - '@schema':
                  '@id': padre:sklearn.linear_model.least_angle.LassoLars/copy_X
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.least_angle.LassoLars/copy_X
                  padre:implements: padre:LassoLars/copy_X
                  padre:optional: 'True'
                  padre:path: copy_X
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: If True, X will be copied; else, it may be overwritten.
                  rdfs:label: copy_X
                algorithm:
                  '@schema':
                    '@id': padre:LassoLars/copy_X
                    '@type': padre:ModelParameters
                    padre:configures: padre:LassoLars
              - '@schema':
                  '@id': padre:sklearn.linear_model.least_angle.LassoLars/positive_coef
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.least_angle.LassoLars/positive_coef
                  padre:implements: padre:LassoLars/positive_coef
                  padre:optional: 'True'
                  padre:path: positive
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: When set to True, forces the coefficients to be
                    positive.
                  rdfs:label: positive_coef
                algorithm:
                  '@schema':
                    '@id': padre:LassoLars/positive_coef
                    '@type': padre:ModelParameters
                    padre:configures: padre:LassoLars
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.linear_model.least_angle.LassoLars/precompute
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.linear_model.least_angle.LassoLars/precompute
                  padre:implements: padre:LassoLars/precompute
                  padre:optional: 'False'
                  padre:path: precompute
                  padre:value_default: '''auto'''
                  padre:value_type: '{True, False, ''auto''}'
                  rdfs:comment: Whether to use a precomputed Gram matrix to speed
                    up calculations. The Gram matrix can also be passed as argument.
                  rdfs:label: precompute
                algorithm:
                  '@schema':
                    '@id': padre:LassoLars/precompute
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:LassoLars
              - '@schema':
                  '@id': padre:sklearn.linear_model.least_angle.LassoLars/max_iterations
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.linear_model.least_angle.LassoLars/max_iterations
                  padre:implements: padre:LassoLars/max_iterations
                  padre:optional: 'True'
                  padre:path: max_iter
                  padre:value_default: None
                  padre:value_type: integer
                  rdfs:comment: Maximum number of iterations.
                  rdfs:label: max_iterations
                algorithm:
                  '@schema':
                    '@id': padre:LassoLars/max_iterations
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:LassoLars
              - '@schema':
                  '@id': padre:sklearn.linear_model.least_angle.LassoLars/fit_path
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.linear_model.least_angle.LassoLars/fit_path
                  padre:implements: padre:LassoLars/fit_path
                  padre:optional: 'False'
                  padre:path: fit_path
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: If True the full path is stored in the coef_path_
                    attribute. If you compute the solution for a large problem or many
                    targets, setting fit_path to False will lead to a speedup, especially
                    with a small alpha.
                  rdfs:label: fit_path
                algorithm:
                  '@schema':
                    '@id': padre:LassoLars/fit_path
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:LassoLars
    :linear_model.logistic.LogisticRegression:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.linear_model.logistic.LogisticRegression
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:LogisticRegression
            rdfs:comment: null
            rdfs:label: logistic regression
          algorithm:
            '@schema':
              '@id': padre:LogisticRegression
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: logistic regression
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.linear_model.logistic.LogisticRegression/penalty_norm
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.logistic.LogisticRegression/penalty_norm
                  padre:implements: padre:LogisticRegression/penalty_norm
                  padre:optional: 'False'
                  padre:path: penalty
                  padre:value_default: '''l2'''
                  padre:value_type: '{l1, l2}'
                  rdfs:comment: Used to specify the norm used in the penalization.
                  rdfs:label: penalty_norm
                algorithm:
                  '@schema':
                    '@id': padre:LogisticRegression/penalty_norm
                    '@type': padre:ModelParameters
                    padre:configures: padre:LogisticRegression
              - '@schema':
                  '@id': padre:sklearn.linear_model.logistic.LogisticRegression/dual
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.logistic.LogisticRegression/dual
                  padre:implements: padre:LogisticRegression/dual
                  padre:optional: 'False'
                  padre:path: dual
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: Dual or primal formulation.
                  rdfs:label: dual
                algorithm:
                  '@schema':
                    '@id': padre:LogisticRegression/dual
                    '@type': padre:ModelParameters
                    padre:configures: padre:LogisticRegression
              - '@schema':
                  '@id': padre:sklearn.linear_model.logistic.LogisticRegression/tolerance
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.logistic.LogisticRegression/tolerance
                  padre:implements: padre:LogisticRegression/tolerance
                  padre:optional: 'False'
                  padre:path: tol
                  padre:value_default: '0.0001'
                  padre:value_type: float
                  rdfs:comment: Tolerance for stopping criteria.
                  rdfs:label: tolerance
                algorithm:
                  '@schema':
                    '@id': padre:LogisticRegression/tolerance
                    '@type': padre:ModelParameters
                    padre:configures: padre:LogisticRegression
              - '@schema':
                  '@id': padre:sklearn.linear_model.logistic.LogisticRegression/inverse_regularisation_strength
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.logistic.LogisticRegression/inverse_regularisation_strength
                  padre:implements: padre:LogisticRegression/inverse_regularisation_strength
                  padre:optional: 'False'
                  padre:path: C
                  padre:value_default: '1.0'
                  padre:value_type: float
                  rdfs:comment: Inverse of regularization strength; must be a positive
                    float. Like in support vector machines, smaller values specify stronger
                    regularization.
                  rdfs:label: inverse_regularisation_strength
                algorithm:
                  '@schema':
                    '@id': padre:LogisticRegression/inverse_regularisation_strength
                    '@type': padre:ModelParameters
                    padre:configures: padre:LogisticRegression
              - '@schema':
                  '@id': padre:sklearn.linear_model.logistic.LogisticRegression/fit_intercept
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.logistic.LogisticRegression/fit_intercept
                  padre:implements: padre:LogisticRegression/fit_intercept
                  padre:optional: 'False'
                  padre:path: fit_intercept
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: Specifies if a constant (a.k.a. bias or intercept)
                    should be added to the decision function.
                  rdfs:label: fit_intercept
                algorithm:
                  '@schema':
                    '@id': padre:LogisticRegression/fit_intercept
                    '@type': padre:ModelParameters
                    padre:configures: padre:LogisticRegression
              - '@schema':
                  '@id': padre:sklearn.linear_model.logistic.LogisticRegression/intercept_scaling
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.logistic.LogisticRegression/intercept_scaling
                  padre:implements: padre:LogisticRegression/intercept_scaling
                  padre:optional: 'False'
                  padre:path: intercept_scaling
                  padre:value_default: '1'
                  padre:value_type: float
                  rdfs:comment: "Useful only when the solver \u2018liblinear\u2019\
                  \ is used and self.fit_intercept is set to True. In this case, x\
                  \ becomes [x, self.intercept_scaling], i.e. a \u201Csynthetic\u201D\
                  \ feature with constant value equal to intercept_scaling is appended\
                  \ to the instance vector. The intercept becomes intercept_scaling\
                  \ * synthetic_feature_weight."
                  rdfs:label: intercept_scaling
                algorithm:
                  '@schema':
                    '@id': padre:LogisticRegression/intercept_scaling
                    '@type': padre:ModelParameters
                    padre:configures: padre:LogisticRegression
              - '@schema':
                  '@id': padre:sklearn.linear_model.logistic.LogisticRegression/class_weight
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.logistic.LogisticRegression/class_weight
                  padre:implements: padre:LogisticRegression/class_weight
                  padre:optional: 'False'
                  padre:path: class_weight
                  padre:value_default: None
                  padre:value_type: '{dict, ''balanced'', None}'
                  rdfs:comment: Weights associated with classes.
                  rdfs:label: class_weight
                algorithm:
                  '@schema':
                    '@id': padre:LogisticRegression/class_weight
                    '@type': padre:ModelParameters
                    padre:configures: padre:LogisticRegression
              - '@schema':
                  '@id': padre:sklearn.linear_model.logistic.LogisticRegression/random_state
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.logistic.LogisticRegression/random_state
                  padre:implements: padre:LogisticRegression/random_state
                  padre:optional: 'True'
                  padre:path: random_state
                  padre:value_default: None
                  padre:value_type: '{integer, RandomState instance, None}'
                  rdfs:comment: The seed of the pseudo random number generator to
                    use when shuffling the data. If int, random_state is the seed used
                    by the random number generator; If RandomState instance, random_state
                    is the random number generator; If None, the random number generator
                    is the RandomState instance used by np.random.
                  rdfs:label: random_state
                algorithm:
                  '@schema':
                    '@id': padre:LogisticRegression/random_state
                    '@type': padre:ModelParameters
                    padre:configures: padre:LogisticRegression
              - '@schema':
                  '@id': padre:sklearn.linear_model.logistic.LogisticRegression/solver
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.logistic.LogisticRegression/solver
                  padre:implements: padre:LogisticRegression/solver
                  padre:optional: 'False'
                  padre:path: solver
                  padre:value_default: '''liblinear'''
                  padre:value_type: '{''newton-cg'', ''lbfgs'', ''liblinear'', ''sag'',
                  ''saga''}'
                  rdfs:comment: Solver to use in the computational routines.
                  rdfs:label: solver
                algorithm:
                  '@schema':
                    '@id': padre:LogisticRegression/solver
                    '@type': padre:ModelParameters
                    padre:configures: padre:LogisticRegression
              - '@schema':
                  '@id': padre:sklearn.linear_model.logistic.LogisticRegression/multi_class
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.logistic.LogisticRegression/multi_class
                  padre:implements: padre:LogisticRegression/multi_class
                  padre:optional: 'False'
                  padre:path: multi_class
                  padre:value_default: '''ovr'''
                  padre:value_type: '{''ovr'', ''multinomial''}'
                  rdfs:comment: "If the option chosen is \u2018ovr\u2019, then a\
                  \ binary problem is fit for each label. Else the loss minimised\
                  \ is the multinomial loss fit across the entire probability distribution."
                  rdfs:label: multi_class
                algorithm:
                  '@schema':
                    '@id': padre:LogisticRegression/multi_class
                    '@type': padre:ModelParameters
                    padre:configures: padre:LogisticRegression
              - '@schema':
                  '@id': padre:sklearn.linear_model.logistic.LogisticRegression/verbose
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.logistic.LogisticRegression/verbose
                  padre:implements: padre:LogisticRegression/verbose
                  padre:optional: 'True'
                  padre:path: verbose
                  padre:value_default: '0'
                  padre:value_type: integer
                  rdfs:comment: For the liblinear and lbfgs solvers set verbose
                    to any positive number for verbosity.
                  rdfs:label: verbose
                algorithm:
                  '@schema':
                    '@id': padre:LogisticRegression/verbose
                    '@type': padre:ModelParameters
                    padre:configures: padre:LogisticRegression
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.linear_model.logistic.LogisticRegression/max_iterations
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.linear_model.logistic.LogisticRegression/max_iterations
                  padre:implements: padre:LogisticRegression/max_iterations
                  padre:optional: 'False'
                  padre:path: max_iter
                  padre:value_default: '100'
                  padre:value_type: integer
                  rdfs:comment: Maximum number of iterations.
                  rdfs:label: max_iterations
                algorithm:
                  '@schema':
                    '@id': padre:LogisticRegression/max_iterations
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:LogisticRegression
              - '@schema':
                  '@id': padre:sklearn.linear_model.logistic.LogisticRegression/reuse_previous
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.linear_model.logistic.LogisticRegression/reuse_previous
                  padre:implements: padre:LogisticRegression/reuse_previous
                  padre:optional: 'False'
                  padre:path: warm_start
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: When set to True, reuse the solution of the previous
                    call to fit as initialization, otherwise, just erase the previous
                    solution.
                  rdfs:label: reuse_previous
                algorithm:
                  '@schema':
                    '@id': padre:LogisticRegression/reuse_previous
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:LogisticRegression
              - '@schema':
                  '@id': padre:sklearn.linear_model.logistic.LogisticRegression/jobs
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.linear_model.logistic.LogisticRegression/jobs
                  padre:implements: padre:LogisticRegression/jobs
                  padre:optional: 'False'
                  padre:path: n_jobs
                  padre:value_default: '1'
                  padre:value_type: integer
                  rdfs:comment: Number of CPU cores used when parallelizing over
                    classes.
                  rdfs:label: jobs
                algorithm:
                  '@schema':
                    '@id': padre:LogisticRegression/jobs
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:LogisticRegression
    :linear_model.omp.OrthogonalMatchingPursuit:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.linear_model.omp.OrthogonalMatchingPursuit
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:OrthogonalMatchingPursuit
            rdfs:comment: null
            rdfs:label: orthogonal matching pursuit model
          algorithm:
            '@schema':
              '@id': padre:OrthogonalMatchingPursuit
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: orthogonal matching pursuit model
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.linear_model.omp.OrthogonalMatchingPursuit/nonzero_coef
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.omp.OrthogonalMatchingPursuit/nonzero_coef
                  padre:implements: padre:OrthogonalMatchingPursuit/nonzero_coef
                  padre:optional: 'True'
                  padre:path: n_nonzero_coefs
                  padre:value_default: None
                  padre:value_type: integer
                  rdfs:comment: Target number of non-zero coefficients.
                  rdfs:label: nonzero_coef
                algorithm:
                  '@schema':
                    '@id': padre:OrthogonalMatchingPursuit/nonzero_coef
                    '@type': padre:ModelParameters
                    padre:configures: padre:OrthogonalMatchingPursuit
              - '@schema':
                  '@id': padre:sklearn.linear_model.omp.OrthogonalMatchingPursuit/tolerance
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.omp.OrthogonalMatchingPursuit/tolerance
                  padre:implements: padre:OrthogonalMatchingPursuit/tolerance
                  padre:optional: 'True'
                  padre:path: tol
                  padre:value_default: None
                  padre:value_type: float
                  rdfs:comment: Maximum norm of the residual.
                  rdfs:label: tolerance
                algorithm:
                  '@schema':
                    '@id': padre:OrthogonalMatchingPursuit/tolerance
                    '@type': padre:ModelParameters
                    padre:configures: padre:OrthogonalMatchingPursuit
              - '@schema':
                  '@id': padre:sklearn.linear_model.omp.OrthogonalMatchingPursuit/fit_intercept
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.omp.OrthogonalMatchingPursuit/fit_intercept
                  padre:implements: padre:OrthogonalMatchingPursuit/fit_intercept
                  padre:optional: 'True'
                  padre:path: fit_intercept
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: Whether to calculate the intercept for this model.
                  rdfs:label: fit_intercept
                algorithm:
                  '@schema':
                    '@id': padre:OrthogonalMatchingPursuit/fit_intercept
                    '@type': padre:ModelParameters
                    padre:configures: padre:OrthogonalMatchingPursuit
              - '@schema':
                  '@id': padre:sklearn.linear_model.omp.OrthogonalMatchingPursuit/normalize
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.omp.OrthogonalMatchingPursuit/normalize
                  padre:implements: padre:OrthogonalMatchingPursuit/normalize
                  padre:optional: 'True'
                  padre:path: normalize
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: Normalizes the regressors before regression by subtracting
                    the mean and dividing by the l2-norm.
                  rdfs:label: normalize
                algorithm:
                  '@schema':
                    '@id': padre:OrthogonalMatchingPursuit/normalize
                    '@type': padre:ModelParameters
                    padre:configures: padre:OrthogonalMatchingPursuit
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.linear_model.omp.OrthogonalMatchingPursuit/precompute
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.linear_model.omp.OrthogonalMatchingPursuit/precompute
                  padre:implements: padre:OrthogonalMatchingPursuit/precompute
                  padre:optional: 'False'
                  padre:path: precompute
                  padre:value_default: '''auto'''
                  padre:value_type: '{boolean, ''auto''}'
                  rdfs:comment: Whether to use a precomputed Gram matrix  and Xy
                    matrix to speed up calculations. Matrices can also be directly passed
                    to the fit method.
                  rdfs:label: precompute
                algorithm:
                  '@schema':
                    '@id': padre:OrthogonalMatchingPursuit/precompute
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:OrthogonalMatchingPursuit
    :linear_model.orthogonal_mp:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.linear_model.orthogonal_mp
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:orthogonal_mp
            rdfs:comment: null
            rdfs:label: n-target orthogonal matching pursuit
          algorithm:
            '@schema':
              '@id': padre:orthogonal_mp
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: n-target orthogonal matching pursuit
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.linear_model.orthogonal_mp/feature_matrix
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.orthogonal_mp/feature_matrix
                  padre:implements: padre:orthogonal_mp/feature_matrix
                  padre:optional: 'False'
                  padre:path: X
                  padre:value_default: ''
                  padre:value_type: array, shape (n_samples, n_features)
                  rdfs:comment: Input data. Columns are assumed to have unit norm.
                  rdfs:label: feature_matrix
                algorithm:
                  '@schema':
                    '@id': padre:orthogonal_mp/feature_matrix
                    '@type': padre:ModelParameters
                    padre:configures: padre:orthogonal_mp
              - '@schema':
                  '@id': padre:sklearn.linear_model.orthogonal_mp/input_targets
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.orthogonal_mp/input_targets
                  padre:implements: padre:orthogonal_mp/input_targets
                  padre:optional: 'False'
                  padre:path: Y
                  padre:value_default: ''
                  padre:value_type: array, shape (n_samples) or (n_samples, n_targets)
                  rdfs:comment: Input targets
                  rdfs:label: input_targets
                algorithm:
                  '@schema':
                    '@id': padre:orthogonal_mp/input_targets
                    '@type': padre:ModelParameters
                    padre:configures: padre:orthogonal_mp
              - '@schema':
                  '@id': padre:sklearn.linear_model.orthogonal_mp/nonzero_coefficients
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.orthogonal_mp/nonzero_coefficients
                  padre:implements: padre:orthogonal_mp/nonzero_coefficients
                  padre:optional: 'False'
                  padre:path: n_nonzero_coefs
                  padre:value_default: None
                  padre:value_type: integer
                  rdfs:comment: Target number of non-zero coefficients.
                  rdfs:label: nonzero_coefficients
                algorithm:
                  '@schema':
                    '@id': padre:orthogonal_mp/nonzero_coefficients
                    '@type': padre:ModelParameters
                    padre:configures: padre:orthogonal_mp
              - '@schema':
                  '@id': padre:sklearn.linear_model.orthogonal_mp/tolerance
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.orthogonal_mp/tolerance
                  padre:implements: padre:orthogonal_mp/tolerance
                  padre:optional: 'True'
                  padre:path: tol
                  padre:value_default: None
                  padre:value_type: float
                  rdfs:comment: Maximum norm of the residual.
                  rdfs:label: tolerance
                algorithm:
                  '@schema':
                    '@id': padre:orthogonal_mp/tolerance
                    '@type': padre:ModelParameters
                    padre:configures: padre:orthogonal_mp
              - '@schema':
                  '@id': padre:sklearn.linear_model.orthogonal_mp/copy_X
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.orthogonal_mp/copy_X
                  padre:implements: padre:orthogonal_mp/copy_X
                  padre:optional: 'True'
                  padre:path: copy_X
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: If True, X will be copied; else, it may be overwritten.
                  rdfs:label: copy_X
                algorithm:
                  '@schema':
                    '@id': padre:orthogonal_mp/copy_X
                    '@type': padre:ModelParameters
                    padre:configures: padre:orthogonal_mp
              - '@schema':
                  '@id': padre:sklearn.linear_model.orthogonal_mp/return_path
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.orthogonal_mp/return_path
                  padre:implements: padre:orthogonal_mp/return_path
                  padre:optional: 'True'
                  padre:path: return_path
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: Whether to return every value of the nonzero coefficients
                    along the forward path. Useful for cross-validation.
                  rdfs:label: return_path
                algorithm:
                  '@schema':
                    '@id': padre:orthogonal_mp/return_path
                    '@type': padre:ModelParameters
                    padre:configures: padre:orthogonal_mp
              - '@schema':
                  '@id': padre:sklearn.linear_model.orthogonal_mp/return_n_iter
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.orthogonal_mp/return_n_iter
                  padre:implements: padre:orthogonal_mp/return_n_iter
                  padre:optional: 'True'
                  padre:path: return_n_iter
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: Whether or not to return the number of iterations.
                  rdfs:label: return_n_iter
                algorithm:
                  '@schema':
                    '@id': padre:orthogonal_mp/return_n_iter
                    '@type': padre:ModelParameters
                    padre:configures: padre:orthogonal_mp
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.linear_model.orthogonal_mp/precompute
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.linear_model.orthogonal_mp/precompute
                  padre:implements: padre:orthogonal_mp/precompute
                  padre:optional: 'False'
                  padre:path: precompute
                  padre:value_default: '''auto'''
                  padre:value_type: '{True, False, ''auto''}'
                  rdfs:comment: Whether to perform precomputations.
                  rdfs:label: precompute
                algorithm:
                  '@schema':
                    '@id': padre:orthogonal_mp/precompute
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:orthogonal_mp
    :linear_model.passive_aggressive.PassiveAggressiveClassifier:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.linear_model.passive_aggressive.PassiveAggressiveClassifier
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:PassiveAggressiveClassifier
            rdfs:comment: null
            rdfs:label: passive aggressive classifier
          algorithm:
            '@schema':
              '@id': padre:PassiveAggressiveClassifier
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: passive aggressive classifier
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.linear_model.passive_aggressive.PassiveAggressiveClassifier/regualrisation
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.passive_aggressive.PassiveAggressiveClassifier/regualrisation
                  padre:implements: padre:PassiveAggressiveClassifier/regualrisation
                  padre:optional: 'False'
                  padre:path: C
                  padre:value_default: '1.0'
                  padre:value_type: float
                  rdfs:comment: Maximum step size (regularization).
                  rdfs:label: regualrisation
                algorithm:
                  '@schema':
                    '@id': padre:PassiveAggressiveClassifier/regualrisation
                    '@type': padre:ModelParameters
                    padre:configures: padre:PassiveAggressiveClassifier
              - '@schema':
                  '@id': padre:sklearn.linear_model.passive_aggressive.PassiveAggressiveClassifier/fit_intercept
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.passive_aggressive.PassiveAggressiveClassifier/fit_intercept
                  padre:implements: padre:PassiveAggressiveClassifier/fit_intercept
                  padre:optional: 'False'
                  padre:path: fit_intercept
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: Whether the intercept should be estimated or not.
                  rdfs:label: fit_intercept
                algorithm:
                  '@schema':
                    '@id': padre:PassiveAggressiveClassifier/fit_intercept
                    '@type': padre:ModelParameters
                    padre:configures: padre:PassiveAggressiveClassifier
              - '@schema':
                  '@id': padre:sklearn.linear_model.passive_aggressive.PassiveAggressiveClassifier/tolerance
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.passive_aggressive.PassiveAggressiveClassifier/tolerance
                  padre:implements: padre:PassiveAggressiveClassifier/tolerance
                  padre:optional: 'True'
                  padre:path: tol
                  padre:value_default: None
                  padre:value_type: float
                  rdfs:comment: The stopping criterion.
                  rdfs:label: tolerance
                algorithm:
                  '@schema':
                    '@id': padre:PassiveAggressiveClassifier/tolerance
                    '@type': padre:ModelParameters
                    padre:configures: padre:PassiveAggressiveClassifier
              - '@schema':
                  '@id': padre:sklearn.linear_model.passive_aggressive.PassiveAggressiveClassifier/shuffle
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.passive_aggressive.PassiveAggressiveClassifier/shuffle
                  padre:implements: padre:PassiveAggressiveClassifier/shuffle
                  padre:optional: 'True'
                  padre:path: shuffle
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: Whether or not the training data should be shuffled
                    after each epoch.
                  rdfs:label: shuffle
                algorithm:
                  '@schema':
                    '@id': padre:PassiveAggressiveClassifier/shuffle
                    '@type': padre:ModelParameters
                    padre:configures: padre:PassiveAggressiveClassifier
              - '@schema':
                  '@id': padre:sklearn.linear_model.passive_aggressive.PassiveAggressiveClassifier/verbose
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.passive_aggressive.PassiveAggressiveClassifier/verbose
                  padre:implements: padre:PassiveAggressiveClassifier/verbose
                  padre:optional: 'True'
                  padre:path: verbose
                  padre:value_default: '0'
                  padre:value_type: integer
                  rdfs:comment: The verbosity level.
                  rdfs:label: verbose
                algorithm:
                  '@schema':
                    '@id': padre:PassiveAggressiveClassifier/verbose
                    '@type': padre:ModelParameters
                    padre:configures: padre:PassiveAggressiveClassifier
              - '@schema':
                  '@id': padre:sklearn.linear_model.passive_aggressive.PassiveAggressiveClassifier/loss_function
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.passive_aggressive.PassiveAggressiveClassifier/loss_function
                  padre:implements: padre:PassiveAggressiveClassifier/loss_function
                  padre:optional: 'True'
                  padre:path: loss
                  padre:value_default: '''hinge'''
                  padre:value_type: '{''hinge'', ''squared_hinge''}'
                  rdfs:comment: The loss function to be used.
                  rdfs:label: loss_function
                algorithm:
                  '@schema':
                    '@id': padre:PassiveAggressiveClassifier/loss_function
                    '@type': padre:ModelParameters
                    padre:configures: padre:PassiveAggressiveClassifier
              - '@schema':
                  '@id': padre:sklearn.linear_model.passive_aggressive.PassiveAggressiveClassifier/random_state
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.passive_aggressive.PassiveAggressiveClassifier/random_state
                  padre:implements: padre:PassiveAggressiveClassifier/random_state
                  padre:optional: 'True'
                  padre:path: random_state
                  padre:value_default: None
                  padre:value_type: '{integer, RandomState instance, None}'
                  rdfs:comment: The seed of the pseudo random number generator to
                    use when shuffling the data. If int, random_state is the seed used
                    by the random number generator; If RandomState instance, random_state
                    is the random number generator; If None, the random number generator
                    is the RandomState instance used by np.random.
                  rdfs:label: random_state
                algorithm:
                  '@schema':
                    '@id': padre:PassiveAggressiveClassifier/random_state
                    '@type': padre:ModelParameters
                    padre:configures: padre:PassiveAggressiveClassifier
              - '@schema':
                  '@id': padre:sklearn.linear_model.passive_aggressive.PassiveAggressiveClassifier/reuse_previous
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.passive_aggressive.PassiveAggressiveClassifier/reuse_previous
                  padre:implements: padre:PassiveAggressiveClassifier/reuse_previous
                  padre:optional: 'True'
                  padre:path: warm_start
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: When set to True, reuse the solution of the previous
                    call to fit as initialization, otherwise, just erase the previous
                    solution.
                  rdfs:label: reuse_previous
                algorithm:
                  '@schema':
                    '@id': padre:PassiveAggressiveClassifier/reuse_previous
                    '@type': padre:ModelParameters
                    padre:configures: padre:PassiveAggressiveClassifier
              - '@schema':
                  '@id': padre:sklearn.linear_model.passive_aggressive.PassiveAggressiveClassifier/class_weight
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.passive_aggressive.PassiveAggressiveClassifier/class_weight
                  padre:implements: padre:PassiveAggressiveClassifier/class_weight
                  padre:optional: 'True'
                  padre:path: class_weight
                  padre:value_default: None
                  padre:value_type: '{dict,''balanced'', None}'
                  rdfs:comment: Weights associated with classes.
                  rdfs:label: class_weight
                algorithm:
                  '@schema':
                    '@id': padre:PassiveAggressiveClassifier/class_weight
                    '@type': padre:ModelParameters
                    padre:configures: padre:PassiveAggressiveClassifier
              - '@schema':
                  '@id': padre:sklearn.linear_model.passive_aggressive.PassiveAggressiveClassifier/average
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.passive_aggressive.PassiveAggressiveClassifier/average
                  padre:implements: padre:PassiveAggressiveClassifier/average
                  padre:optional: 'True'
                  padre:path: average
                  padre:value_default: 'False'
                  padre:value_type: '{boolean, integer}'
                  rdfs:comment: When set to True, computes the averaged SGD weights
                    and stores the result in the coef_ attribute. If set to an int greater
                    than 1, averaging will begin once the total number of samples seen
                    reaches average. So average=10 will begin averaging after seeing
                    10 samples.
                  rdfs:label: average
                algorithm:
                  '@schema':
                    '@id': padre:PassiveAggressiveClassifier/average
                    '@type': padre:ModelParameters
                    padre:configures: padre:PassiveAggressiveClassifier
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.linear_model.passive_aggressive.PassiveAggressiveClassifier/epochs
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.linear_model.passive_aggressive.PassiveAggressiveClassifier/epochs
                  padre:implements: padre:PassiveAggressiveClassifier/epochs
                  padre:optional: 'True'
                  padre:path: max_iter
                  padre:value_default: None
                  padre:value_type: integer
                  rdfs:comment: The maximum number of passes over the training data
                    (aka epochs).
                  rdfs:label: epochs
                algorithm:
                  '@schema':
                    '@id': padre:PassiveAggressiveClassifier/epochs
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:PassiveAggressiveClassifier
              - '@schema':
                  '@id': padre:sklearn.linear_model.passive_aggressive.PassiveAggressiveClassifier/jobs
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.linear_model.passive_aggressive.PassiveAggressiveClassifier/jobs
                  padre:implements: padre:PassiveAggressiveClassifier/jobs
                  padre:optional: 'True'
                  padre:path: n_jobs
                  padre:value_default: '1'
                  padre:value_type: integer
                  rdfs:comment: The number of of CPUs to use for the computation.
                    If -1 all CPUs are used.
                  rdfs:label: jobs
                algorithm:
                  '@schema':
                    '@id': padre:PassiveAggressiveClassifier/jobs
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:PassiveAggressiveClassifier
    :linear_model.passive_aggressive.PassiveAggressiveRegressor:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.linear_model.passive_aggressive.PassiveAggressiveRegressor
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:PassiveAggressiveRegressor
            rdfs:comment: null
            rdfs:label: passive aggressive regressor
          algorithm:
            '@schema':
              '@id': padre:PassiveAggressiveRegressor
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: passive aggressive regressor
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.linear_model.passive_aggressive.PassiveAggressiveRegressor/regualrisation
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.passive_aggressive.PassiveAggressiveRegressor/regualrisation
                  padre:implements: padre:PassiveAggressiveRegressor/regualrisation
                  padre:optional: 'False'
                  padre:path: C
                  padre:value_default: '1.0'
                  padre:value_type: float
                  rdfs:comment: Maximum step size (regularization).
                  rdfs:label: regualrisation
                algorithm:
                  '@schema':
                    '@id': padre:PassiveAggressiveRegressor/regualrisation
                    '@type': padre:ModelParameters
                    padre:configures: padre:PassiveAggressiveRegressor
              - '@schema':
                  '@id': padre:sklearn.linear_model.passive_aggressive.PassiveAggressiveRegressor/fit_intercept
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.passive_aggressive.PassiveAggressiveRegressor/fit_intercept
                  padre:implements: padre:PassiveAggressiveRegressor/fit_intercept
                  padre:optional: 'False'
                  padre:path: fit_intercept
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: Whether the intercept should be estimated or not.
                  rdfs:label: fit_intercept
                algorithm:
                  '@schema':
                    '@id': padre:PassiveAggressiveRegressor/fit_intercept
                    '@type': padre:ModelParameters
                    padre:configures: padre:PassiveAggressiveRegressor
              - '@schema':
                  '@id': padre:sklearn.linear_model.passive_aggressive.PassiveAggressiveRegressor/tolerance
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.passive_aggressive.PassiveAggressiveRegressor/tolerance
                  padre:implements: padre:PassiveAggressiveRegressor/tolerance
                  padre:optional: 'True'
                  padre:path: tol
                  padre:value_default: None
                  padre:value_type: float
                  rdfs:comment: The stopping criterion.
                  rdfs:label: tolerance
                algorithm:
                  '@schema':
                    '@id': padre:PassiveAggressiveRegressor/tolerance
                    '@type': padre:ModelParameters
                    padre:configures: padre:PassiveAggressiveRegressor
              - '@schema':
                  '@id': padre:sklearn.linear_model.passive_aggressive.PassiveAggressiveRegressor/shuffle
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.passive_aggressive.PassiveAggressiveRegressor/shuffle
                  padre:implements: padre:PassiveAggressiveRegressor/shuffle
                  padre:optional: 'True'
                  padre:path: shuffle
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: Whether or not the training data should be shuffled
                    after each epoch.
                  rdfs:label: shuffle
                algorithm:
                  '@schema':
                    '@id': padre:PassiveAggressiveRegressor/shuffle
                    '@type': padre:ModelParameters
                    padre:configures: padre:PassiveAggressiveRegressor
              - '@schema':
                  '@id': padre:sklearn.linear_model.passive_aggressive.PassiveAggressiveRegressor/verbose
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.passive_aggressive.PassiveAggressiveRegressor/verbose
                  padre:implements: padre:PassiveAggressiveRegressor/verbose
                  padre:optional: 'True'
                  padre:path: verbose
                  padre:value_default: '0'
                  padre:value_type: integer
                  rdfs:comment: The verbosity level.
                  rdfs:label: verbose
                algorithm:
                  '@schema':
                    '@id': padre:PassiveAggressiveRegressor/verbose
                    '@type': padre:ModelParameters
                    padre:configures: padre:PassiveAggressiveRegressor
              - '@schema':
                  '@id': padre:sklearn.linear_model.passive_aggressive.PassiveAggressiveRegressor/loss_function
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.passive_aggressive.PassiveAggressiveRegressor/loss_function
                  padre:implements: padre:PassiveAggressiveRegressor/loss_function
                  padre:optional: 'True'
                  padre:path: loss
                  padre:value_default: '''epsilon_insensitive'''
                  padre:value_type: '{''epsilon_insensitive'', ''squared_epsilon_insensitive''}'
                  rdfs:comment: The loss function to be used.
                  rdfs:label: loss_function
                algorithm:
                  '@schema':
                    '@id': padre:PassiveAggressiveRegressor/loss_function
                    '@type': padre:ModelParameters
                    padre:configures: padre:PassiveAggressiveRegressor
              - '@schema':
                  '@id': padre:sklearn.linear_model.passive_aggressive.PassiveAggressiveRegressor/update_threshold
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.passive_aggressive.PassiveAggressiveRegressor/update_threshold
                  padre:implements: padre:PassiveAggressiveRegressor/update_threshold
                  padre:optional: 'False'
                  padre:path: epsilon
                  padre:value_default: '0.1'
                  padre:value_type: float
                  rdfs:comment: If the difference between the current prediction
                    and the correct label is below this threshold, the model is not
                    updated.
                  rdfs:label: update_threshold
                algorithm:
                  '@schema':
                    '@id': padre:PassiveAggressiveRegressor/update_threshold
                    '@type': padre:ModelParameters
                    padre:configures: padre:PassiveAggressiveRegressor
              - '@schema':
                  '@id': padre:sklearn.linear_model.passive_aggressive.PassiveAggressiveRegressor/random_state
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.passive_aggressive.PassiveAggressiveRegressor/random_state
                  padre:implements: padre:PassiveAggressiveRegressor/random_state
                  padre:optional: 'True'
                  padre:path: random_state
                  padre:value_default: None
                  padre:value_type: '{integer, RandomState instance, None}'
                  rdfs:comment: The seed of the pseudo random number generator to
                    use when shuffling the data. If int, random_state is the seed used
                    by the random number generator; If RandomState instance, random_state
                    is the random number generator; If None, the random number generator
                    is the RandomState instance used by np.random.
                  rdfs:label: random_state
                algorithm:
                  '@schema':
                    '@id': padre:PassiveAggressiveRegressor/random_state
                    '@type': padre:ModelParameters
                    padre:configures: padre:PassiveAggressiveRegressor
              - '@schema':
                  '@id': padre:sklearn.linear_model.passive_aggressive.PassiveAggressiveRegressor/reuse_previous
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.passive_aggressive.PassiveAggressiveRegressor/reuse_previous
                  padre:implements: padre:PassiveAggressiveRegressor/reuse_previous
                  padre:optional: 'True'
                  padre:path: warm_start
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: When set to True, reuse the solution of the previous
                    call to fit as initialization, otherwise, just erase the previous
                    solution.
                  rdfs:label: reuse_previous
                algorithm:
                  '@schema':
                    '@id': padre:PassiveAggressiveRegressor/reuse_previous
                    '@type': padre:ModelParameters
                    padre:configures: padre:PassiveAggressiveRegressor
              - '@schema':
                  '@id': padre:sklearn.linear_model.passive_aggressive.PassiveAggressiveRegressor/average
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.passive_aggressive.PassiveAggressiveRegressor/average
                  padre:implements: padre:PassiveAggressiveRegressor/average
                  padre:optional: 'True'
                  padre:path: average
                  padre:value_default: 'False'
                  padre:value_type: '{boolean, integer}'
                  rdfs:comment: When set to True, computes the averaged SGD weights
                    and stores the result in the coef_ attribute. If set to an int greater
                    than 1, averaging will begin once the total number of samples seen
                    reaches average. So average=10 will begin averaging after seeing
                    10 samples.
                  rdfs:label: average
                algorithm:
                  '@schema':
                    '@id': padre:PassiveAggressiveRegressor/average
                    '@type': padre:ModelParameters
                    padre:configures: padre:PassiveAggressiveRegressor
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.linear_model.passive_aggressive.PassiveAggressiveRegressor/epochs
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.linear_model.passive_aggressive.PassiveAggressiveRegressor/epochs
                  padre:implements: padre:PassiveAggressiveRegressor/epochs
                  padre:optional: 'True'
                  padre:path: max_iter
                  padre:value_default: None
                  padre:value_type: integer
                  rdfs:comment: The maximum number of passes over the training data
                    (aka epochs).
                  rdfs:label: epochs
                algorithm:
                  '@schema':
                    '@id': padre:PassiveAggressiveRegressor/epochs
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:PassiveAggressiveRegressor
    :linear_model.perceptron.Perceptron:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.linear_model.perceptron.Perceptron
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:Perceptron
            rdfs:comment: null
            rdfs:label: perceptron
          algorithm:
            '@schema':
              '@id': padre:Perceptron
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: perceptron
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.linear_model.perceptron.Perceptron/regularization_term
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.perceptron.Perceptron/regularization_term
                  padre:implements: padre:Perceptron/regularization_term
                  padre:optional: 'False'
                  padre:path: penalty
                  padre:value_default: None
                  padre:value_type: '{none, ''l2'', ''l1'', ''elasticnet''}'
                  rdfs:comment: The penalty (aka regularization term) to be used.
                  rdfs:label: regularization_term
                algorithm:
                  '@schema':
                    '@id': padre:Perceptron/regularization_term
                    '@type': padre:ModelParameters
                    padre:configures: padre:Perceptron
              - '@schema':
                  '@id': padre:sklearn.linear_model.perceptron.Perceptron/regularisation_multiplier
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.perceptron.Perceptron/regularisation_multiplier
                  padre:implements: padre:Perceptron/regularisation_multiplier
                  padre:optional: 'False'
                  padre:path: alpha
                  padre:value_default: '0.0001'
                  padre:value_type: float
                  rdfs:comment: Constant that multiplies the regularization term.
                  rdfs:label: regularisation_multiplier
                algorithm:
                  '@schema':
                    '@id': padre:Perceptron/regularisation_multiplier
                    '@type': padre:ModelParameters
                    padre:configures: padre:Perceptron
              - '@schema':
                  '@id': padre:sklearn.linear_model.perceptron.Perceptron/fit_intercept
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.perceptron.Perceptron/fit_intercept
                  padre:implements: padre:Perceptron/fit_intercept
                  padre:optional: 'False'
                  padre:path: fit_intercept
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: Whether the intercept should be estimated or not.
                  rdfs:label: fit_intercept
                algorithm:
                  '@schema':
                    '@id': padre:Perceptron/fit_intercept
                    '@type': padre:ModelParameters
                    padre:configures: padre:Perceptron
              - '@schema':
                  '@id': padre:sklearn.linear_model.perceptron.Perceptron/tolerance
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.perceptron.Perceptron/tolerance
                  padre:implements: padre:Perceptron/tolerance
                  padre:optional: 'True'
                  padre:path: tol
                  padre:value_default: None
                  padre:value_type: float
                  rdfs:comment: The stopping criterion.
                  rdfs:label: tolerance
                algorithm:
                  '@schema':
                    '@id': padre:Perceptron/tolerance
                    '@type': padre:ModelParameters
                    padre:configures: padre:Perceptron
              - '@schema':
                  '@id': padre:sklearn.linear_model.perceptron.Perceptron/shuffle
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.perceptron.Perceptron/shuffle
                  padre:implements: padre:Perceptron/shuffle
                  padre:optional: 'True'
                  padre:path: shuffle
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: Whether or not the training data should be shuffled
                    after each epoch.
                  rdfs:label: shuffle
                algorithm:
                  '@schema':
                    '@id': padre:Perceptron/shuffle
                    '@type': padre:ModelParameters
                    padre:configures: padre:Perceptron
              - '@schema':
                  '@id': padre:sklearn.linear_model.perceptron.Perceptron/verbose
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.perceptron.Perceptron/verbose
                  padre:implements: padre:Perceptron/verbose
                  padre:optional: 'True'
                  padre:path: verbose
                  padre:value_default: '0'
                  padre:value_type: integer
                  rdfs:comment: The verbosity level.
                  rdfs:label: verbose
                algorithm:
                  '@schema':
                    '@id': padre:Perceptron/verbose
                    '@type': padre:ModelParameters
                    padre:configures: padre:Perceptron
              - '@schema':
                  '@id': padre:sklearn.linear_model.perceptron.Perceptron/eta0
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.perceptron.Perceptron/eta0
                  padre:implements: padre:Perceptron/eta0
                  padre:optional: 'False'
                  padre:path: eta0
                  padre:value_default: '1.0'
                  padre:value_type: double
                  rdfs:comment: The initial learning rate for the 'constant' or
                    'invscaling' schedules.
                  rdfs:label: eta0
                algorithm:
                  '@schema':
                    '@id': padre:Perceptron/eta0
                    '@type': padre:ModelParameters
                    padre:configures: padre:Perceptron
              - '@schema':
                  '@id': padre:sklearn.linear_model.perceptron.Perceptron/class_weight
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.perceptron.Perceptron/class_weight
                  padre:implements: padre:Perceptron/class_weight
                  padre:optional: 'True'
                  padre:path: class_weight
                  padre:value_default: None
                  padre:value_type: '{{class_label: weight}, ''balanced'',  None}'
                  rdfs:comment: Weights associated with classes.
                  rdfs:label: class_weight
                algorithm:
                  '@schema':
                    '@id': padre:Perceptron/class_weight
                    '@type': padre:ModelParameters
                    padre:configures: padre:Perceptron
              - '@schema':
                  '@id': padre:sklearn.linear_model.perceptron.Perceptron/reuse_previous
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.perceptron.Perceptron/reuse_previous
                  padre:implements: padre:Perceptron/reuse_previous
                  padre:optional: 'True'
                  padre:path: warm_start
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: When set to True, reuse the solution of the previous
                    call to fit as initialization, otherwise, just erase the previous
                    solution.
                  rdfs:label: reuse_previous
                algorithm:
                  '@schema':
                    '@id': padre:Perceptron/reuse_previous
                    '@type': padre:ModelParameters
                    padre:configures: padre:Perceptron
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.linear_model.perceptron.Perceptron/max_iterations
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.linear_model.perceptron.Perceptron/max_iterations
                  padre:implements: padre:Perceptron/max_iterations
                  padre:optional: 'True'
                  padre:path: max_iter
                  padre:value_default: None
                  padre:value_type: integer
                  rdfs:comment: Maximum number of iterations.
                  rdfs:label: max_iterations
                algorithm:
                  '@schema':
                    '@id': padre:Perceptron/max_iterations
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:Perceptron
              - '@schema':
                  '@id': padre:sklearn.linear_model.perceptron.Perceptron/jobs
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.linear_model.perceptron.Perceptron/jobs
                  padre:implements: padre:Perceptron/jobs
                  padre:optional: 'True'
                  padre:path: n_jobs
                  padre:value_default: '1'
                  padre:value_type: integer
                  rdfs:comment: The number of jobs to use for the computation. If
                    -1 all CPUs are used.
                  rdfs:label: jobs
                algorithm:
                  '@schema':
                    '@id': padre:Perceptron/jobs
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:Perceptron
              - '@schema':
                  '@id': padre:sklearn.linear_model.perceptron.Perceptron/reuse_previous
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.linear_model.perceptron.Perceptron/reuse_previous
                  padre:implements: padre:Perceptron/reuse_previous
                  padre:optional: 'True'
                  padre:path: warm_start
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: When set to True, reuse the solution of the previous
                    call to fit as initialization, otherwise, just erase the previous
                    solution.
                  rdfs:label: reuse_previous
                algorithm:
                  '@schema':
                    '@id': padre:Perceptron/reuse_previous
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:Perceptron
    :linear_model.ransac.RANSACRegressor:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.linear_model.ransac.RANSACRegressor
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:RANSACRegressor
            rdfs:comment: null
            rdfs:label: random sample consensus regressor
          algorithm:
            '@schema':
              '@id': padre:RANSACRegressor
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: random sample consensus regressor
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.linear_model.ransac.RANSACRegressor/base_estimator
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.ransac.RANSACRegressor/base_estimator
                  padre:implements: padre:RANSACRegressor/base_estimator
                  padre:optional: 'True'
                  padre:path: base_estimator
                  padre:value_default: None
                  padre:value_type: '{object, None}'
                  rdfs:comment: base_estimator.
                  rdfs:label: base_estimator
                algorithm:
                  '@schema':
                    '@id': padre:RANSACRegressor/base_estimator
                    '@type': padre:ModelParameters
                    padre:configures: padre:RANSACRegressor
              - '@schema':
                  '@id': padre:sklearn.linear_model.ransac.RANSACRegressor/min_samples
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.ransac.RANSACRegressor/min_samples
                  padre:implements: padre:RANSACRegressor/min_samples
                  padre:optional: 'True'
                  padre:path: min_samples
                  padre:value_default: None
                  padre:value_type: '[int (>= 1), float ([0, 1])}'
                  rdfs:comment: Minimum number of samples chosen randomly from original
                    data.
                  rdfs:label: min_samples
                algorithm:
                  '@schema':
                    '@id': padre:RANSACRegressor/min_samples
                    '@type': padre:ModelParameters
                    padre:configures: padre:RANSACRegressor
              - '@schema':
                  '@id': padre:sklearn.linear_model.ransac.RANSACRegressor/residual_threshold
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.ransac.RANSACRegressor/residual_threshold
                  padre:implements: padre:RANSACRegressor/residual_threshold
                  padre:optional: 'True'
                  padre:path: residual_threshold
                  padre:value_default: None
                  padre:value_type: float
                  rdfs:comment: Maximum residual for a data sample to be classified
                    as an inlier. By default the threshold is chosen as the MAD (median
                    absolute deviation) of the target values y.
                  rdfs:label: residual_threshold
                algorithm:
                  '@schema':
                    '@id': padre:RANSACRegressor/residual_threshold
                    '@type': padre:ModelParameters
                    padre:configures: padre:RANSACRegressor
              - '@schema':
                  '@id': padre:sklearn.linear_model.ransac.RANSACRegressor/is_data_valid
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.ransac.RANSACRegressor/is_data_valid
                  padre:implements: padre:RANSACRegressor/is_data_valid
                  padre:optional: 'True'
                  padre:path: is_data_valid
                  padre:value_default: None
                  padre:value_type: callable
                  rdfs:comment: 'This function is called with the randomly selected
                  data before the model is fitted to it: is_data_valid(X, y). If its
                  return value is False the current randomly chosen sub-sample is
                  skipped.'
                  rdfs:label: is_data_valid
                algorithm:
                  '@schema':
                    '@id': padre:RANSACRegressor/is_data_valid
                    '@type': padre:ModelParameters
                    padre:configures: padre:RANSACRegressor
              - '@schema':
                  '@id': padre:sklearn.linear_model.ransac.RANSACRegressor/is_model_valid
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.ransac.RANSACRegressor/is_model_valid
                  padre:implements: padre:RANSACRegressor/is_model_valid
                  padre:optional: 'True'
                  padre:path: is_model_valid
                  padre:value_default: None
                  padre:value_type: callable
                  rdfs:comment: 'This function is called with the estimated model
                  and the randomly selected data: is_model_valid(model, X, y). If
                  its return value is False the current randomly chosen sub-sample
                  is skipped. Rejecting samples with this function is computationally
                  costlier than with is_data_valid. is_model_valid should therefore
                  only be used if the estimated model is needed for making the rejection
                  decision..'
                  rdfs:label: is_model_valid
                algorithm:
                  '@schema':
                    '@id': padre:RANSACRegressor/is_model_valid
                    '@type': padre:ModelParameters
                    padre:configures: padre:RANSACRegressor
              - '@schema':
                  '@id': padre:sklearn.linear_model.ransac.RANSACRegressor/loss
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.ransac.RANSACRegressor/loss
                  padre:implements: padre:RANSACRegressor/loss
                  padre:optional: 'True'
                  padre:path: loss
                  padre:value_default: absolute_loss
                  padre:value_type: '{''absolute_loss'', ''squared_loss''}'
                  rdfs:comment: If loss is a callable, then it should be a function
                    that takes two arrays as inputs, the true and predicted value and
                    returns a 1-D array with the i-th value of the array corresponding
                    to the loss on X[i].
                  rdfs:label: loss
                algorithm:
                  '@schema':
                    '@id': padre:RANSACRegressor/loss
                    '@type': padre:ModelParameters
                    padre:configures: padre:RANSACRegressor
              - '@schema':
                  '@id': padre:sklearn.linear_model.ransac.RANSACRegressor/random_state
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.ransac.RANSACRegressor/random_state
                  padre:implements: padre:RANSACRegressor/random_state
                  padre:optional: 'True'
                  padre:path: random_state
                  padre:value_default: None
                  padre:value_type: '{integer, RandomState instance, None}'
                  rdfs:comment: The seed of the pseudo random number generator to
                    use when shuffling the data. If int, random_state is the seed used
                    by the random number generator; If RandomState instance, random_state
                    is the random number generator; If None, the random number generator
                    is the RandomState instance used by np.random.
                  rdfs:label: random_state
                algorithm:
                  '@schema':
                    '@id': padre:RANSACRegressor/random_state
                    '@type': padre:ModelParameters
                    padre:configures: padre:RANSACRegressor
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.linear_model.ransac.RANSACRegressor/iterations_random_sampling
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.linear_model.ransac.RANSACRegressor/iterations_random_sampling
                  padre:implements: padre:RANSACRegressor/iterations_random_sampling
                  padre:optional: 'True'
                  padre:path: max_trials
                  padre:value_default: '100'
                  padre:value_type: integer
                  rdfs:comment: Maximum number of iterations for random sample selection.
                  rdfs:label: iterations_random_sampling
                algorithm:
                  '@schema':
                    '@id': padre:RANSACRegressor/iterations_random_sampling
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:RANSACRegressor
              - '@schema':
                  '@id': padre:sklearn.linear_model.ransac.RANSACRegressor/max_skips
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.linear_model.ransac.RANSACRegressor/max_skips
                  padre:implements: padre:RANSACRegressor/max_skips
                  padre:optional: 'True'
                  padre:path: max_skips
                  padre:value_default: inf
                  padre:value_type: integer
                  rdfs:comment: Maximum number of iterations that can be skipped
                    due to finding zero inliers or invalid data.
                  rdfs:label: max_skips
                algorithm:
                  '@schema':
                    '@id': padre:RANSACRegressor/max_skips
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:RANSACRegressor
              - '@schema':
                  '@id': padre:sklearn.linear_model.ransac.RANSACRegressor/stop_n_inliers
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.linear_model.ransac.RANSACRegressor/stop_n_inliers
                  padre:implements: padre:RANSACRegressor/stop_n_inliers
                  padre:optional: 'True'
                  padre:path: stop_n_inliers
                  padre:value_default: inf
                  padre:value_type: integer
                  rdfs:comment: Stop iteration if at least this number of inliers
                    are found.
                  rdfs:label: stop_n_inliers
                algorithm:
                  '@schema':
                    '@id': padre:RANSACRegressor/stop_n_inliers
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:RANSACRegressor
              - '@schema':
                  '@id': padre:sklearn.linear_model.ransac.RANSACRegressor/stop_score
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.linear_model.ransac.RANSACRegressor/stop_score
                  padre:implements: padre:RANSACRegressor/stop_score
                  padre:optional: 'True'
                  padre:path: stop_score
                  padre:value_default: inf
                  padre:value_type: float
                  rdfs:comment: Stop iteration if score is greater equal than this
                    threshold.
                  rdfs:label: stop_score
                algorithm:
                  '@schema':
                    '@id': padre:RANSACRegressor/stop_score
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:RANSACRegressor
              - '@schema':
                  '@id': padre:sklearn.linear_model.ransac.RANSACRegressor/stop_probability
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.linear_model.ransac.RANSACRegressor/stop_probability
                  padre:implements: padre:RANSACRegressor/stop_probability
                  padre:optional: 'True'
                  padre:path: stop_probability
                  padre:value_default: '0.99'
                  padre:value_type: float in range [0,1]
                  rdfs:comment: RANSAC iteration stops if at least one outlier-free
                    set of the training data is sampled in RANSAC.
                  rdfs:label: stop_probability
                algorithm:
                  '@schema':
                    '@id': padre:RANSACRegressor/stop_probability
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:RANSACRegressor
    :linear_model.ridge.Ridge:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.linear_model.ridge.Ridge
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:Ridge
            rdfs:comment: null
            rdfs:label: ridge regression
          algorithm:
            '@schema':
              '@id': padre:Ridge
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: ridge regression
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.linear_model.ridge.Ridge/regularisation_strength
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.ridge.Ridge/regularisation_strength
                  padre:implements: padre:Ridge/regularisation_strength
                  padre:optional: 'False'
                  padre:path: alpha
                  padre:value_default: '1.0'
                  padre:value_type: float, array-like in the shape of the targets
                  rdfs:comment: Regularization strength. Regularization improves
                    the conditioning of the problem and reduces the variance of the
                    estimates. Larger values specify stronger regularization.
                  rdfs:label: regularisation_strength
                algorithm:
                  '@schema':
                    '@id': padre:Ridge/regularisation_strength
                    '@type': padre:ModelParameters
                    padre:configures: padre:Ridge
              - '@schema':
                  '@id': padre:sklearn.linear_model.ridge.Ridge/fit_intercept
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.ridge.Ridge/fit_intercept
                  padre:implements: padre:Ridge/fit_intercept
                  padre:optional: 'False'
                  padre:path: fit_intercept
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: Whether to calculate the intercept for this model.
                  rdfs:label: fit_intercept
                algorithm:
                  '@schema':
                    '@id': padre:Ridge/fit_intercept
                    '@type': padre:ModelParameters
                    padre:configures: padre:Ridge
              - '@schema':
                  '@id': padre:sklearn.linear_model.ridge.Ridge/normalize
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.ridge.Ridge/normalize
                  padre:implements: padre:Ridge/normalize
                  padre:optional: 'True'
                  padre:path: normalize
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: Normalizes the regressors before regression by subtracting
                    the mean and dividing by the l2-norm.
                  rdfs:label: normalize
                algorithm:
                  '@schema':
                    '@id': padre:Ridge/normalize
                    '@type': padre:ModelParameters
                    padre:configures: padre:Ridge
              - '@schema':
                  '@id': padre:sklearn.linear_model.ridge.Ridge/copy_X
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.ridge.Ridge/copy_X
                  padre:implements: padre:Ridge/copy_X
                  padre:optional: 'True'
                  padre:path: copy_X
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: If True, X will be copied; else, it may be overwritten.
                  rdfs:label: copy_X
                algorithm:
                  '@schema':
                    '@id': padre:Ridge/copy_X
                    '@type': padre:ModelParameters
                    padre:configures: padre:Ridge
              - '@schema':
                  '@id': padre:sklearn.linear_model.ridge.Ridge/tolerance
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.ridge.Ridge/tolerance
                  padre:implements: padre:Ridge/tolerance
                  padre:optional: 'False'
                  padre:path: tol
                  padre:value_default: '0.001'
                  padre:value_type: float
                  rdfs:comment: Precision of the solution. (The tolerance for the
                    optimisation.)
                  rdfs:label: tolerance
                algorithm:
                  '@schema':
                    '@id': padre:Ridge/tolerance
                    '@type': padre:ModelParameters
                    padre:configures: padre:Ridge
              - '@schema':
                  '@id': padre:sklearn.linear_model.ridge.Ridge/solver
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.ridge.Ridge/solver
                  padre:implements: padre:Ridge/solver
                  padre:optional: 'False'
                  padre:path: solver
                  padre:value_default: '''auto'''
                  padre:value_type: string
                  rdfs:comment: Solver to use in the computational routines.
                  rdfs:label: solver
                algorithm:
                  '@schema':
                    '@id': padre:Ridge/solver
                    '@type': padre:ModelParameters
                    padre:configures: padre:Ridge
              - '@schema':
                  '@id': padre:sklearn.linear_model.ridge.Ridge/random_state
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.ridge.Ridge/random_state
                  padre:implements: padre:Ridge/random_state
                  padre:optional: 'True'
                  padre:path: random_state
                  padre:value_default: None
                  padre:value_type: '{integer, RandomState instance, None}'
                  rdfs:comment: The seed of the pseudo random number generator to
                    use when shuffling the data. If int, random_state is the seed used
                    by the random number generator; If RandomState instance, random_state
                    is the random number generator; If None, the random number generator
                    is the RandomState instance used by np.random.
                  rdfs:label: random_state
                algorithm:
                  '@schema':
                    '@id': padre:Ridge/random_state
                    '@type': padre:ModelParameters
                    padre:configures: padre:Ridge
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.linear_model.ridge.Ridge/max_iterations
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.linear_model.ridge.Ridge/max_iterations
                  padre:implements: padre:Ridge/max_iterations
                  padre:optional: 'True'
                  padre:path: max_iter
                  padre:value_default: None
                  padre:value_type: integer
                  rdfs:comment: Maximum number of iterations.
                  rdfs:label: max_iterations
                algorithm:
                  '@schema':
                    '@id': padre:Ridge/max_iterations
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:Ridge
    :linear_model.stochastic_gradient.SGDClassifier:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.linear_model.stochastic_gradient.SGDClassifier
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:SGDClassifier
            rdfs:comment: null
            rdfs:label: stochastic gradient descent classifier
          algorithm:
            '@schema':
              '@id': padre:SGDClassifier
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: stochastic gradient descent classifier
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.linear_model.stochastic_gradient.SGDClassifier/loss_function
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.stochastic_gradient.SGDClassifier/loss_function
                  padre:implements: padre:SGDClassifier/loss_function
                  padre:optional: 'False'
                  padre:path: loss
                  padre:value_default: '''hinge'''
                  padre:value_type: '{''hinge'', ''log'', ''modified_huber'', ''squared_hinge'',
                  ''perceptron'', ''squared_loss'', ''huber'', ''epsilon_insensitive'',
                  ''squared_epsilon_insensitive''}'
                  rdfs:comment: The loss function to be used.
                  rdfs:label: loss_function
                algorithm:
                  '@schema':
                    '@id': padre:SGDClassifier/loss_function
                    '@type': padre:ModelParameters
                    padre:configures: padre:SGDClassifier
              - '@schema':
                  '@id': padre:sklearn.linear_model.stochastic_gradient.SGDClassifier/regularization_term
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.stochastic_gradient.SGDClassifier/regularization_term
                  padre:implements: padre:SGDClassifier/regularization_term
                  padre:optional: 'False'
                  padre:path: penalty
                  padre:value_default: '''l2'''
                  padre:value_type: '{''none'', ''l2'', ''l1'', ''elasticnet''}'
                  rdfs:comment: The penalty (aka regularization term) to be used.
                  rdfs:label: regularization_term
                algorithm:
                  '@schema':
                    '@id': padre:SGDClassifier/regularization_term
                    '@type': padre:ModelParameters
                    padre:configures: padre:SGDClassifier
              - '@schema':
                  '@id': padre:sklearn.linear_model.stochastic_gradient.SGDClassifier/regualrisation_multiplier
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.stochastic_gradient.SGDClassifier/regualrisation_multiplier
                  padre:implements: padre:SGDClassifier/regualrisation_multiplier
                  padre:optional: 'False'
                  padre:path: alpha
                  padre:value_default: '0.0001'
                  padre:value_type: float
                  rdfs:comment: Constant that multiplies the regularization term.
                  rdfs:label: regualrisation_multiplier
                algorithm:
                  '@schema':
                    '@id': padre:SGDClassifier/regualrisation_multiplier
                    '@type': padre:ModelParameters
                    padre:configures: padre:SGDClassifier
              - '@schema':
                  '@id': padre:sklearn.linear_model.stochastic_gradient.SGDClassifier/l1_ratio
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.stochastic_gradient.SGDClassifier/l1_ratio
                  padre:implements: padre:SGDClassifier/l1_ratio
                  padre:optional: 'False'
                  padre:path: l1_ratio
                  padre:value_default: '0.15'
                  padre:value_type: float
                  rdfs:comment: The Elastic Net mixing parameter.
                  rdfs:label: l1_ratio
                algorithm:
                  '@schema':
                    '@id': padre:SGDClassifier/l1_ratio
                    '@type': padre:ModelParameters
                    padre:configures: padre:SGDClassifier
              - '@schema':
                  '@id': padre:sklearn.linear_model.stochastic_gradient.SGDClassifier/fit_intercept
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.stochastic_gradient.SGDClassifier/fit_intercept
                  padre:implements: padre:SGDClassifier/fit_intercept
                  padre:optional: 'False'
                  padre:path: fit_intercept
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: Whether the intercept should be estimated or not.
                  rdfs:label: fit_intercept
                algorithm:
                  '@schema':
                    '@id': padre:SGDClassifier/fit_intercept
                    '@type': padre:ModelParameters
                    padre:configures: padre:SGDClassifier
              - '@schema':
                  '@id': padre:sklearn.linear_model.stochastic_gradient.SGDClassifier/tolerance
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.stochastic_gradient.SGDClassifier/tolerance
                  padre:implements: padre:SGDClassifier/tolerance
                  padre:optional: 'True'
                  padre:path: tol
                  padre:value_default: None
                  padre:value_type: float
                  rdfs:comment: The stopping criterion.
                  rdfs:label: tolerance
                algorithm:
                  '@schema':
                    '@id': padre:SGDClassifier/tolerance
                    '@type': padre:ModelParameters
                    padre:configures: padre:SGDClassifier
              - '@schema':
                  '@id': padre:sklearn.linear_model.stochastic_gradient.SGDClassifier/shuffle
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.stochastic_gradient.SGDClassifier/shuffle
                  padre:implements: padre:SGDClassifier/shuffle
                  padre:optional: 'True'
                  padre:path: shuffle
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: Whether or not the training data should be shuffled
                    after each epoch.
                  rdfs:label: shuffle
                algorithm:
                  '@schema':
                    '@id': padre:SGDClassifier/shuffle
                    '@type': padre:ModelParameters
                    padre:configures: padre:SGDClassifier
              - '@schema':
                  '@id': padre:sklearn.linear_model.stochastic_gradient.SGDClassifier/verbose
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.stochastic_gradient.SGDClassifier/verbose
                  padre:implements: padre:SGDClassifier/verbose
                  padre:optional: 'True'
                  padre:path: verbose
                  padre:value_default: '0'
                  padre:value_type: integer
                  rdfs:comment: The verbosity level.
                  rdfs:label: verbose
                algorithm:
                  '@schema':
                    '@id': padre:SGDClassifier/verbose
                    '@type': padre:ModelParameters
                    padre:configures: padre:SGDClassifier
              - '@schema':
                  '@id': padre:sklearn.linear_model.stochastic_gradient.SGDClassifier/epsilon
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.stochastic_gradient.SGDClassifier/epsilon
                  padre:implements: padre:SGDClassifier/epsilon
                  padre:optional: 'False'
                  padre:path: epsilon
                  padre:value_default: '0.1'
                  padre:value_type: float
                  rdfs:comment: "For \u2018huber\u2019, determines the threshold\
                  \ at which it becomes less important to get the prediction exactly\
                  \ right. For epsilon-insensitive, any differences between the current\
                  \ prediction and the correct label are ignored if they are less\
                  \ than this threshold."
                  rdfs:label: epsilon
                algorithm:
                  '@schema':
                    '@id': padre:SGDClassifier/epsilon
                    '@type': padre:ModelParameters
                    padre:configures: padre:SGDClassifier
              - '@schema':
                  '@id': padre:sklearn.linear_model.stochastic_gradient.SGDClassifier/random_state
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.stochastic_gradient.SGDClassifier/random_state
                  padre:implements: padre:SGDClassifier/random_state
                  padre:optional: 'True'
                  padre:path: random_state
                  padre:value_default: None
                  padre:value_type: '{integer, RandomState instance, None}'
                  rdfs:comment: The seed of the pseudo random number generator to
                    use when shuffling the data. If int, random_state is the seed used
                    by the random number generator; If RandomState instance, random_state
                    is the random number generator; If None, the random number generator
                    is the RandomState instance used by np.random.
                  rdfs:label: random_state
                algorithm:
                  '@schema':
                    '@id': padre:SGDClassifier/random_state
                    '@type': padre:ModelParameters
                    padre:configures: padre:SGDClassifier
              - '@schema':
                  '@id': padre:sklearn.linear_model.stochastic_gradient.SGDClassifier/learning_rate
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.stochastic_gradient.SGDClassifier/learning_rate
                  padre:implements: padre:SGDClassifier/learning_rate
                  padre:optional: 'True'
                  padre:path: learning_rate
                  padre:value_default: optimal
                  padre:value_type: '{constant, optimal, invscaling}'
                  rdfs:comment: Where t0 is chosen by a heuristic proposed by Leon
                    Bottou.
                  rdfs:label: learning_rate
                algorithm:
                  '@schema':
                    '@id': padre:SGDClassifier/learning_rate
                    '@type': padre:ModelParameters
                    padre:configures: padre:SGDClassifier
              - '@schema':
                  '@id': padre:sklearn.linear_model.stochastic_gradient.SGDClassifier/eta0
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.stochastic_gradient.SGDClassifier/eta0
                  padre:implements: padre:SGDClassifier/eta0
                  padre:optional: 'False'
                  padre:path: eta0
                  padre:value_default: '0.0'
                  padre:value_type: double
                  rdfs:comment: The initial learning rate for the 'constant' or
                    'invscaling' schedules.
                  rdfs:label: eta0
                algorithm:
                  '@schema':
                    '@id': padre:SGDClassifier/eta0
                    '@type': padre:ModelParameters
                    padre:configures: padre:SGDClassifier
              - '@schema':
                  '@id': padre:sklearn.linear_model.stochastic_gradient.SGDClassifier/inverse_scaling_exponent
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.stochastic_gradient.SGDClassifier/inverse_scaling_exponent
                  padre:implements: padre:SGDClassifier/inverse_scaling_exponent
                  padre:optional: 'False'
                  padre:path: power_t
                  padre:value_default: '0.5'
                  padre:value_type: double
                  rdfs:comment: The exponent for inverse scaling learning rate.
                  rdfs:label: inverse_scaling_exponent
                algorithm:
                  '@schema':
                    '@id': padre:SGDClassifier/inverse_scaling_exponent
                    '@type': padre:ModelParameters
                    padre:configures: padre:SGDClassifier
              - '@schema':
                  '@id': padre:sklearn.linear_model.stochastic_gradient.SGDClassifier/class_weight
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.stochastic_gradient.SGDClassifier/class_weight
                  padre:implements: padre:SGDClassifier/class_weight
                  padre:optional: 'True'
                  padre:path: class_weight
                  padre:value_default: None
                  padre:value_type: '{{class_label: weight}, ''balanced'',  None}'
                  rdfs:comment: Weights associated with classes.
                  rdfs:label: class_weight
                algorithm:
                  '@schema':
                    '@id': padre:SGDClassifier/class_weight
                    '@type': padre:ModelParameters
                    padre:configures: padre:SGDClassifier
              - '@schema':
                  '@id': padre:sklearn.linear_model.stochastic_gradient.SGDClassifier/reuse_previous
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.stochastic_gradient.SGDClassifier/reuse_previous
                  padre:implements: padre:SGDClassifier/reuse_previous
                  padre:optional: 'True'
                  padre:path: warm_start
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: When set to True, reuse the solution of the previous
                    call to fit as initialization, otherwise, just erase the previous
                    solution.
                  rdfs:label: reuse_previous
                algorithm:
                  '@schema':
                    '@id': padre:SGDClassifier/reuse_previous
                    '@type': padre:ModelParameters
                    padre:configures: padre:SGDClassifier
              - '@schema':
                  '@id': padre:sklearn.linear_model.stochastic_gradient.SGDClassifier/tolerance
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.stochastic_gradient.SGDClassifier/tolerance
                  padre:implements: padre:SGDClassifier/tolerance
                  padre:optional: 'True'
                  padre:path: tol
                  padre:value_default: None
                  padre:value_type: float
                  rdfs:comment: The stopping criterion.
                  rdfs:label: tolerance
                algorithm:
                  '@schema':
                    '@id': padre:SGDClassifier/tolerance
                    '@type': padre:ModelParameters
                    padre:configures: padre:SGDClassifier
              - '@schema':
                  '@id': padre:sklearn.linear_model.stochastic_gradient.SGDClassifier/average
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.stochastic_gradient.SGDClassifier/average
                  padre:implements: padre:SGDClassifier/average
                  padre:optional: 'True'
                  padre:path: average
                  padre:value_default: 'False'
                  padre:value_type: '{boolean, integer}'
                  rdfs:comment: When set to True, computes the averaged SGD weights
                    and stores the result in the coef_ attribute. If set to an int greater
                    than 1, averaging will begin once the total number of samples seen
                    reaches average. So average=10 will begin averaging after seeing
                    10 samples.
                  rdfs:label: average
                algorithm:
                  '@schema':
                    '@id': padre:SGDClassifier/average
                    '@type': padre:ModelParameters
                    padre:configures: padre:SGDClassifier
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.linear_model.stochastic_gradient.SGDClassifier/max_iterations
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.linear_model.stochastic_gradient.SGDClassifier/max_iterations
                  padre:implements: padre:SGDClassifier/max_iterations
                  padre:optional: 'True'
                  padre:path: max_iter
                  padre:value_default: None
                  padre:value_type: integer
                  rdfs:comment: Maximum number of iterations.
                  rdfs:label: max_iterations
                algorithm:
                  '@schema':
                    '@id': padre:SGDClassifier/max_iterations
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:SGDClassifier
              - '@schema':
                  '@id': padre:sklearn.linear_model.stochastic_gradient.SGDClassifier/jobs
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.linear_model.stochastic_gradient.SGDClassifier/jobs
                  padre:implements: padre:SGDClassifier/jobs
                  padre:optional: 'True'
                  padre:path: n_jobs
                  padre:value_default: '1'
                  padre:value_type: integer
                  rdfs:comment: The number of CPUs to use to do the OVA (One Versus
                    All, for multi-class problems) computation. -1 means 'all CPUs'.
                  rdfs:label: jobs
                algorithm:
                  '@schema':
                    '@id': padre:SGDClassifier/jobs
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:SGDClassifier
              - '@schema':
                  '@id': padre:sklearn.linear_model.stochastic_gradient.SGDClassifier/fit_intercept
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.linear_model.stochastic_gradient.SGDClassifier/fit_intercept
                  padre:implements: padre:SGDClassifier/fit_intercept
                  padre:optional: 'False'
                  padre:path: fit_intercept
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: Whether the intercept should be estimated or not.
                  rdfs:label: fit_intercept
                algorithm:
                  '@schema':
                    '@id': padre:SGDClassifier/fit_intercept
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:SGDClassifier
    :linear_model.stochastic_gradient.SGDRegressor:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.linear_model.stochastic_gradient.SGDRegressor
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:SGDRegressor
            rdfs:comment: null
            rdfs:label: stochastic gradient descent regressor
          algorithm:
            '@schema':
              '@id': padre:SGDRegressor
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: stochastic gradient descent regressor
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.linear_model.stochastic_gradient.SGDRegressor/loss_function
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.stochastic_gradient.SGDRegressor/loss_function
                  padre:implements: padre:SGDRegressor/loss_function
                  padre:optional: 'False'
                  padre:path: loss
                  padre:value_default: '''squared_loss'''
                  padre:value_type: '{''squared_loss'', ''huber'', ''epsilon_insensitive'',
                  ''squared_epsilon_insensitive''}'
                  rdfs:comment: The loss function to be used.
                  rdfs:label: loss_function
                algorithm:
                  '@schema':
                    '@id': padre:SGDRegressor/loss_function
                    '@type': padre:ModelParameters
                    padre:configures: padre:SGDRegressor
              - '@schema':
                  '@id': padre:sklearn.linear_model.stochastic_gradient.SGDRegressor/regularization_term
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.stochastic_gradient.SGDRegressor/regularization_term
                  padre:implements: padre:SGDRegressor/regularization_term
                  padre:optional: 'False'
                  padre:path: penalty
                  padre:value_default: '''l2'''
                  padre:value_type: '{''none'', ''l2'', ''l1'', ''elasticnet''}'
                  rdfs:comment: The penalty (aka regularization term) to be used.
                  rdfs:label: regularization_term
                algorithm:
                  '@schema':
                    '@id': padre:SGDRegressor/regularization_term
                    '@type': padre:ModelParameters
                    padre:configures: padre:SGDRegressor
              - '@schema':
                  '@id': padre:sklearn.linear_model.stochastic_gradient.SGDRegressor/regualrisation_multiplier
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.stochastic_gradient.SGDRegressor/regualrisation_multiplier
                  padre:implements: padre:SGDRegressor/regualrisation_multiplier
                  padre:optional: 'False'
                  padre:path: alpha
                  padre:value_default: '0.0001'
                  padre:value_type: float
                  rdfs:comment: Constant that multiplies the regularization term.
                  rdfs:label: regualrisation_multiplier
                algorithm:
                  '@schema':
                    '@id': padre:SGDRegressor/regualrisation_multiplier
                    '@type': padre:ModelParameters
                    padre:configures: padre:SGDRegressor
              - '@schema':
                  '@id': padre:sklearn.linear_model.stochastic_gradient.SGDRegressor/l1_ratio
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.stochastic_gradient.SGDRegressor/l1_ratio
                  padre:implements: padre:SGDRegressor/l1_ratio
                  padre:optional: 'False'
                  padre:path: l1_ratio
                  padre:value_default: '0.15'
                  padre:value_type: float
                  rdfs:comment: The Elastic Net mixing parameter.
                  rdfs:label: l1_ratio
                algorithm:
                  '@schema':
                    '@id': padre:SGDRegressor/l1_ratio
                    '@type': padre:ModelParameters
                    padre:configures: padre:SGDRegressor
              - '@schema':
                  '@id': padre:sklearn.linear_model.stochastic_gradient.SGDRegressor/fit_intercept
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.stochastic_gradient.SGDRegressor/fit_intercept
                  padre:implements: padre:SGDRegressor/fit_intercept
                  padre:optional: 'False'
                  padre:path: fit_intercept
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: Whether the intercept should be estimated or not.
                  rdfs:label: fit_intercept
                algorithm:
                  '@schema':
                    '@id': padre:SGDRegressor/fit_intercept
                    '@type': padre:ModelParameters
                    padre:configures: padre:SGDRegressor
              - '@schema':
                  '@id': padre:sklearn.linear_model.stochastic_gradient.SGDRegressor/tolerance
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.stochastic_gradient.SGDRegressor/tolerance
                  padre:implements: padre:SGDRegressor/tolerance
                  padre:optional: 'True'
                  padre:path: tol
                  padre:value_default: None
                  padre:value_type: float
                  rdfs:comment: The stopping criterion.
                  rdfs:label: tolerance
                algorithm:
                  '@schema':
                    '@id': padre:SGDRegressor/tolerance
                    '@type': padre:ModelParameters
                    padre:configures: padre:SGDRegressor
              - '@schema':
                  '@id': padre:sklearn.linear_model.stochastic_gradient.SGDRegressor/shuffle
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.stochastic_gradient.SGDRegressor/shuffle
                  padre:implements: padre:SGDRegressor/shuffle
                  padre:optional: 'True'
                  padre:path: shuffle
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: Whether or not the training data should be shuffled
                    after each epoch.
                  rdfs:label: shuffle
                algorithm:
                  '@schema':
                    '@id': padre:SGDRegressor/shuffle
                    '@type': padre:ModelParameters
                    padre:configures: padre:SGDRegressor
              - '@schema':
                  '@id': padre:sklearn.linear_model.stochastic_gradient.SGDRegressor/verbose
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.stochastic_gradient.SGDRegressor/verbose
                  padre:implements: padre:SGDRegressor/verbose
                  padre:optional: 'True'
                  padre:path: verbose
                  padre:value_default: '0'
                  padre:value_type: integer
                  rdfs:comment: The verbosity level.
                  rdfs:label: verbose
                algorithm:
                  '@schema':
                    '@id': padre:SGDRegressor/verbose
                    '@type': padre:ModelParameters
                    padre:configures: padre:SGDRegressor
              - '@schema':
                  '@id': padre:sklearn.linear_model.stochastic_gradient.SGDRegressor/epsilon
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.stochastic_gradient.SGDRegressor/epsilon
                  padre:implements: padre:SGDRegressor/epsilon
                  padre:optional: 'False'
                  padre:path: epsilon
                  padre:value_default: '0.1'
                  padre:value_type: float
                  rdfs:comment: "For \u2018huber\u2019, determines the threshold\
                  \ at which it becomes less important to get the prediction exactly\
                  \ right. For epsilon-insensitive, any differences between the current\
                  \ prediction and the correct label are ignored if they are less\
                  \ than this threshold."
                  rdfs:label: epsilon
                algorithm:
                  '@schema':
                    '@id': padre:SGDRegressor/epsilon
                    '@type': padre:ModelParameters
                    padre:configures: padre:SGDRegressor
              - '@schema':
                  '@id': padre:sklearn.linear_model.stochastic_gradient.SGDRegressor/random_state
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.stochastic_gradient.SGDRegressor/random_state
                  padre:implements: padre:SGDRegressor/random_state
                  padre:optional: 'True'
                  padre:path: random_state
                  padre:value_default: None
                  padre:value_type: '{integer, RandomState instance, None}'
                  rdfs:comment: The seed of the pseudo random number generator to
                    use when shuffling the data. If int, random_state is the seed used
                    by the random number generator; If RandomState instance, random_state
                    is the random number generator; If None, the random number generator
                    is the RandomState instance used by np.random.
                  rdfs:label: random_state
                algorithm:
                  '@schema':
                    '@id': padre:SGDRegressor/random_state
                    '@type': padre:ModelParameters
                    padre:configures: padre:SGDRegressor
              - '@schema':
                  '@id': padre:sklearn.linear_model.stochastic_gradient.SGDRegressor/learning_rate
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.stochastic_gradient.SGDRegressor/learning_rate
                  padre:implements: padre:SGDRegressor/learning_rate
                  padre:optional: 'True'
                  padre:path: learning_rate
                  padre:value_default: '''invscaling'''
                  padre:value_type: '{''constant'', ''optimal'', ''invscaling''}'
                  rdfs:comment: where t0 is chosen by a heuristic proposed by Leon
                    Bottou.
                  rdfs:label: learning_rate
                algorithm:
                  '@schema':
                    '@id': padre:SGDRegressor/learning_rate
                    '@type': padre:ModelParameters
                    padre:configures: padre:SGDRegressor
              - '@schema':
                  '@id': padre:sklearn.linear_model.stochastic_gradient.SGDRegressor/eta0
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.stochastic_gradient.SGDRegressor/eta0
                  padre:implements: padre:SGDRegressor/eta0
                  padre:optional: 'False'
                  padre:path: eta0
                  padre:value_default: '0.01'
                  padre:value_type: double
                  rdfs:comment: The initial learning rate for the 'constant' or
                    'invscaling' schedules.
                  rdfs:label: eta0
                algorithm:
                  '@schema':
                    '@id': padre:SGDRegressor/eta0
                    '@type': padre:ModelParameters
                    padre:configures: padre:SGDRegressor
              - '@schema':
                  '@id': padre:sklearn.linear_model.stochastic_gradient.SGDRegressor/inverse_scaling_exponent
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.stochastic_gradient.SGDRegressor/inverse_scaling_exponent
                  padre:implements: padre:SGDRegressor/inverse_scaling_exponent
                  padre:optional: 'False'
                  padre:path: power_t
                  padre:value_default: '0.25'
                  padre:value_type: double
                  rdfs:comment: The exponent for inverse scaling learning rate.
                  rdfs:label: inverse_scaling_exponent
                algorithm:
                  '@schema':
                    '@id': padre:SGDRegressor/inverse_scaling_exponent
                    '@type': padre:ModelParameters
                    padre:configures: padre:SGDRegressor
              - '@schema':
                  '@id': padre:sklearn.linear_model.stochastic_gradient.SGDRegressor/reuse_previous
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.stochastic_gradient.SGDRegressor/reuse_previous
                  padre:implements: padre:SGDRegressor/reuse_previous
                  padre:optional: 'True'
                  padre:path: warm_start
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: When set to True, reuse the solution of the previous
                    call to fit as initialization, otherwise, just erase the previous
                    solution.
                  rdfs:label: reuse_previous
                algorithm:
                  '@schema':
                    '@id': padre:SGDRegressor/reuse_previous
                    '@type': padre:ModelParameters
                    padre:configures: padre:SGDRegressor
              - '@schema':
                  '@id': padre:sklearn.linear_model.stochastic_gradient.SGDRegressor/average
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.stochastic_gradient.SGDRegressor/average
                  padre:implements: padre:SGDRegressor/average
                  padre:optional: 'True'
                  padre:path: average
                  padre:value_default: 'False'
                  padre:value_type: '{boolean, integer}'
                  rdfs:comment: When set to True, computes the averaged SGD weights
                    and stores the result in the coef_ attribute. If set to an int greater
                    than 1, averaging will begin once the total number of samples seen
                    reaches average. So average=10 will begin averaging after seeing
                    10 samples.
                  rdfs:label: average
                algorithm:
                  '@schema':
                    '@id': padre:SGDRegressor/average
                    '@type': padre:ModelParameters
                    padre:configures: padre:SGDRegressor
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.linear_model.stochastic_gradient.SGDRegressor/max_iterations
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.linear_model.stochastic_gradient.SGDRegressor/max_iterations
                  padre:implements: padre:SGDRegressor/max_iterations
                  padre:optional: 'True'
                  padre:path: max_iter
                  padre:value_default: None
                  padre:value_type: integer
                  rdfs:comment: Maximum number of iterations.
                  rdfs:label: max_iterations
                algorithm:
                  '@schema':
                    '@id': padre:SGDRegressor/max_iterations
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:SGDRegressor
    :linear_model.theil_sen.TheilSenRegressor:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.linear_model.theil_sen.TheilSenRegressor
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:TheilSenRegressor
            rdfs:comment: null
            rdfs:label: theil-sen estimator
          algorithm:
            '@schema':
              '@id': padre:TheilSenRegressor
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: theil-sen estimator
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.linear_model.theil_sen.TheilSenRegressor/fit_intercept
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.theil_sen.TheilSenRegressor/fit_intercept
                  padre:implements: padre:TheilSenRegressor/fit_intercept
                  padre:optional: 'True'
                  padre:path: fit_intercept
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: Whether to calculate the intercept for this model.
                  rdfs:label: fit_intercept
                algorithm:
                  '@schema':
                    '@id': padre:TheilSenRegressor/fit_intercept
                    '@type': padre:ModelParameters
                    padre:configures: padre:TheilSenRegressor
              - '@schema':
                  '@id': padre:sklearn.linear_model.theil_sen.TheilSenRegressor/copy_X
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.theil_sen.TheilSenRegressor/copy_X
                  padre:implements: padre:TheilSenRegressor/copy_X
                  padre:optional: 'True'
                  padre:path: copy_X
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: If True, X will be copied; else, it may be overwritten.
                  rdfs:label: copy_X
                algorithm:
                  '@schema':
                    '@id': padre:TheilSenRegressor/copy_X
                    '@type': padre:ModelParameters
                    padre:configures: padre:TheilSenRegressor
              - '@schema':
                  '@id': padre:sklearn.linear_model.theil_sen.TheilSenRegressor/max_subpopulation
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.theil_sen.TheilSenRegressor/max_subpopulation
                  padre:implements: padre:TheilSenRegressor/max_subpopulation
                  padre:optional: 'True'
                  padre:path: max_subpopulation
                  padre:value_default: '10000'
                  padre:value_type: integer
                  rdfs:comment: "Instead of computing with a set of cardinality\
                  \ \u2018n choose k\u2019, where n is the number of samples and k\
                  \ is the number of subsamples (at least number of features), consider\
                  \ only a stochastic subpopulation of a given maximal size if \u2018\
                  n choose k\u2019 is larger than max_subpopulation. For other than\
                  \ small problem sizes this parameter will determine memory usage\
                  \ and runtime if n_subsamples is not changed."
                  rdfs:label: max_subpopulation
                algorithm:
                  '@schema':
                    '@id': padre:TheilSenRegressor/max_subpopulation
                    '@type': padre:ModelParameters
                    padre:configures: padre:TheilSenRegressor
              - '@schema':
                  '@id': padre:sklearn.linear_model.theil_sen.TheilSenRegressor/num_subsamples
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.theil_sen.TheilSenRegressor/num_subsamples
                  padre:implements: padre:TheilSenRegressor/num_subsamples
                  padre:optional: 'True'
                  padre:path: n_subsamples
                  padre:value_default: None
                  padre:value_type: integer
                  rdfs:comment: Number of samples to calculate the parameters.
                  rdfs:label: num_subsamples
                algorithm:
                  '@schema':
                    '@id': padre:TheilSenRegressor/num_subsamples
                    '@type': padre:ModelParameters
                    padre:configures: padre:TheilSenRegressor
              - '@schema':
                  '@id': padre:sklearn.linear_model.theil_sen.TheilSenRegressor/tolerance
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.theil_sen.TheilSenRegressor/tolerance
                  padre:implements: padre:TheilSenRegressor/tolerance
                  padre:optional: 'True'
                  padre:path: tol
                  padre:value_default: '0.001'
                  padre:value_type: float
                  rdfs:comment: Tolerance when calculating spatial median.
                  rdfs:label: tolerance
                algorithm:
                  '@schema':
                    '@id': padre:TheilSenRegressor/tolerance
                    '@type': padre:ModelParameters
                    padre:configures: padre:TheilSenRegressor
              - '@schema':
                  '@id': padre:sklearn.linear_model.theil_sen.TheilSenRegressor/random_state
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.theil_sen.TheilSenRegressor/random_state
                  padre:implements: padre:TheilSenRegressor/random_state
                  padre:optional: 'True'
                  padre:path: random_state
                  padre:value_default: None
                  padre:value_type: '{integer, RandomState instance, None}'
                  rdfs:comment: The seed of the pseudo random number generator to
                    use when shuffling the data. If int, random_state is the seed used
                    by the random number generator; If RandomState instance, random_state
                    is the random number generator; If None, the random number generator
                    is the RandomState instance used by np.random.
                  rdfs:label: random_state
                algorithm:
                  '@schema':
                    '@id': padre:TheilSenRegressor/random_state
                    '@type': padre:ModelParameters
                    padre:configures: padre:TheilSenRegressor
              - '@schema':
                  '@id': padre:sklearn.linear_model.theil_sen.TheilSenRegressor/verbose
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.linear_model.theil_sen.TheilSenRegressor/verbose
                  padre:implements: padre:TheilSenRegressor/verbose
                  padre:optional: 'True'
                  padre:path: verbose
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: Verbose mode when fitting the model.
                  rdfs:label: verbose
                algorithm:
                  '@schema':
                    '@id': padre:TheilSenRegressor/verbose
                    '@type': padre:ModelParameters
                    padre:configures: padre:TheilSenRegressor
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.linear_model.theil_sen.TheilSenRegressor/max_iterations
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.linear_model.theil_sen.TheilSenRegressor/max_iterations
                  padre:implements: padre:TheilSenRegressor/max_iterations
                  padre:optional: 'True'
                  padre:path: max_iter
                  padre:value_default: '300'
                  padre:value_type: integer
                  rdfs:comment: Maximum number of iterations for the calculation
                    of spatial median.
                  rdfs:label: max_iterations
                algorithm:
                  '@schema':
                    '@id': padre:TheilSenRegressor/max_iterations
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:TheilSenRegressor
              - '@schema':
                  '@id': padre:sklearn.linear_model.theil_sen.TheilSenRegressor/jobs
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.linear_model.theil_sen.TheilSenRegressor/jobs
                  padre:implements: padre:TheilSenRegressor/jobs
                  padre:optional: 'True'
                  padre:path: n_jobs
                  padre:value_default: '1'
                  padre:value_type: integer
                  rdfs:comment: The number of CPUs to use for the computation. If
                    -1 all CPUs are used.
                  rdfs:label: jobs
                algorithm:
                  '@schema':
                    '@id': padre:TheilSenRegressor/jobs
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:TheilSenRegressor
    :manifold.isomap.Isomap:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.manifold.isomap.Isomap
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:Isomap
            rdfs:comment: null
            rdfs:label: isomap embedding
          algorithm:
            '@schema':
              '@id': padre:Isomap
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: isomap embedding
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.manifold.isomap.Isomap/num_neighbours
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.manifold.isomap.Isomap/num_neighbours
                  padre:implements: padre:Isomap/num_neighbours
                  padre:optional: 'False'
                  padre:path: n_neighbors
                  padre:value_default: '5'
                  padre:value_type: integer
                  rdfs:comment: Number of neighbors to consider for each point.
                  rdfs:label: num_neighbours
                algorithm:
                  '@schema':
                    '@id': padre:Isomap/num_neighbours
                    '@type': padre:ModelParameters
                    padre:configures: padre:Isomap
              - '@schema':
                  '@id': padre:sklearn.manifold.isomap.Isomap/num_components
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.manifold.isomap.Isomap/num_components
                  padre:implements: padre:Isomap/num_components
                  padre:optional: 'False'
                  padre:path: n_components
                  padre:value_default: '2'
                  padre:value_type: integer
                  rdfs:comment: Number of coordinates for the manifold.
                  rdfs:label: num_components
                algorithm:
                  '@schema':
                    '@id': padre:Isomap/num_components
                    '@type': padre:ModelParameters
                    padre:configures: padre:Isomap
              - '@schema':
                  '@id': padre:sklearn.manifold.isomap.Isomap/eigen_solver
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.manifold.isomap.Isomap/eigen_solver
                  padre:implements: padre:Isomap/eigen_solver
                  padre:optional: 'False'
                  padre:path: eigen_solver
                  padre:value_default: '''auto'''
                  padre:value_type: '{''auto'', ''arpack'', ''dense'']'
                  rdfs:comment: Solver for the eigenvalue decomposition.
                  rdfs:label: eigen_solver
                algorithm:
                  '@schema':
                    '@id': padre:Isomap/eigen_solver
                    '@type': padre:ModelParameters
                    padre:configures: padre:Isomap
              - '@schema':
                  '@id': padre:sklearn.manifold.isomap.Isomap/tolerance
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.manifold.isomap.Isomap/tolerance
                  padre:implements: padre:Isomap/tolerance
                  padre:optional: 'False'
                  padre:path: tol
                  padre:value_default: '0'
                  padre:value_type: float
                  rdfs:comment: Tolerance passed to the eigenvalue decomposition
                    solver
                  rdfs:label: tolerance
                algorithm:
                  '@schema':
                    '@id': padre:Isomap/tolerance
                    '@type': padre:ModelParameters
                    padre:configures: padre:Isomap
              - '@schema':
                  '@id': padre:sklearn.manifold.isomap.Isomap/path_method
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.manifold.isomap.Isomap/path_method
                  padre:implements: padre:Isomap/path_method
                  padre:optional: 'False'
                  padre:path: path_method
                  padre:value_default: '''auto'''
                  padre:value_type: '{''auto'', ''FW'', ''D''}'
                  rdfs:comment: "Method to use in finding shortest path. 'auto'\
                  \ : attempt to choose the best algorithm automatically. 'FW' : Floyd-Warshall\
                  \ algorithm. 'D' : Dijkstra\u2019s algorithm."
                  rdfs:label: path_method
                algorithm:
                  '@schema':
                    '@id': padre:Isomap/path_method
                    '@type': padre:ModelParameters
                    padre:configures: padre:Isomap
              - '@schema':
                  '@id': padre:sklearn.manifold.isomap.Isomap/neighbors_algorithm
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.manifold.isomap.Isomap/neighbors_algorithm
                  padre:implements: padre:Isomap/neighbors_algorithm
                  padre:optional: 'False'
                  padre:path: neighbors_algorithm
                  padre:value_default: '''auto'''
                  padre:value_type: '{''auto'', ''brute'', ''kd_tree'', ''ball_tree''}'
                  rdfs:comment: Algorithm to use for nearest neighbors search, passed
                    to neighbors. NearestNeighbors instance.
                  rdfs:label: neighbors_algorithm
                algorithm:
                  '@schema':
                    '@id': padre:Isomap/neighbors_algorithm
                    '@type': padre:ModelParameters
                    padre:configures: padre:Isomap
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.manifold.isomap.Isomap/max_iterations
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.manifold.isomap.Isomap/max_iterations
                  padre:implements: padre:Isomap/max_iterations
                  padre:optional: 'False'
                  padre:path: max_iter
                  padre:value_default: None
                  padre:value_type: integer
                  rdfs:comment: Maximum number of iterations for eigenvalue decomposition
                    solver.
                  rdfs:label: max_iterations
                algorithm:
                  '@schema':
                    '@id': padre:Isomap/max_iterations
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:Isomap
              - '@schema':
                  '@id': padre:sklearn.manifold.isomap.Isomap/jobs
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.manifold.isomap.Isomap/jobs
                  padre:implements: padre:Isomap/jobs
                  padre:optional: 'True'
                  padre:path: n_jobs
                  padre:value_default: '1'
                  padre:value_type: integer
                  rdfs:comment: The number of jobs to use for the computation. If
                    -1 all CPUs are used.
                  rdfs:label: jobs
                algorithm:
                  '@schema':
                    '@id': padre:Isomap/jobs
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:Isomap
    :manifold.locally_linear.LocallyLinearEmbedding:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.manifold.locally_linear.LocallyLinearEmbedding
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:LocallyLinearEmbedding
            rdfs:comment: null
            rdfs:label: object oriented locally linear embedding analysis
          algorithm:
            '@schema':
              '@id': padre:LocallyLinearEmbedding
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: object oriented locally linear embedding analysis
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.manifold.locally_linear.LocallyLinearEmbedding/num_neighbours
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.manifold.locally_linear.LocallyLinearEmbedding/num_neighbours
                  padre:implements: padre:LocallyLinearEmbedding/num_neighbours
                  padre:optional: 'False'
                  padre:path: n_neighbors
                  padre:value_default: '5'
                  padre:value_type: integer
                  rdfs:comment: Number of neighbors to consider for each point.
                  rdfs:label: num_neighbours
                algorithm:
                  '@schema':
                    '@id': padre:LocallyLinearEmbedding/num_neighbours
                    '@type': padre:ModelParameters
                    padre:configures: padre:LocallyLinearEmbedding
              - '@schema':
                  '@id': padre:sklearn.manifold.locally_linear.LocallyLinearEmbedding/num_components
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.manifold.locally_linear.LocallyLinearEmbedding/num_components
                  padre:implements: padre:LocallyLinearEmbedding/num_components
                  padre:optional: 'False'
                  padre:path: n_components
                  padre:value_default: '2'
                  padre:value_type: integer
                  rdfs:comment: Number of coordinates for the manifold.
                  rdfs:label: num_components
                algorithm:
                  '@schema':
                    '@id': padre:LocallyLinearEmbedding/num_components
                    '@type': padre:ModelParameters
                    padre:configures: padre:LocallyLinearEmbedding
              - '@schema':
                  '@id': padre:sklearn.manifold.locally_linear.LocallyLinearEmbedding/regularization_constant
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.manifold.locally_linear.LocallyLinearEmbedding/regularization_constant
                  padre:implements: padre:LocallyLinearEmbedding/regularization_constant
                  padre:optional: 'False'
                  padre:path: reg
                  padre:value_default: '0.001'
                  padre:value_type: float
                  rdfs:comment: Regularization constant, multiplies the trace of
                    the local covariance matrix of the distances.
                  rdfs:label: regularization_constant
                algorithm:
                  '@schema':
                    '@id': padre:LocallyLinearEmbedding/regularization_constant
                    '@type': padre:ModelParameters
                    padre:configures: padre:LocallyLinearEmbedding
              - '@schema':
                  '@id': padre:sklearn.manifold.locally_linear.LocallyLinearEmbedding/eigen_solver
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.manifold.locally_linear.LocallyLinearEmbedding/eigen_solver
                  padre:implements: padre:LocallyLinearEmbedding/eigen_solver
                  padre:optional: 'False'
                  padre:path: eigen_solver
                  padre:value_default: '''auto'''
                  padre:value_type: '{''auto'', ''arpack'', ''dense'']'
                  rdfs:comment: Solver for the eigenvalue decomposition.
                  rdfs:label: eigen_solver
                algorithm:
                  '@schema':
                    '@id': padre:LocallyLinearEmbedding/eigen_solver
                    '@type': padre:ModelParameters
                    padre:configures: padre:LocallyLinearEmbedding
              - '@schema':
                  '@id': padre:sklearn.manifold.locally_linear.LocallyLinearEmbedding/tolerance
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.manifold.locally_linear.LocallyLinearEmbedding/tolerance
                  padre:implements: padre:LocallyLinearEmbedding/tolerance
                  padre:optional: 'True'
                  padre:path: tol
                  padre:value_default: '0.000001'
                  padre:value_type: float
                  rdfs:comment: Tolerance passed to the eigenvalue decomposition
                    solver
                  rdfs:label: tolerance
                algorithm:
                  '@schema':
                    '@id': padre:LocallyLinearEmbedding/tolerance
                    '@type': padre:ModelParameters
                    padre:configures: padre:LocallyLinearEmbedding
              - '@schema':
                  '@id': padre:sklearn.manifold.locally_linear.LocallyLinearEmbedding/embedding_method
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.manifold.locally_linear.LocallyLinearEmbedding/embedding_method
                  padre:implements: padre:LocallyLinearEmbedding/embedding_method
                  padre:optional: 'False'
                  padre:path: method
                  padre:value_default: '''standard'''
                  padre:value_type: '{''standard'', ''hessian'', ''modified'', ''ltsa''}'
                  rdfs:comment: Embedding method.
                  rdfs:label: embedding_method
                algorithm:
                  '@schema':
                    '@id': padre:LocallyLinearEmbedding/embedding_method
                    '@type': padre:ModelParameters
                    padre:configures: padre:LocallyLinearEmbedding
              - '@schema':
                  '@id': padre:sklearn.manifold.locally_linear.LocallyLinearEmbedding/hessian_tol
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.manifold.locally_linear.LocallyLinearEmbedding/hessian_tol
                  padre:implements: padre:LocallyLinearEmbedding/hessian_tol
                  padre:optional: 'True'
                  padre:path: hessian_tol
                  padre:value_default: '0.0001'
                  padre:value_type: float
                  rdfs:comment: Tolerance for Hessian eigenmapping method.
                  rdfs:label: hessian_tol
                algorithm:
                  '@schema':
                    '@id': padre:LocallyLinearEmbedding/hessian_tol
                    '@type': padre:ModelParameters
                    padre:configures: padre:LocallyLinearEmbedding
              - '@schema':
                  '@id': padre:sklearn.manifold.locally_linear.LocallyLinearEmbedding/modified_tol
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.manifold.locally_linear.LocallyLinearEmbedding/modified_tol
                  padre:implements: padre:LocallyLinearEmbedding/modified_tol
                  padre:optional: 'True'
                  padre:path: modified_tol
                  padre:value_default: '0.000000000001'
                  padre:value_type: float
                  rdfs:comment: Tolerance for modified LLE method.
                  rdfs:label: modified_tol
                algorithm:
                  '@schema':
                    '@id': padre:LocallyLinearEmbedding/modified_tol
                    '@type': padre:ModelParameters
                    padre:configures: padre:LocallyLinearEmbedding
              - '@schema':
                  '@id': padre:sklearn.manifold.locally_linear.LocallyLinearEmbedding/neighbors_algorithm
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.manifold.locally_linear.LocallyLinearEmbedding/neighbors_algorithm
                  padre:implements: padre:LocallyLinearEmbedding/neighbors_algorithm
                  padre:optional: 'False'
                  padre:path: neighbors_algorithm
                  padre:value_default: '''auto'''
                  padre:value_type: '{''auto'', ''brute'', ''kd_tree'', ''ball_tree''}'
                  rdfs:comment: Algorithm to use for nearest neighbors search, passed
                    to neighbors.NearestNeighbors instance.
                  rdfs:label: neighbors_algorithm
                algorithm:
                  '@schema':
                    '@id': padre:LocallyLinearEmbedding/neighbors_algorithm
                    '@type': padre:ModelParameters
                    padre:configures: padre:LocallyLinearEmbedding
              - '@schema':
                  '@id': padre:sklearn.manifold.locally_linear.LocallyLinearEmbedding/random_state
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.manifold.locally_linear.LocallyLinearEmbedding/random_state
                  padre:implements: padre:LocallyLinearEmbedding/random_state
                  padre:optional: 'True'
                  padre:path: random_state
                  padre:value_default: None
                  padre:value_type: '{integer, RandomState instance, None}'
                  rdfs:comment: The seed of the pseudo random number generator to
                    use when shuffling the data. If int, random_state is the seed used
                    by the random number generator; If RandomState instance, random_state
                    is the random number generator; If None, the random number generator
                    is the RandomState instance used by np.random.
                  rdfs:label: random_state
                algorithm:
                  '@schema':
                    '@id': padre:LocallyLinearEmbedding/random_state
                    '@type': padre:ModelParameters
                    padre:configures: padre:LocallyLinearEmbedding
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.manifold.locally_linear.LocallyLinearEmbedding/max_iterations
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.manifold.locally_linear.LocallyLinearEmbedding/max_iterations
                  padre:implements: padre:LocallyLinearEmbedding/max_iterations
                  padre:optional: 'False'
                  padre:path: max_iter
                  padre:value_default: '100'
                  padre:value_type: integer
                  rdfs:comment: Maximum number of iterations for eigenvalue decomposition
                    solver.
                  rdfs:label: max_iterations
                algorithm:
                  '@schema':
                    '@id': padre:LocallyLinearEmbedding/max_iterations
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:LocallyLinearEmbedding
              - '@schema':
                  '@id': padre:sklearn.manifold.locally_linear.LocallyLinearEmbedding/jobs
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.manifold.locally_linear.LocallyLinearEmbedding/jobs
                  padre:implements: padre:LocallyLinearEmbedding/jobs
                  padre:optional: 'True'
                  padre:path: n_jobs
                  padre:value_default: '1'
                  padre:value_type: integer
                  rdfs:comment: The number of jobs to use for the computation. If
                    -1 all CPUs are used.
                  rdfs:label: jobs
                algorithm:
                  '@schema':
                    '@id': padre:LocallyLinearEmbedding/jobs
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:LocallyLinearEmbedding
    :manifold.locally_linear_embedding:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.manifold.locally_linear_embedding
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:locally_linear_embedding
            rdfs:comment: null
            rdfs:label: locally linear embedding analysis
          algorithm:
            '@schema':
              '@id': padre:locally_linear_embedding
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: locally linear embedding analysis
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.manifold.locally_linear_embedding/sample_data
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.manifold.locally_linear_embedding/sample_data
                  padre:implements: padre:locally_linear_embedding/sample_data
                  padre:optional: 'False'
                  padre:path: X
                  padre:value_default: ''
                  padre:value_type: '{array-like shape (n_samples, n_features), sparse
                  matrix, BallTree, KDTree, NearestNeighbors}'
                  rdfs:comment: Sample data.
                  rdfs:label: sample_data
                algorithm:
                  '@schema':
                    '@id': padre:locally_linear_embedding/sample_data
                    '@type': padre:ModelParameters
                    padre:configures: padre:locally_linear_embedding
              - '@schema':
                  '@id': padre:sklearn.manifold.locally_linear_embedding/num_neighbours
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.manifold.locally_linear_embedding/num_neighbours
                  padre:implements: padre:locally_linear_embedding/num_neighbours
                  padre:optional: 'False'
                  padre:path: n_neighbors
                  padre:value_default: ''
                  padre:value_type: integer
                  rdfs:comment: Number of neighbors to consider for each point.
                  rdfs:label: num_neighbours
                algorithm:
                  '@schema':
                    '@id': padre:locally_linear_embedding/num_neighbours
                    '@type': padre:ModelParameters
                    padre:configures: padre:locally_linear_embedding
              - '@schema':
                  '@id': padre:sklearn.manifold.locally_linear_embedding/num_components
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.manifold.locally_linear_embedding/num_components
                  padre:implements: padre:locally_linear_embedding/num_components
                  padre:optional: 'False'
                  padre:path: n_components
                  padre:value_default: ''
                  padre:value_type: integer
                  rdfs:comment: Number of coordinates for the manifold.
                  rdfs:label: num_components
                algorithm:
                  '@schema':
                    '@id': padre:locally_linear_embedding/num_components
                    '@type': padre:ModelParameters
                    padre:configures: padre:locally_linear_embedding
              - '@schema':
                  '@id': padre:sklearn.manifold.locally_linear_embedding/regularization_constant
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.manifold.locally_linear_embedding/regularization_constant
                  padre:implements: padre:locally_linear_embedding/regularization_constant
                  padre:optional: 'False'
                  padre:path: reg
                  padre:value_default: '0.001'
                  padre:value_type: float
                  rdfs:comment: Regularization constant, multiplies the trace of
                    the local covariance matrix of the distances.
                  rdfs:label: regularization_constant
                algorithm:
                  '@schema':
                    '@id': padre:locally_linear_embedding/regularization_constant
                    '@type': padre:ModelParameters
                    padre:configures: padre:locally_linear_embedding
              - '@schema':
                  '@id': padre:sklearn.manifold.locally_linear_embedding/eigen_solver
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.manifold.locally_linear_embedding/eigen_solver
                  padre:implements: padre:locally_linear_embedding/eigen_solver
                  padre:optional: 'False'
                  padre:path: eigen_solver
                  padre:value_default: '''auto'''
                  padre:value_type: '{''auto'', ''arpack'', ''dense'']'
                  rdfs:comment: Solver for the eigenvalue decomposition.
                  rdfs:label: eigen_solver
                algorithm:
                  '@schema':
                    '@id': padre:locally_linear_embedding/eigen_solver
                    '@type': padre:ModelParameters
                    padre:configures: padre:locally_linear_embedding
              - '@schema':
                  '@id': padre:sklearn.manifold.locally_linear_embedding/tolerance
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.manifold.locally_linear_embedding/tolerance
                  padre:implements: padre:locally_linear_embedding/tolerance
                  padre:optional: 'True'
                  padre:path: tol
                  padre:value_default: '0.000001'
                  padre:value_type: float
                  rdfs:comment: Tolerance passed to the eigenvalue decomposition
                    solver
                  rdfs:label: tolerance
                algorithm:
                  '@schema':
                    '@id': padre:locally_linear_embedding/tolerance
                    '@type': padre:ModelParameters
                    padre:configures: padre:locally_linear_embedding
              - '@schema':
                  '@id': padre:sklearn.manifold.locally_linear_embedding/embedding_method
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.manifold.locally_linear_embedding/embedding_method
                  padre:implements: padre:locally_linear_embedding/embedding_method
                  padre:optional: 'False'
                  padre:path: method
                  padre:value_default: '''standard'''
                  padre:value_type: '{''standard'', ''hessian'', ''modified'', ''ltsa''}'
                  rdfs:comment: Embedding method.
                  rdfs:label: embedding_method
                algorithm:
                  '@schema':
                    '@id': padre:locally_linear_embedding/embedding_method
                    '@type': padre:ModelParameters
                    padre:configures: padre:locally_linear_embedding
              - '@schema':
                  '@id': padre:sklearn.manifold.locally_linear_embedding/hessian_tol
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.manifold.locally_linear_embedding/hessian_tol
                  padre:implements: padre:locally_linear_embedding/hessian_tol
                  padre:optional: 'True'
                  padre:path: hessian_tol
                  padre:value_default: '0.0001'
                  padre:value_type: float
                  rdfs:comment: Tolerance for Hessian eigenmapping method.
                  rdfs:label: hessian_tol
                algorithm:
                  '@schema':
                    '@id': padre:locally_linear_embedding/hessian_tol
                    '@type': padre:ModelParameters
                    padre:configures: padre:locally_linear_embedding
              - '@schema':
                  '@id': padre:sklearn.manifold.locally_linear_embedding/modified_tol
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.manifold.locally_linear_embedding/modified_tol
                  padre:implements: padre:locally_linear_embedding/modified_tol
                  padre:optional: 'True'
                  padre:path: modified_tol
                  padre:value_default: '0.000000000001'
                  padre:value_type: float
                  rdfs:comment: Tolerance for modified LLE method.
                  rdfs:label: modified_tol
                algorithm:
                  '@schema':
                    '@id': padre:locally_linear_embedding/modified_tol
                    '@type': padre:ModelParameters
                    padre:configures: padre:locally_linear_embedding
              - '@schema':
                  '@id': padre:sklearn.manifold.locally_linear_embedding/random_state
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.manifold.locally_linear_embedding/random_state
                  padre:implements: padre:locally_linear_embedding/random_state
                  padre:optional: 'True'
                  padre:path: random_state
                  padre:value_default: None
                  padre:value_type: '{integer, RandomState instance, None}'
                  rdfs:comment: The seed of the pseudo random number generator to
                    use when shuffling the data. If int, random_state is the seed used
                    by the random number generator; If RandomState instance, random_state
                    is the random number generator; If None, the random number generator
                    is the RandomState instance used by np.random.
                  rdfs:label: random_state
                algorithm:
                  '@schema':
                    '@id': padre:locally_linear_embedding/random_state
                    '@type': padre:ModelParameters
                    padre:configures: padre:locally_linear_embedding
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.manifold.locally_linear_embedding/max_iterations
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.manifold.locally_linear_embedding/max_iterations
                  padre:implements: padre:locally_linear_embedding/max_iterations
                  padre:optional: 'False'
                  padre:path: max_iter
                  padre:value_default: '100'
                  padre:value_type: integer
                  rdfs:comment: Maximum number of iterations for eigenvalue decomposition
                    solver.
                  rdfs:label: max_iterations
                algorithm:
                  '@schema':
                    '@id': padre:locally_linear_embedding/max_iterations
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:locally_linear_embedding
              - '@schema':
                  '@id': padre:sklearn.manifold.locally_linear_embedding/jobs
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.manifold.locally_linear_embedding/jobs
                  padre:implements: padre:locally_linear_embedding/jobs
                  padre:optional: 'True'
                  padre:path: n_jobs
                  padre:value_default: '1'
                  padre:value_type: integer
                  rdfs:comment: The number of jobs to use for the computation. If
                    -1 all CPUs are used.
                  rdfs:label: jobs
                algorithm:
                  '@schema':
                    '@id': padre:locally_linear_embedding/jobs
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:locally_linear_embedding
    :manifold.mds.MDS:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.manifold.mds.MDS
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:MDS
            rdfs:comment: null
            rdfs:label: multidimensional scaling
          algorithm:
            '@schema':
              '@id': padre:MDS
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: multidimensional scaling
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.manifold.mds.MDS/num_components
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.manifold.mds.MDS/num_components
                  padre:implements: padre:MDS/num_components
                  padre:optional: 'False'
                  padre:path: n_components
                  padre:value_default: '2'
                  padre:value_type: integer
                  rdfs:comment: Number of coordinates for the manifold.
                  rdfs:label: num_components
                algorithm:
                  '@schema':
                    '@id': padre:MDS/num_components
                    '@type': padre:ModelParameters
                    padre:configures: padre:MDS
              - '@schema':
                  '@id': padre:sklearn.manifold.mds.MDS/metric_MDS
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.manifold.mds.MDS/metric_MDS
                  padre:implements: padre:MDS/metric_MDS
                  padre:optional: 'True'
                  padre:path: metric
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: If True, perform metric MDS; otherwise, perform
                    nonmetric MDS.
                  rdfs:label: metric_MDS
                algorithm:
                  '@schema':
                    '@id': padre:MDS/metric_MDS
                    '@type': padre:ModelParameters
                    padre:configures: padre:MDS
              - '@schema':
                  '@id': padre:sklearn.manifold.mds.MDS/verbose
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.manifold.mds.MDS/verbose
                  padre:implements: padre:MDS/verbose
                  padre:optional: 'True'
                  padre:path: verbose
                  padre:value_default: '0'
                  padre:value_type: integer
                  rdfs:comment: Level of verbosity.
                  rdfs:label: verbose
                algorithm:
                  '@schema':
                    '@id': padre:MDS/verbose
                    '@type': padre:ModelParameters
                    padre:configures: padre:MDS
              - '@schema':
                  '@id': padre:sklearn.manifold.mds.MDS/eps
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.manifold.mds.MDS/eps
                  padre:implements: padre:MDS/eps
                  padre:optional: 'True'
                  padre:path: eps
                  padre:value_default: '0.001'
                  padre:value_type: float
                  rdfs:comment: Relative tolerance with respect to stress at which
                    to declare convergence.
                  rdfs:label: eps
                algorithm:
                  '@schema':
                    '@id': padre:MDS/eps
                    '@type': padre:ModelParameters
                    padre:configures: padre:MDS
              - '@schema':
                  '@id': padre:sklearn.manifold.mds.MDS/random_state
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.manifold.mds.MDS/random_state
                  padre:implements: padre:MDS/random_state
                  padre:optional: 'True'
                  padre:path: random_state
                  padre:value_default: None
                  padre:value_type: '{integer, RandomState instance, None}'
                  rdfs:comment: The seed of the pseudo random number generator to
                    use when shuffling the data. If int, random_state is the seed used
                    by the random number generator; If RandomState instance, random_state
                    is the random number generator; If None, the random number generator
                    is the RandomState instance used by np.random.
                  rdfs:label: random_state
                algorithm:
                  '@schema':
                    '@id': padre:MDS/random_state
                    '@type': padre:ModelParameters
                    padre:configures: padre:MDS
              - '@schema':
                  '@id': padre:sklearn.manifold.mds.MDS/dissimilarity
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.manifold.mds.MDS/dissimilarity
                  padre:implements: padre:MDS/dissimilarity
                  padre:optional: 'True'
                  padre:path: dissimilarity
                  padre:value_default: '''euclidean'''
                  padre:value_type: '{''euclidean'', ''precomputed''}'
                  rdfs:comment: Dissimilarity measure to use.
                  rdfs:label: dissimilarity
                algorithm:
                  '@schema':
                    '@id': padre:MDS/dissimilarity
                    '@type': padre:ModelParameters
                    padre:configures: padre:MDS
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.manifold.mds.MDS/max_iterations
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.manifold.mds.MDS/max_iterations
                  padre:implements: padre:MDS/max_iterations
                  padre:optional: 'False'
                  padre:path: max_iter
                  padre:value_default: '300'
                  padre:value_type: integer
                  rdfs:comment: Maximum number of iterations of the SMACOF algorithm
                    for a single run.
                  rdfs:label: max_iterations
                algorithm:
                  '@schema':
                    '@id': padre:MDS/max_iterations
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:MDS
              - '@schema':
                  '@id': padre:sklearn.manifold.mds.MDS/jobs
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.manifold.mds.MDS/jobs
                  padre:implements: padre:MDS/jobs
                  padre:optional: 'True'
                  padre:path: n_jobs
                  padre:value_default: '1'
                  padre:value_type: integer
                  rdfs:comment: The number of jobs to use for the computation. If
                    -1 all CPUs are used.
                  rdfs:label: jobs
                algorithm:
                  '@schema':
                    '@id': padre:MDS/jobs
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:MDS
              - '@schema':
                  '@id': padre:sklearn.manifold.mds.MDS/num_initializations
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.manifold.mds.MDS/num_initializations
                  padre:implements: padre:MDS/num_initializations
                  padre:optional: 'True'
                  padre:path: n_init
                  padre:value_default: '4'
                  padre:value_type: integer
                  rdfs:comment: Number of times the SMACOF algorithm will be run
                    with different initializations. The final results will be the best
                    output of the runs, determined by the run with the smallest final
                    stress.
                  rdfs:label: num_initializations
                algorithm:
                  '@schema':
                    '@id': padre:MDS/num_initializations
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:MDS
    :manifold.spectral_embedding:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.manifold.spectral_embedding
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:spectral_embedding
            rdfs:comment: null
            rdfs:label: spectral embedding
          algorithm:
            '@schema':
              '@id': padre:spectral_embedding
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: spectral embedding
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.manifold.spectral_embedding/adjacency_matrix
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.manifold.spectral_embedding/adjacency_matrix
                  padre:implements: padre:spectral_embedding/adjacency_matrix
                  padre:optional: 'False'
                  padre:path: adjacency
                  padre:value_default: ''
                  padre:value_type: 'array-like or sparse matrix, shape: (n_samples,
                  n_samples)'
                  rdfs:comment: The adjacency matrix of the graph to embed.
                  rdfs:label: adjacency_matrix
                algorithm:
                  '@schema':
                    '@id': padre:spectral_embedding/adjacency_matrix
                    '@type': padre:ModelParameters
                    padre:configures: padre:spectral_embedding
              - '@schema':
                  '@id': padre:sklearn.manifold.spectral_embedding/num_components
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.manifold.spectral_embedding/num_components
                  padre:implements: padre:spectral_embedding/num_components
                  padre:optional: 'True'
                  padre:path: n_components
                  padre:value_default: '8'
                  padre:value_type: integer
                  rdfs:comment: The dimension of the projection subspace.
                  rdfs:label: num_components
                algorithm:
                  '@schema':
                    '@id': padre:spectral_embedding/num_components
                    '@type': padre:ModelParameters
                    padre:configures: padre:spectral_embedding
              - '@schema':
                  '@id': padre:sklearn.manifold.spectral_embedding/eigen_solver
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.manifold.spectral_embedding/eigen_solver
                  padre:implements: padre:spectral_embedding/eigen_solver
                  padre:optional: 'False'
                  padre:path: eigen_solver
                  padre:value_default: None
                  padre:value_type: '{''arpack'', ''lobpcg'', ''amg'', None}'
                  rdfs:comment: Solver for the eigenvalue decomposition.
                  rdfs:label: eigen_solver
                algorithm:
                  '@schema':
                    '@id': padre:spectral_embedding/eigen_solver
                    '@type': padre:ModelParameters
                    padre:configures: padre:spectral_embedding
              - '@schema':
                  '@id': padre:sklearn.manifold.spectral_embedding/eigen_tol
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.manifold.spectral_embedding/eigen_tol
                  padre:implements: padre:spectral_embedding/eigen_tol
                  padre:optional: 'True'
                  padre:path: eigen_tol
                  padre:value_default: '0.0'
                  padre:value_type: float
                  rdfs:comment: Stopping criterion for eigendecomposition of the
                    Laplacian matrix.
                  rdfs:label: eigen_tol
                algorithm:
                  '@schema':
                    '@id': padre:spectral_embedding/eigen_tol
                    '@type': padre:ModelParameters
                    padre:configures: padre:spectral_embedding
              - '@schema':
                  '@id': padre:sklearn.manifold.spectral_embedding/norm_laplacian
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.manifold.spectral_embedding/norm_laplacian
                  padre:implements: padre:spectral_embedding/norm_laplacian
                  padre:optional: 'True'
                  padre:path: norm_laplacian
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: If True, then compute normalized Laplacian.
                  rdfs:label: norm_laplacian
                algorithm:
                  '@schema':
                    '@id': padre:spectral_embedding/norm_laplacian
                    '@type': padre:ModelParameters
                    padre:configures: padre:spectral_embedding
              - '@schema':
                  '@id': padre:sklearn.manifold.spectral_embedding/drop_first
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.manifold.spectral_embedding/drop_first
                  padre:implements: padre:spectral_embedding/drop_first
                  padre:optional: 'True'
                  padre:path: drop_first
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: Whether to drop the first eigenvector. For spectral
                    embedding, this should be True as the first eigenvector should be
                    constant vector for connected graph, but for spectral clustering,
                    this should be kept as False to retain the first eigenvector.
                  rdfs:label: drop_first
                algorithm:
                  '@schema':
                    '@id': padre:spectral_embedding/drop_first
                    '@type': padre:ModelParameters
                    padre:configures: padre:spectral_embedding
            optimisation_parameters: []
    :manifold.spectral_embedding_.SpectralEmbedding:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.manifold.spectral_embedding_.SpectralEmbedding
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:SpectralEmbedding
            rdfs:comment: null
            rdfs:label: object oriented spectral embedding
          algorithm:
            '@schema':
              '@id': padre:SpectralEmbedding
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: object oriented spectral embedding
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.manifold.spectral_embedding_.SpectralEmbedding/num_components
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.manifold.spectral_embedding_.SpectralEmbedding/num_components
                  padre:implements: padre:SpectralEmbedding/num_components
                  padre:optional: 'True'
                  padre:path: n_components
                  padre:value_default: '8'
                  padre:value_type: integer
                  rdfs:comment: The dimension of the projection subspace.
                  rdfs:label: num_components
                algorithm:
                  '@schema':
                    '@id': padre:SpectralEmbedding/num_components
                    '@type': padre:ModelParameters
                    padre:configures: padre:SpectralEmbedding
              - '@schema':
                  '@id': padre:sklearn.manifold.spectral_embedding_.SpectralEmbedding/affinity_matrix
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.manifold.spectral_embedding_.SpectralEmbedding/affinity_matrix
                  padre:implements: padre:SpectralEmbedding/affinity_matrix
                  padre:optional: 'False'
                  padre:path: affinity
                  padre:value_default: '''nearest_neighbors'''
                  padre:value_type: '{''nearest_neighbors'', ''rbf'', ''precomputed'',
                  callable: use passed in function as affinity the function takes
                  in data matrix (n_samples, n_features) and return affinity matrix
                  (n_samples, n_samples)}'
                  rdfs:comment: How to construct the affinity matrix.
                  rdfs:label: affinity_matrix
                algorithm:
                  '@schema':
                    '@id': padre:SpectralEmbedding/affinity_matrix
                    '@type': padre:ModelParameters
                    padre:configures: padre:SpectralEmbedding
              - '@schema':
                  '@id': padre:sklearn.manifold.spectral_embedding_.SpectralEmbedding/gamma
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.manifold.spectral_embedding_.SpectralEmbedding/gamma
                  padre:implements: padre:SpectralEmbedding/gamma
                  padre:optional: 'True'
                  padre:path: gamma
                  padre:value_default: None
                  padre:value_type: '{float, None}'
                  rdfs:comment: Kernel coefficient for rbf kernel.
                  rdfs:label: gamma
                algorithm:
                  '@schema':
                    '@id': padre:SpectralEmbedding/gamma
                    '@type': padre:ModelParameters
                    padre:configures: padre:SpectralEmbedding
              - '@schema':
                  '@id': padre:sklearn.manifold.spectral_embedding_.SpectralEmbedding/eigen_solver
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.manifold.spectral_embedding_.SpectralEmbedding/eigen_solver
                  padre:implements: padre:SpectralEmbedding/eigen_solver
                  padre:optional: 'False'
                  padre:path: eigen_solver
                  padre:value_default: None
                  padre:value_type: '{''arpack'', ''lobpcg'', ''amg'', None}'
                  rdfs:comment: Solver for the eigenvalue decomposition.
                  rdfs:label: eigen_solver
                algorithm:
                  '@schema':
                    '@id': padre:SpectralEmbedding/eigen_solver
                    '@type': padre:ModelParameters
                    padre:configures: padre:SpectralEmbedding
              - '@schema':
                  '@id': padre:sklearn.manifold.spectral_embedding_.SpectralEmbedding/num_neighbours
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.manifold.spectral_embedding_.SpectralEmbedding/num_neighbours
                  padre:implements: padre:SpectralEmbedding/num_neighbours
                  padre:optional: 'False'
                  padre:path: n_neighbors
                  padre:value_default: None
                  padre:value_type: '{integer, None}'
                  rdfs:comment: Number of nearest neighbors for nearest_neighbors
                    graph building.
                  rdfs:label: num_neighbours
                algorithm:
                  '@schema':
                    '@id': padre:SpectralEmbedding/num_neighbours
                    '@type': padre:ModelParameters
                    padre:configures: padre:SpectralEmbedding
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.manifold.spectral_embedding_.SpectralEmbedding/jobs
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.manifold.spectral_embedding_.SpectralEmbedding/jobs
                  padre:implements: padre:SpectralEmbedding/jobs
                  padre:optional: 'True'
                  padre:path: n_jobs
                  padre:value_default: '1'
                  padre:value_type: integer
                  rdfs:comment: The number of jobs to use for the computation. If
                    -1 all CPUs are used.
                  rdfs:label: jobs
                algorithm:
                  '@schema':
                    '@id': padre:SpectralEmbedding/jobs
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:SpectralEmbedding
    :manifold.t_sne.TSNE:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.manifold.t_sne.TSNE
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:TSNE
            rdfs:comment: null
            rdfs:label: t-distributed stochastic neighbor embedding
          algorithm:
            '@schema':
              '@id': padre:TSNE
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: t-distributed stochastic neighbor embedding
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.manifold.t_sne.TSNE/num_components
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.manifold.t_sne.TSNE/num_components
                  padre:implements: padre:TSNE/num_components
                  padre:optional: 'True'
                  padre:path: n_components
                  padre:value_default: '2'
                  padre:value_type: integer
                  rdfs:comment: The dimension of the projection subspace.
                  rdfs:label: num_components
                algorithm:
                  '@schema':
                    '@id': padre:TSNE/num_components
                    '@type': padre:ModelParameters
                    padre:configures: padre:TSNE
              - '@schema':
                  '@id': padre:sklearn.manifold.t_sne.TSNE/perplexity
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.manifold.t_sne.TSNE/perplexity
                  padre:implements: padre:TSNE/perplexity
                  padre:optional: 'True'
                  padre:path: perplexity
                  padre:value_default: '30'
                  padre:value_type: float
                  rdfs:comment: The perplexity is related to the number of nearest
                    neighbors that is used in other manifold learning algorithms. Larger
                    datasets usually require a larger perplexity. Consider selecting
                    a value between 5 and 50. The choice is not extremely critical since
                    t-SNE is quite insensitive to this parameter.
                  rdfs:label: perplexity
                algorithm:
                  '@schema':
                    '@id': padre:TSNE/perplexity
                    '@type': padre:ModelParameters
                    padre:configures: padre:TSNE
              - '@schema':
                  '@id': padre:sklearn.manifold.t_sne.TSNE/early_exaggeration
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.manifold.t_sne.TSNE/early_exaggeration
                  padre:implements: padre:TSNE/early_exaggeration
                  padre:optional: 'True'
                  padre:path: early_exaggeration
                  padre:value_default: '12.0'
                  padre:value_type: float
                  rdfs:comment: Controls how tight natural clusters in the original
                    space are in the embedded space and how much space will be between
                    them. For larger values, the space between natural clusters will
                    be larger in the embedded space. Again, the choice of this parameter
                    is not very critical. If the cost function increases during initial
                    optimization, the early exaggeration factor or the learning rate
                    might be too high.
                  rdfs:label: early_exaggeration
                algorithm:
                  '@schema':
                    '@id': padre:TSNE/early_exaggeration
                    '@type': padre:ModelParameters
                    padre:configures: padre:TSNE
              - '@schema':
                  '@id': padre:sklearn.manifold.t_sne.TSNE/learning_rate
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.manifold.t_sne.TSNE/learning_rate
                  padre:implements: padre:TSNE/learning_rate
                  padre:optional: 'True'
                  padre:path: learning_rate
                  padre:value_default: '200.0'
                  padre:value_type: float
                  rdfs:comment: "The learning rate for t-SNE is usually in the range\
                  \ [10.0, 1000.0]. If the learning rate is too high, the data may\
                  \ look like a \u2018ball\u2019 with any point approximately equidistant\
                  \ from its nearest neighbours. If the learning rate is too low,\
                  \ most points may look compressed in a dense cloud with few outliers.\
                  \ If the cost function gets stuck in a bad local minimum increasing\
                  \ the learning rate may help."
                  rdfs:label: learning_rate
                algorithm:
                  '@schema':
                    '@id': padre:TSNE/learning_rate
                    '@type': padre:ModelParameters
                    padre:configures: padre:TSNE
              - '@schema':
                  '@id': padre:sklearn.manifold.t_sne.TSNE/min_grad_norm
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.manifold.t_sne.TSNE/min_grad_norm
                  padre:implements: padre:TSNE/min_grad_norm
                  padre:optional: 'True'
                  padre:path: min_grad_norm
                  padre:value_default: '0.0000001'
                  padre:value_type: float
                  rdfs:comment: If the gradient norm is below this threshold, the
                    optimization will be stopped.
                  rdfs:label: min_grad_norm
                algorithm:
                  '@schema':
                    '@id': padre:TSNE/min_grad_norm
                    '@type': padre:ModelParameters
                    padre:configures: padre:TSNE
              - '@schema':
                  '@id': padre:sklearn.manifold.t_sne.TSNE/distance_metric
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.manifold.t_sne.TSNE/distance_metric
                  padre:implements: padre:TSNE/distance_metric
                  padre:optional: 'False'
                  padre:path: metric
                  padre:value_default: '''euclidean'''
                  padre:value_type: '{''cityblock'', ''cosine'', ''euclidean'', ''l1'',
                  ''l2'', ''manhattan'', ''braycurtis'', ''canberra'', ''chebyshev'',
                  ''correlation'', ''dice'', ''hamming'', ''jaccard'', ''kulsinski'',
                  ''mahalanobis'', ''matching'', ''minkowski'', ''rogerstanimoto'',
                  ''russellrao'', ''seuclidean'', ''sokalmichener'', ''sokalsneath'',
                  ''sqeuclidean'', ''yule'', a callable that should take two arrays
                  as input and return one value indicating the distance between them}'
                  rdfs:comment: The metric to use when calculating distance between
                    instances in a feature array.
                  rdfs:label: distance_metric
                algorithm:
                  '@schema':
                    '@id': padre:TSNE/distance_metric
                    '@type': padre:ModelParameters
                    padre:configures: padre:TSNE
              - '@schema':
                  '@id': padre:sklearn.manifold.t_sne.TSNE/initialisation
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.manifold.t_sne.TSNE/initialisation
                  padre:implements: padre:TSNE/initialisation
                  padre:optional: 'True'
                  padre:path: init
                  padre:value_default: '''random'''
                  padre:value_type: '{''random'', ''pca'', numpy array of shape (n_samples,
                  n_components)}'
                  rdfs:comment: Initialization of embedding.
                  rdfs:label: initialisation
                algorithm:
                  '@schema':
                    '@id': padre:TSNE/initialisation
                    '@type': padre:ModelParameters
                    padre:configures: padre:TSNE
              - '@schema':
                  '@id': padre:sklearn.manifold.t_sne.TSNE/verbose
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.manifold.t_sne.TSNE/verbose
                  padre:implements: padre:TSNE/verbose
                  padre:optional: 'True'
                  padre:path: verbose
                  padre:value_default: '0'
                  padre:value_type: integer
                  rdfs:comment: Controls the verbosity level.
                  rdfs:label: verbose
                algorithm:
                  '@schema':
                    '@id': padre:TSNE/verbose
                    '@type': padre:ModelParameters
                    padre:configures: padre:TSNE
              - '@schema':
                  '@id': padre:sklearn.manifold.t_sne.TSNE/random_state
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.manifold.t_sne.TSNE/random_state
                  padre:implements: padre:TSNE/random_state
                  padre:optional: 'True'
                  padre:path: random_state
                  padre:value_default: None
                  padre:value_type: '{integer, RandomState instance, None}'
                  rdfs:comment: The seed of the pseudo random number generator to
                    use when shuffling the data. If int, random_state is the seed used
                    by the random number generator; If RandomState instance, random_state
                    is the random number generator; If None, the random number generator
                    is the RandomState instance used by np.random.
                  rdfs:label: random_state
                algorithm:
                  '@schema':
                    '@id': padre:TSNE/random_state
                    '@type': padre:ModelParameters
                    padre:configures: padre:TSNE
              - '@schema':
                  '@id': padre:sklearn.manifold.t_sne.TSNE/optimisation_method
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.manifold.t_sne.TSNE/optimisation_method
                  padre:implements: padre:TSNE/optimisation_method
                  padre:optional: 'False'
                  padre:path: method
                  padre:value_default: '''barnes_hut'''
                  padre:value_type: '{''barnes_hut'', ''exact''}'
                  rdfs:comment: Gradient calculation algorithm optimisation.
                  rdfs:label: optimisation_method
                algorithm:
                  '@schema':
                    '@id': padre:TSNE/optimisation_method
                    '@type': padre:ModelParameters
                    padre:configures: padre:TSNE
              - '@schema':
                  '@id': padre:sklearn.manifold.t_sne.TSNE/angle
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.manifold.t_sne.TSNE/angle
                  padre:implements: padre:TSNE/angle
                  padre:optional: 'False'
                  padre:path: angle
                  padre:value_default: '0.5'
                  padre:value_type: float
                  rdfs:comment: The angular size of a distant node as measured from
                    a point. If this size is below 'angle' then it is used as a summary
                    node of all points contained within it. This method is not very
                    sensitive to changes in this parameter in the range of 0.2 - 0.8.
                    Angle less than 0.2 has quickly increasing computation time and
                    angle greater 0.8 has quickly increasing error.
                  rdfs:label: angle
                algorithm:
                  '@schema':
                    '@id': padre:TSNE/angle
                    '@type': padre:ModelParameters
                    padre:configures: padre:TSNE
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.manifold.t_sne.TSNE/max_iterations
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.manifold.t_sne.TSNE/max_iterations
                  padre:implements: padre:TSNE/max_iterations
                  padre:optional: 'True'
                  padre:path: n_iter
                  padre:value_default: '1000'
                  padre:value_type: integer
                  rdfs:comment: Maximum number of iterations for the optimization.
                  rdfs:label: max_iterations
                algorithm:
                  '@schema':
                    '@id': padre:TSNE/max_iterations
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:TSNE
              - '@schema':
                  '@id': padre:sklearn.manifold.t_sne.TSNE/max_iterations_without_progress
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.manifold.t_sne.TSNE/max_iterations_without_progress
                  padre:implements: padre:TSNE/max_iterations_without_progress
                  padre:optional: 'True'
                  padre:path: n_iter_without_progress
                  padre:value_default: '300'
                  padre:value_type: integer
                  rdfs:comment: Maximum number of iterations without progress before
                    we abort the optimization, used after 250 initial iterations with
                    early exaggeration. Note that progress is only checked every 50
                    iterations so this value is rounded to the next multiple of 50.
                  rdfs:label: max_iterations_without_progress
                algorithm:
                  '@schema':
                    '@id': padre:TSNE/max_iterations_without_progress
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:TSNE
    :mixture.bayesian_mixture.BayesianGaussianMixture:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.mixture.bayesian_mixture.BayesianGaussianMixture
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:BayesianGaussianMixture
            rdfs:comment: null
            rdfs:label: Bayesian Gaussian mixture
          algorithm:
            '@schema':
              '@id': padre:BayesianGaussianMixture
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: Bayesian Gaussian mixture
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.mixture.bayesian_mixture.BayesianGaussianMixture/num_components
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.mixture.bayesian_mixture.BayesianGaussianMixture/num_components
                  padre:implements: padre:BayesianGaussianMixture/num_components
                  padre:optional: 'False'
                  padre:path: n_components
                  padre:value_default: '1'
                  padre:value_type: integer
                  rdfs:comment: The number of mixture components.
                  rdfs:label: num_components
                algorithm:
                  '@schema':
                    '@id': padre:BayesianGaussianMixture/num_components
                    '@type': padre:ModelParameters
                    padre:configures: padre:BayesianGaussianMixture
              - '@schema':
                  '@id': padre:sklearn.mixture.bayesian_mixture.BayesianGaussianMixture/covariance_type
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.mixture.bayesian_mixture.BayesianGaussianMixture/covariance_type
                  padre:implements: padre:BayesianGaussianMixture/covariance_type
                  padre:optional: 'False'
                  padre:path: covariance_type
                  padre:value_default: '''full'''
                  padre:value_type: '{''full'', ''tied'', ''diag'', ''spherical''}'
                  rdfs:comment: String describing the type of covariance parameters
                    to use.
                  rdfs:label: covariance_type
                algorithm:
                  '@schema':
                    '@id': padre:BayesianGaussianMixture/covariance_type
                    '@type': padre:ModelParameters
                    padre:configures: padre:BayesianGaussianMixture
              - '@schema':
                  '@id': padre:sklearn.mixture.bayesian_mixture.BayesianGaussianMixture/tolerance
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.mixture.bayesian_mixture.BayesianGaussianMixture/tolerance
                  padre:implements: padre:BayesianGaussianMixture/tolerance
                  padre:optional: 'False'
                  padre:path: tol
                  padre:value_default: '0.001'
                  padre:value_type: float
                  rdfs:comment: The convergence threshold.
                  rdfs:label: tolerance
                algorithm:
                  '@schema':
                    '@id': padre:BayesianGaussianMixture/tolerance
                    '@type': padre:ModelParameters
                    padre:configures: padre:BayesianGaussianMixture
              - '@schema':
                  '@id': padre:sklearn.mixture.bayesian_mixture.BayesianGaussianMixture/reg_covariance
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.mixture.bayesian_mixture.BayesianGaussianMixture/reg_covariance
                  padre:implements: padre:BayesianGaussianMixture/reg_covariance
                  padre:optional: 'False'
                  padre:path: reg_covar
                  padre:value_default: '0.000001'
                  padre:value_type: float
                  rdfs:comment: Non-negative regularization added to the diagonal
                    of covariance. Allows to assure that the covariance matrices are
                    all positive.
                  rdfs:label: reg_covariance
                algorithm:
                  '@schema':
                    '@id': padre:BayesianGaussianMixture/reg_covariance
                    '@type': padre:ModelParameters
                    padre:configures: padre:BayesianGaussianMixture
              - '@schema':
                  '@id': padre:sklearn.mixture.bayesian_mixture.BayesianGaussianMixture/init_params
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.mixture.bayesian_mixture.BayesianGaussianMixture/init_params
                  padre:implements: padre:BayesianGaussianMixture/init_params
                  padre:optional: 'False'
                  padre:path: init_params
                  padre:value_default: '''kmeans'''
                  padre:value_type: '{''kmeans'', ''random''}'
                  rdfs:comment: The method used to initialize the weights, the means
                    and the precisions.
                  rdfs:label: init_params
                algorithm:
                  '@schema':
                    '@id': padre:BayesianGaussianMixture/init_params
                    '@type': padre:ModelParameters
                    padre:configures: padre:BayesianGaussianMixture
              - '@schema':
                  '@id': padre:sklearn.mixture.bayesian_mixture.BayesianGaussianMixture/weight_concentration_prior_type
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.mixture.bayesian_mixture.BayesianGaussianMixture/weight_concentration_prior_type
                  padre:implements: padre:BayesianGaussianMixture/weight_concentration_prior_type
                  padre:optional: 'False'
                  padre:path: weight_concentration_prior_type
                  padre:value_default: '''dirichlet_process'''
                  padre:value_type: '{''dirichlet_process'', ''dirichlet_distribution''}'
                  rdfs:comment: String describing the type of the weight concentration
                    prior.
                  rdfs:label: weight_concentration_prior_type
                algorithm:
                  '@schema':
                    '@id': padre:BayesianGaussianMixture/weight_concentration_prior_type
                    '@type': padre:ModelParameters
                    padre:configures: padre:BayesianGaussianMixture
              - '@schema':
                  '@id': padre:sklearn.mixture.bayesian_mixture.BayesianGaussianMixture/weight_concentration_prior
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.mixture.bayesian_mixture.BayesianGaussianMixture/weight_concentration_prior
                  padre:implements: padre:BayesianGaussianMixture/weight_concentration_prior
                  padre:optional: 'True'
                  padre:path: weight_concentration_prior
                  padre:value_default: None
                  padre:value_type: '{float > 0, None}'
                  rdfs:comment: The dirichlet concentration of each component on
                    the weight distribution (Dirichlet). This is commonly called gamma
                    in the literature. The higher concentration puts more mass in the
                    center and will lead to more components being active, while a lower
                    concentration parameter will lead to more mass at the edge of the
                    mixture weights simplex.
                  rdfs:label: weight_concentration_prior
                algorithm:
                  '@schema':
                    '@id': padre:BayesianGaussianMixture/weight_concentration_prior
                    '@type': padre:ModelParameters
                    padre:configures: padre:BayesianGaussianMixture
              - '@schema':
                  '@id': padre:sklearn.mixture.bayesian_mixture.BayesianGaussianMixture/mean_precision_prior
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.mixture.bayesian_mixture.BayesianGaussianMixture/mean_precision_prior
                  padre:implements: padre:BayesianGaussianMixture/mean_precision_prior
                  padre:optional: 'True'
                  padre:path: mean_precision_prior
                  padre:value_default: None
                  padre:value_type: '{float > 0, None}'
                  rdfs:comment: The precision prior on the mean distribution (Gaussian).
                    Controls the extend to where means can be placed. Smaller values
                    concentrate the means of each clusters around mean_prior.
                  rdfs:label: mean_precision_prior
                algorithm:
                  '@schema':
                    '@id': padre:BayesianGaussianMixture/mean_precision_prior
                    '@type': padre:ModelParameters
                    padre:configures: padre:BayesianGaussianMixture
              - '@schema':
                  '@id': padre:sklearn.mixture.bayesian_mixture.BayesianGaussianMixture/mean_prior
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.mixture.bayesian_mixture.BayesianGaussianMixture/mean_prior
                  padre:implements: padre:BayesianGaussianMixture/mean_prior
                  padre:optional: 'True'
                  padre:path: mean_prior
                  padre:value_default: None
                  padre:value_type: '{array-like, shape (n_features, ), None}'
                  rdfs:comment: The prior on the mean distribution (Gaussian).
                  rdfs:label: mean_prior
                algorithm:
                  '@schema':
                    '@id': padre:BayesianGaussianMixture/mean_prior
                    '@type': padre:ModelParameters
                    padre:configures: padre:BayesianGaussianMixture
              - '@schema':
                  '@id': padre:sklearn.mixture.bayesian_mixture.BayesianGaussianMixture/degrees_of_freedom_prior
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.mixture.bayesian_mixture.BayesianGaussianMixture/degrees_of_freedom_prior
                  padre:implements: padre:BayesianGaussianMixture/degrees_of_freedom_prior
                  padre:optional: 'True'
                  padre:path: degrees_of_freedom_prior
                  padre:value_default: None
                  padre:value_type: '{float, None}'
                  rdfs:comment: 'The prior of the number of degrees of freedom on
                  the covariance distributions (Wishart). '
                  rdfs:label: degrees_of_freedom_prior
                algorithm:
                  '@schema':
                    '@id': padre:BayesianGaussianMixture/degrees_of_freedom_prior
                    '@type': padre:ModelParameters
                    padre:configures: padre:BayesianGaussianMixture
              - '@schema':
                  '@id': padre:sklearn.mixture.bayesian_mixture.BayesianGaussianMixture/covariance_prior
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.mixture.bayesian_mixture.BayesianGaussianMixture/covariance_prior
                  padre:implements: padre:BayesianGaussianMixture/covariance_prior
                  padre:optional: 'True'
                  padre:path: covariance_prior
                  padre:value_default: None
                  padre:value_type: '{array-like depending on ''covariance_type'': float
                  if ''spherical'', (n_features, n_features) if ''tied'', (n_features,
                  ) if ''diag'',(n_features, n_features) if ''full'', None}'
                  rdfs:comment: The user-provided initial precisions (inverse of
                    the covariance matrices).
                  rdfs:label: covariance_prior
                algorithm:
                  '@schema':
                    '@id': padre:BayesianGaussianMixture/covariance_prior
                    '@type': padre:ModelParameters
                    padre:configures: padre:BayesianGaussianMixture
              - '@schema':
                  '@id': padre:sklearn.mixture.bayesian_mixture.BayesianGaussianMixture/random_state
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.mixture.bayesian_mixture.BayesianGaussianMixture/random_state
                  padre:implements: padre:BayesianGaussianMixture/random_state
                  padre:optional: 'True'
                  padre:path: random_state
                  padre:value_default: None
                  padre:value_type: '{integer, RandomState instance, None}'
                  rdfs:comment: The seed of the pseudo random number generator to
                    use when shuffling the data. If int, random_state is the seed used
                    by the random number generator; If RandomState instance, random_state
                    is the random number generator; If None, the random number generator
                    is the RandomState instance used by np.random.
                  rdfs:label: random_state
                algorithm:
                  '@schema':
                    '@id': padre:BayesianGaussianMixture/random_state
                    '@type': padre:ModelParameters
                    padre:configures: padre:BayesianGaussianMixture
              - '@schema':
                  '@id': padre:sklearn.mixture.bayesian_mixture.BayesianGaussianMixture/reuse_previous
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.mixture.bayesian_mixture.BayesianGaussianMixture/reuse_previous
                  padre:implements: padre:BayesianGaussianMixture/reuse_previous
                  padre:optional: 'False'
                  padre:path: warm_start
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: When set to True, reuse the solution of the previous
                    call to fit as initialization, otherwise, just erase the previous
                    solution.
                  rdfs:label: reuse_previous
                algorithm:
                  '@schema':
                    '@id': padre:BayesianGaussianMixture/reuse_previous
                    '@type': padre:ModelParameters
                    padre:configures: padre:BayesianGaussianMixture
              - '@schema':
                  '@id': padre:sklearn.mixture.bayesian_mixture.BayesianGaussianMixture/verbose
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.mixture.bayesian_mixture.BayesianGaussianMixture/verbose
                  padre:implements: padre:BayesianGaussianMixture/verbose
                  padre:optional: 'False'
                  padre:path: verbose
                  padre:value_default: '0'
                  padre:value_type: integer
                  rdfs:comment: Enable verbose output. If 1 then it prints the current
                    initialization and each iteration step. If greater than 1 then it
                    prints also the log probability and the time needed for each step.
                  rdfs:label: verbose
                algorithm:
                  '@schema':
                    '@id': padre:BayesianGaussianMixture/verbose
                    '@type': padre:ModelParameters
                    padre:configures: padre:BayesianGaussianMixture
              - '@schema':
                  '@id': padre:sklearn.mixture.bayesian_mixture.BayesianGaussianMixture/verbose_interval
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.mixture.bayesian_mixture.BayesianGaussianMixture/verbose_interval
                  padre:implements: padre:BayesianGaussianMixture/verbose_interval
                  padre:optional: 'False'
                  padre:path: verbose_interval
                  padre:value_default: '10'
                  padre:value_type: integer
                  rdfs:comment: Number of iteration done before the next print.
                  rdfs:label: verbose_interval
                algorithm:
                  '@schema':
                    '@id': padre:BayesianGaussianMixture/verbose_interval
                    '@type': padre:ModelParameters
                    padre:configures: padre:BayesianGaussianMixture
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.mixture.bayesian_mixture.BayesianGaussianMixture/max_iterations
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.mixture.bayesian_mixture.BayesianGaussianMixture/max_iterations
                  padre:implements: padre:BayesianGaussianMixture/max_iterations
                  padre:optional: 'True'
                  padre:path: max_iter
                  padre:value_default: '100'
                  padre:value_type: integer
                  rdfs:comment: Maximum number of iterations.
                  rdfs:label: max_iterations
                algorithm:
                  '@schema':
                    '@id': padre:BayesianGaussianMixture/max_iterations
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:BayesianGaussianMixture
              - '@schema':
                  '@id': padre:sklearn.mixture.bayesian_mixture.BayesianGaussianMixture/num_initializations
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.mixture.bayesian_mixture.BayesianGaussianMixture/num_initializations
                  padre:implements: padre:BayesianGaussianMixture/num_initializations
                  padre:optional: 'False'
                  padre:path: n_init
                  padre:value_default: '1'
                  padre:value_type: integer
                  rdfs:comment: The number of initializations to perform. The best
                    results are kept.
                  rdfs:label: num_initializations
                algorithm:
                  '@schema':
                    '@id': padre:BayesianGaussianMixture/num_initializations
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:BayesianGaussianMixture
    :mixture.gaussian_mixture.GaussianMixture:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.mixture.gaussian_mixture.GaussianMixture
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:GaussianMixture
            rdfs:comment: null
            rdfs:label: Gaussian mixture
          algorithm:
            '@schema':
              '@id': padre:GaussianMixture
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: Gaussian mixture
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.mixture.gaussian_mixture.GaussianMixture/num_components
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.mixture.gaussian_mixture.GaussianMixture/num_components
                  padre:implements: padre:GaussianMixture/num_components
                  padre:optional: 'False'
                  padre:path: n_components
                  padre:value_default: '1'
                  padre:value_type: integer
                  rdfs:comment: The number of mixture components.
                  rdfs:label: num_components
                algorithm:
                  '@schema':
                    '@id': padre:GaussianMixture/num_components
                    '@type': padre:ModelParameters
                    padre:configures: padre:GaussianMixture
              - '@schema':
                  '@id': padre:sklearn.mixture.gaussian_mixture.GaussianMixture/covariance_type
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.mixture.gaussian_mixture.GaussianMixture/covariance_type
                  padre:implements: padre:GaussianMixture/covariance_type
                  padre:optional: 'False'
                  padre:path: covariance_type
                  padre:value_default: '''full'''
                  padre:value_type: '{''full'', ''tied'', ''diag'', ''spherical''}'
                  rdfs:comment: String describing the type of covariance parameters
                    to use.
                  rdfs:label: covariance_type
                algorithm:
                  '@schema':
                    '@id': padre:GaussianMixture/covariance_type
                    '@type': padre:ModelParameters
                    padre:configures: padre:GaussianMixture
              - '@schema':
                  '@id': padre:sklearn.mixture.gaussian_mixture.GaussianMixture/tolerance
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.mixture.gaussian_mixture.GaussianMixture/tolerance
                  padre:implements: padre:GaussianMixture/tolerance
                  padre:optional: 'False'
                  padre:path: tol
                  padre:value_default: '0.001'
                  padre:value_type: float
                  rdfs:comment: The convergence threshold.
                  rdfs:label: tolerance
                algorithm:
                  '@schema':
                    '@id': padre:GaussianMixture/tolerance
                    '@type': padre:ModelParameters
                    padre:configures: padre:GaussianMixture
              - '@schema':
                  '@id': padre:sklearn.mixture.gaussian_mixture.GaussianMixture/reg_covariance
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.mixture.gaussian_mixture.GaussianMixture/reg_covariance
                  padre:implements: padre:GaussianMixture/reg_covariance
                  padre:optional: 'False'
                  padre:path: reg_covar
                  padre:value_default: '0.000001'
                  padre:value_type: float
                  rdfs:comment: Non-negative regularization added to the diagonal
                    of covariance. Allows to assure that the covariance matrices are
                    all positive.
                  rdfs:label: reg_covariance
                algorithm:
                  '@schema':
                    '@id': padre:GaussianMixture/reg_covariance
                    '@type': padre:ModelParameters
                    padre:configures: padre:GaussianMixture
              - '@schema':
                  '@id': padre:sklearn.mixture.gaussian_mixture.GaussianMixture/init_params
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.mixture.gaussian_mixture.GaussianMixture/init_params
                  padre:implements: padre:GaussianMixture/init_params
                  padre:optional: 'False'
                  padre:path: init_params
                  padre:value_default: '''kmeans'''
                  padre:value_type: '{''kmeans'', ''random''}'
                  rdfs:comment: The method used to initialize the weights, the means
                    and the precisions.
                  rdfs:label: init_params
                algorithm:
                  '@schema':
                    '@id': padre:GaussianMixture/init_params
                    '@type': padre:ModelParameters
                    padre:configures: padre:GaussianMixture
              - '@schema':
                  '@id': padre:sklearn.mixture.gaussian_mixture.GaussianMixture/weights_init
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.mixture.gaussian_mixture.GaussianMixture/weights_init
                  padre:implements: padre:GaussianMixture/weights_init
                  padre:optional: 'True'
                  padre:path: weights_init
                  padre:value_default: None
                  padre:value_type: '{array-like, shape (n_components, ), None}'
                  rdfs:comment: The user-provided initial weights.
                  rdfs:label: weights_init
                algorithm:
                  '@schema':
                    '@id': padre:GaussianMixture/weights_init
                    '@type': padre:ModelParameters
                    padre:configures: padre:GaussianMixture
              - '@schema':
                  '@id': padre:sklearn.mixture.gaussian_mixture.GaussianMixture/means_init
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.mixture.gaussian_mixture.GaussianMixture/means_init
                  padre:implements: padre:GaussianMixture/means_init
                  padre:optional: 'True'
                  padre:path: means_init
                  padre:value_default: None
                  padre:value_type: '{array-like, shape (n_components,  n_features),
                  None}'
                  rdfs:comment: The user-provided initial means.
                  rdfs:label: means_init
                algorithm:
                  '@schema':
                    '@id': padre:GaussianMixture/means_init
                    '@type': padre:ModelParameters
                    padre:configures: padre:GaussianMixture
              - '@schema':
                  '@id': padre:sklearn.mixture.gaussian_mixture.GaussianMixture/precisions_init
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.mixture.gaussian_mixture.GaussianMixture/precisions_init
                  padre:implements: padre:GaussianMixture/precisions_init
                  padre:optional: 'True'
                  padre:path: precisions_init
                  padre:value_default: None
                  padre:value_type: '{array-like depending on ''covariance_type'': (n_components,)
                  if ''spherical'', (n_features, n_features) if ''tied'', (n_components,
                  n_features) if ''diag'',(n_components, n_features, n_features) if
                  ''full'', None}'
                  rdfs:comment: The user-provided initial precisions (inverse of
                    the covariance matrices).
                  rdfs:label: precisions_init
                algorithm:
                  '@schema':
                    '@id': padre:GaussianMixture/precisions_init
                    '@type': padre:ModelParameters
                    padre:configures: padre:GaussianMixture
              - '@schema':
                  '@id': padre:sklearn.mixture.gaussian_mixture.GaussianMixture/random_state
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.mixture.gaussian_mixture.GaussianMixture/random_state
                  padre:implements: padre:GaussianMixture/random_state
                  padre:optional: 'True'
                  padre:path: random_state
                  padre:value_default: None
                  padre:value_type: '{integer, RandomState instance, None}'
                  rdfs:comment: The seed of the pseudo random number generator to
                    use when shuffling the data. If int, random_state is the seed used
                    by the random number generator; If RandomState instance, random_state
                    is the random number generator; If None, the random number generator
                    is the RandomState instance used by np.random.
                  rdfs:label: random_state
                algorithm:
                  '@schema':
                    '@id': padre:GaussianMixture/random_state
                    '@type': padre:ModelParameters
                    padre:configures: padre:GaussianMixture
              - '@schema':
                  '@id': padre:sklearn.mixture.gaussian_mixture.GaussianMixture/reuse_previous
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.mixture.gaussian_mixture.GaussianMixture/reuse_previous
                  padre:implements: padre:GaussianMixture/reuse_previous
                  padre:optional: 'False'
                  padre:path: warm_start
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: When set to True, reuse the solution of the previous
                    call to fit as initialization, otherwise, just erase the previous
                    solution.
                  rdfs:label: reuse_previous
                algorithm:
                  '@schema':
                    '@id': padre:GaussianMixture/reuse_previous
                    '@type': padre:ModelParameters
                    padre:configures: padre:GaussianMixture
              - '@schema':
                  '@id': padre:sklearn.mixture.gaussian_mixture.GaussianMixture/verbose
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.mixture.gaussian_mixture.GaussianMixture/verbose
                  padre:implements: padre:GaussianMixture/verbose
                  padre:optional: 'False'
                  padre:path: verbose
                  padre:value_default: '0'
                  padre:value_type: integer
                  rdfs:comment: Enable verbose output. If 1 then it prints the current
                    initialization and each iteration step. If greater than 1 then it
                    prints also the log probability and the time needed for each step.
                  rdfs:label: verbose
                algorithm:
                  '@schema':
                    '@id': padre:GaussianMixture/verbose
                    '@type': padre:ModelParameters
                    padre:configures: padre:GaussianMixture
              - '@schema':
                  '@id': padre:sklearn.mixture.gaussian_mixture.GaussianMixture/verbose_interval
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.mixture.gaussian_mixture.GaussianMixture/verbose_interval
                  padre:implements: padre:GaussianMixture/verbose_interval
                  padre:optional: 'False'
                  padre:path: verbose_interval
                  padre:value_default: '10'
                  padre:value_type: integer
                  rdfs:comment: Number of iteration done before the next print.
                  rdfs:label: verbose_interval
                algorithm:
                  '@schema':
                    '@id': padre:GaussianMixture/verbose_interval
                    '@type': padre:ModelParameters
                    padre:configures: padre:GaussianMixture
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.mixture.gaussian_mixture.GaussianMixture/max_iterations
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.mixture.gaussian_mixture.GaussianMixture/max_iterations
                  padre:implements: padre:GaussianMixture/max_iterations
                  padre:optional: 'True'
                  padre:path: max_iter
                  padre:value_default: '100'
                  padre:value_type: integer
                  rdfs:comment: Maximum number of iterations.
                  rdfs:label: max_iterations
                algorithm:
                  '@schema':
                    '@id': padre:GaussianMixture/max_iterations
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:GaussianMixture
              - '@schema':
                  '@id': padre:sklearn.mixture.gaussian_mixture.GaussianMixture/num_initializations
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.mixture.gaussian_mixture.GaussianMixture/num_initializations
                  padre:implements: padre:GaussianMixture/num_initializations
                  padre:optional: 'False'
                  padre:path: n_init
                  padre:value_default: '1'
                  padre:value_type: integer
                  rdfs:comment: The number of initializations to perform. The best
                    results are kept.
                  rdfs:label: num_initializations
                algorithm:
                  '@schema':
                    '@id': padre:GaussianMixture/num_initializations
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:GaussianMixture
    :multiclass.OneVsOneClassifier:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.multiclass.OneVsOneClassifier
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:OneVsOneClassifier
            rdfs:comment: null
            rdfs:label: one vs one classifier
          algorithm:
            '@schema':
              '@id': padre:OneVsOneClassifier
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: one vs one classifier
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.multiclass.OneVsOneClassifier/estimator
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.multiclass.OneVsOneClassifier/estimator
                  padre:implements: padre:OneVsOneClassifier/estimator
                  padre:optional: 'False'
                  padre:path: estimator
                  padre:value_default: ''
                  padre:value_type: estimator object
                  rdfs:comment: An estimator object implementing fit and either
                    predict or decision.
                  rdfs:label: estimator
                algorithm:
                  '@schema':
                    '@id': padre:OneVsOneClassifier/estimator
                    '@type': padre:ModelParameters
                    padre:configures: padre:OneVsOneClassifier
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.multiclass.OneVsOneClassifier/jobs
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.multiclass.OneVsOneClassifier/jobs
                  padre:implements: padre:OneVsOneClassifier/jobs
                  padre:optional: 'True'
                  padre:path: n_jobs
                  padre:value_default: '1'
                  padre:value_type: integer
                  rdfs:comment: The number of jobs to use for the computation. If
                    -1 all CPUs are used.
                  rdfs:label: jobs
                algorithm:
                  '@schema':
                    '@id': padre:OneVsOneClassifier/jobs
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:OneVsOneClassifier
    :multiclass.OneVsRestClassifier:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.multiclass.OneVsRestClassifier
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:OneVsRestClassifier
            rdfs:comment: null
            rdfs:label: one vs rest classifier
          algorithm:
            '@schema':
              '@id': padre:OneVsRestClassifier
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: one vs rest classifier
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.multiclass.OneVsRestClassifier/estimator
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.multiclass.OneVsRestClassifier/estimator
                  padre:implements: padre:OneVsRestClassifier/estimator
                  padre:optional: 'False'
                  padre:path: estimator
                  padre:value_default: ''
                  padre:value_type: estimator object
                  rdfs:comment: An estimator object implementing fit and either
                    predict or decision.
                  rdfs:label: estimator
                algorithm:
                  '@schema':
                    '@id': padre:OneVsRestClassifier/estimator
                    '@type': padre:ModelParameters
                    padre:configures: padre:OneVsRestClassifier
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.multiclass.OneVsRestClassifier/jobs
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.multiclass.OneVsRestClassifier/jobs
                  padre:implements: padre:OneVsRestClassifier/jobs
                  padre:optional: 'True'
                  padre:path: n_jobs
                  padre:value_default: '1'
                  padre:value_type: integer
                  rdfs:comment: The number of jobs to use for the computation. If
                    -1 all CPUs are used.
                  rdfs:label: jobs
                algorithm:
                  '@schema':
                    '@id': padre:OneVsRestClassifier/jobs
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:OneVsRestClassifier
    :multiclass.OutputCodeClassifier:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.multiclass.OutputCodeClassifier
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:OutputCodeClassifier
            rdfs:comment: null
            rdfs:label: output code classifier
          algorithm:
            '@schema':
              '@id': padre:OutputCodeClassifier
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: output code classifier
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.multiclass.OutputCodeClassifier/estimator
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.multiclass.OutputCodeClassifier/estimator
                  padre:implements: padre:OutputCodeClassifier/estimator
                  padre:optional: 'False'
                  padre:path: estimator
                  padre:value_default: ''
                  padre:value_type: estimator object
                  rdfs:comment: An estimator object implementing fit and either
                    predict or decision.
                  rdfs:label: estimator
                algorithm:
                  '@schema':
                    '@id': padre:OutputCodeClassifier/estimator
                    '@type': padre:ModelParameters
                    padre:configures: padre:OutputCodeClassifier
              - '@schema':
                  '@id': padre:sklearn.multiclass.OutputCodeClassifier/code_size
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.multiclass.OutputCodeClassifier/code_size
                  padre:implements: padre:OutputCodeClassifier/code_size
                  padre:optional: 'False'
                  padre:path: code_size
                  padre:value_default: '1.5'
                  padre:value_type: float
                  rdfs:comment: Percentage of the number of classes to be used to
                    create the code book. A number between 0 and 1 will require fewer
                    classifiers than one-vs-the-rest. A number greater than 1 will require
                    more classifiers than one-vs-the-rest.
                  rdfs:label: code_size
                algorithm:
                  '@schema':
                    '@id': padre:OutputCodeClassifier/code_size
                    '@type': padre:ModelParameters
                    padre:configures: padre:OutputCodeClassifier
              - '@schema':
                  '@id': padre:sklearn.multiclass.OutputCodeClassifier/random_state
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.multiclass.OutputCodeClassifier/random_state
                  padre:implements: padre:OutputCodeClassifier/random_state
                  padre:optional: 'True'
                  padre:path: random_state
                  padre:value_default: None
                  padre:value_type: '{integer, RandomState instance, None}'
                  rdfs:comment: The seed of the pseudo random number generator to
                    use when shuffling the data. If int, random_state is the seed used
                    by the random number generator; If RandomState instance, random_state
                    is the random number generator; If None, the random number generator
                    is the RandomState instance used by np.random.
                  rdfs:label: random_state
                algorithm:
                  '@schema':
                    '@id': padre:OutputCodeClassifier/random_state
                    '@type': padre:ModelParameters
                    padre:configures: padre:OutputCodeClassifier
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.multiclass.OutputCodeClassifier/jobs
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.multiclass.OutputCodeClassifier/jobs
                  padre:implements: padre:OutputCodeClassifier/jobs
                  padre:optional: 'True'
                  padre:path: n_jobs
                  padre:value_default: '1'
                  padre:value_type: integer
                  rdfs:comment: The number of jobs to use for the computation. If
                    -1 all CPUs are used.
                  rdfs:label: jobs
                algorithm:
                  '@schema':
                    '@id': padre:OutputCodeClassifier/jobs
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:OutputCodeClassifier
    :multioutput.ClassifierChain:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.multioutput.ClassifierChain
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:ClassifierChain
            rdfs:comment: null
            rdfs:label: classifier chain
          algorithm:
            '@schema':
              '@id': padre:ClassifierChain
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: classifier chain
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.multioutput.ClassifierChain/base_estimator
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.multioutput.ClassifierChain/base_estimator
                  padre:implements: padre:ClassifierChain/base_estimator
                  padre:optional: 'False'
                  padre:path: base_estimator
                  padre:value_default: ''
                  padre:value_type: estimator
                  rdfs:comment: The base estimator from which the classifier chain
                    is built.
                  rdfs:label: base_estimator
                algorithm:
                  '@schema':
                    '@id': padre:ClassifierChain/base_estimator
                    '@type': padre:ModelParameters
                    padre:configures: padre:ClassifierChain
              - '@schema':
                  '@id': padre:sklearn.multioutput.ClassifierChain/prediction_order
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.multioutput.ClassifierChain/prediction_order
                  padre:implements: padre:ClassifierChain/prediction_order
                  padre:optional: 'True'
                  padre:path: order
                  padre:value_default: None
                  padre:value_type: '{array-like, shape=[n_outputs], ''random'', None}'
                  rdfs:comment: Order in which the chain makes predictions about
                    the columns in the label matrix Y.
                  rdfs:label: prediction_order
                algorithm:
                  '@schema':
                    '@id': padre:ClassifierChain/prediction_order
                    '@type': padre:ModelParameters
                    padre:configures: padre:ClassifierChain
              - '@schema':
                  '@id': padre:sklearn.multioutput.ClassifierChain/cross_validation
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.multioutput.ClassifierChain/cross_validation
                  padre:implements: padre:ClassifierChain/cross_validation
                  padre:optional: 'True'
                  padre:path: cv
                  padre:value_default: None
                  padre:value_type: '{integer, object (cross-validation generator),  iterable
                  yielding train and tests splits, None'
                  rdfs:comment: Determines the cross-validation splitting strategy.
                  rdfs:label: cross_validation
                algorithm:
                  '@schema':
                    '@id': padre:ClassifierChain/cross_validation
                    '@type': padre:ModelParameters
                    padre:configures: padre:ClassifierChain
              - '@schema':
                  '@id': padre:sklearn.multioutput.ClassifierChain/random_state
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.multioutput.ClassifierChain/random_state
                  padre:implements: padre:ClassifierChain/random_state
                  padre:optional: 'True'
                  padre:path: random_state
                  padre:value_default: None
                  padre:value_type: '{integer, RandomState instance, None}'
                  rdfs:comment: The seed of the pseudo random number generator to
                    use when shuffling the data. If int, random_state is the seed used
                    by the random number generator; If RandomState instance, random_state
                    is the random number generator; If None, the random number generator
                    is the RandomState instance used by np.random.
                  rdfs:label: random_state
                algorithm:
                  '@schema':
                    '@id': padre:ClassifierChain/random_state
                    '@type': padre:ModelParameters
                    padre:configures: padre:ClassifierChain
            optimisation_parameters: []
    :multioutput.MultiOutputRegressor:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.multioutput.MultiOutputRegressor
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:MultiOutputRegressor
            rdfs:comment: null
            rdfs:label: multi target regression
          algorithm:
            '@schema':
              '@id': padre:MultiOutputRegressor
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: multi target regression
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.multioutput.MultiOutputRegressor/estimator
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.multioutput.MultiOutputRegressor/estimator
                  padre:implements: padre:MultiOutputRegressor/estimator
                  padre:optional: 'False'
                  padre:path: estimator
                  padre:value_default: ''
                  padre:value_type: estimator object
                  rdfs:comment: An estimator object implementing fit and predict.
                  rdfs:label: estimator
                algorithm:
                  '@schema':
                    '@id': padre:MultiOutputRegressor/estimator
                    '@type': padre:ModelParameters
                    padre:configures: padre:MultiOutputRegressor
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.multioutput.MultiOutputRegressor/jobs
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.multioutput.MultiOutputRegressor/jobs
                  padre:implements: padre:MultiOutputRegressor/jobs
                  padre:optional: 'True'
                  padre:path: n_jobs
                  padre:value_default: '1'
                  padre:value_type: integer
                  rdfs:comment: The number of jobs to use for the computation. If
                    -1 all CPUs are used.
                  rdfs:label: jobs
                algorithm:
                  '@schema':
                    '@id': padre:MultiOutputRegressor/jobs
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:MultiOutputRegressor
    :naive_bayes.BernoulliNB:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.naive_bayes.BernoulliNB
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:BernoulliNB
            rdfs:comment: null
            rdfs:label: bernoulli naive bayes classifier
          algorithm:
            '@schema':
              '@id': padre:BernoulliNB
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: bernoulli naive bayes classifier
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.naive_bayes.BernoulliNB/smoothing parameter
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.naive_bayes.BernoulliNB/smoothing
                    parameter
                  padre:implements: padre:BernoulliNB/smoothing parameter
                  padre:optional: 'True'
                  padre:path: alpha
                  padre:value_default: '1.0'
                  padre:value_type: float
                  rdfs:comment: Additive (Laplace/Lidstone) smoothing parameter.
                  rdfs:label: smoothing parameter
                algorithm:
                  '@schema':
                    '@id': padre:BernoulliNB/smoothing parameter
                    '@type': padre:ModelParameters
                    padre:configures: padre:BernoulliNB
              - '@schema':
                  '@id': padre:sklearn.naive_bayes.BernoulliNB/binarizeing_threshold
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.naive_bayes.BernoulliNB/binarizeing_threshold
                  padre:implements: padre:BernoulliNB/binarizeing_threshold
                  padre:optional: 'True'
                  padre:path: binarize
                  padre:value_default: '0.0'
                  padre:value_type: float
                  rdfs:comment: Threshold for binarizing (mapping to booleans) of
                    sample features.
                  rdfs:label: binarizeing_threshold
                algorithm:
                  '@schema':
                    '@id': padre:BernoulliNB/binarizeing_threshold
                    '@type': padre:ModelParameters
                    padre:configures: padre:BernoulliNB
              - '@schema':
                  '@id': padre:sklearn.naive_bayes.BernoulliNB/learn_prior_probabilities
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.naive_bayes.BernoulliNB/learn_prior_probabilities
                  padre:implements: padre:BernoulliNB/learn_prior_probabilities
                  padre:optional: 'True'
                  padre:path: fit_prior
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: Whether to learn class prior probabilities or not.
                  rdfs:label: learn_prior_probabilities
                algorithm:
                  '@schema':
                    '@id': padre:BernoulliNB/learn_prior_probabilities
                    '@type': padre:ModelParameters
                    padre:configures: padre:BernoulliNB
              - '@schema':
                  '@id': padre:sklearn.naive_bayes.BernoulliNB/class_priors
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.naive_bayes.BernoulliNB/class_priors
                  padre:implements: padre:BernoulliNB/class_priors
                  padre:optional: 'False'
                  padre:path: class_prior
                  padre:value_default: None
                  padre:value_type: array-like, shape (n_classes,)
                  rdfs:comment: Prior probabilities of the classes. If specified
                    the priors are not adjusted according to the data.
                  rdfs:label: class_priors
                algorithm:
                  '@schema':
                    '@id': padre:BernoulliNB/class_priors
                    '@type': padre:ModelParameters
                    padre:configures: padre:BernoulliNB
            optimisation_parameters: []
    :naive_bayes.GaussianNB:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.naive_bayes.GaussianNB
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:GaussianNB
            rdfs:comment: null
            rdfs:label: gaussian naive bayes
          algorithm:
            '@schema':
              '@id': padre:GaussianNB
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: gaussian naive bayes
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.naive_bayes.GaussianNB/class_priors
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.naive_bayes.GaussianNB/class_priors
                  padre:implements: padre:GaussianNB/class_priors
                  padre:optional: 'False'
                  padre:path: priors
                  padre:value_default: None
                  padre:value_type: array-like, shape (n_classes,)
                  rdfs:comment: Prior probabilities of the classes. If specified
                    the priors are not adjusted according to the data.
                  rdfs:label: class_priors
                algorithm:
                  '@schema':
                    '@id': padre:GaussianNB/class_priors
                    '@type': padre:ModelParameters
                    padre:configures: padre:GaussianNB
            optimisation_parameters: []
    :naive_bayes.MultinomialNB:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.naive_bayes.MultinomialNB
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:MultinomialNB
            rdfs:comment: null
            rdfs:label: multinomial naive bayes classifier
          algorithm:
            '@schema':
              '@id': padre:MultinomialNB
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: multinomial naive bayes classifier
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.naive_bayes.MultinomialNB/smoothing parameter
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.naive_bayes.MultinomialNB/smoothing
                    parameter
                  padre:implements: padre:MultinomialNB/smoothing parameter
                  padre:optional: 'True'
                  padre:path: alpha
                  padre:value_default: '1.0'
                  padre:value_type: float
                  rdfs:comment: Additive (Laplace/Lidstone) smoothing parameter.
                  rdfs:label: smoothing parameter
                algorithm:
                  '@schema':
                    '@id': padre:MultinomialNB/smoothing parameter
                    '@type': padre:ModelParameters
                    padre:configures: padre:MultinomialNB
              - '@schema':
                  '@id': padre:sklearn.naive_bayes.MultinomialNB/learn_prior_probabilities
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.naive_bayes.MultinomialNB/learn_prior_probabilities
                  padre:implements: padre:MultinomialNB/learn_prior_probabilities
                  padre:optional: 'True'
                  padre:path: fit_prior
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: Whether to learn class prior probabilities or not.
                  rdfs:label: learn_prior_probabilities
                algorithm:
                  '@schema':
                    '@id': padre:MultinomialNB/learn_prior_probabilities
                    '@type': padre:ModelParameters
                    padre:configures: padre:MultinomialNB
              - '@schema':
                  '@id': padre:sklearn.naive_bayes.MultinomialNB/class_priors
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.naive_bayes.MultinomialNB/class_priors
                  padre:implements: padre:MultinomialNB/class_priors
                  padre:optional: 'False'
                  padre:path: class_prior
                  padre:value_default: None
                  padre:value_type: array-like, shape (n_classes,)
                  rdfs:comment: Prior probabilities of the classes. If specified
                    the priors are not adjusted according to the data.
                  rdfs:label: class_priors
                algorithm:
                  '@schema':
                    '@id': padre:MultinomialNB/class_priors
                    '@type': padre:ModelParameters
                    padre:configures: padre:MultinomialNB
            optimisation_parameters: []
    :neighbors.BallTree:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.neighbors.BallTree
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:BallTree
            rdfs:comment: null
            rdfs:label: ball tree
          algorithm:
            '@schema':
              '@id': padre:BallTree
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: ball tree
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.neighbors.BallTree/feature_matrix
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neighbors.BallTree/feature_matrix
                  padre:implements: padre:BallTree/feature_matrix
                  padre:optional: 'False'
                  padre:path: X
                  padre:value_default: ''
                  padre:value_type: 'array, shape: [n_samples, n_features]'
                  rdfs:comment: n_samples is the number of points in the data set,
                    and n_features is the dimension of the parameter space.
                  rdfs:label: feature_matrix
                algorithm:
                  '@schema':
                    '@id': padre:BallTree/feature_matrix
                    '@type': padre:ModelParameters
                    padre:configures: padre:BallTree
              - '@schema':
                  '@id': padre:sklearn.neighbors.BallTree/distance_metric
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neighbors.BallTree/distance_metric
                  padre:implements: padre:BallTree/distance_metric
                  padre:optional: 'False'
                  padre:path: metric
                  padre:value_default: '''minkowski'''
                  padre:value_type: '{''seuclidean'', ''hamming'', ''dice'', ''jaccard'',
                  ''matching'', ''russellrao'',  ''euclidean'', ''kulsinski'', ''wminkowski'',
                  ''chebyshev'', ''mahalanobis'', ''sokalmichener'', ''rogerstanimoto'',
                  ''infinity'', ''p'', ''canberra'',  ''haversine'', ''sokalsneath'',
                  ''l1'', ''minkowski'', ''pyfunc'', ''l2'', ''cityblock'', ''braycurtis'',
                  ''manhattan''}'
                  rdfs:comment: The distance metric to use for the tree.
                  rdfs:label: distance_metric
                algorithm:
                  '@schema':
                    '@id': padre:BallTree/distance_metric
                    '@type': padre:ModelParameters
                    padre:configures: padre:BallTree
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.neighbors.BallTree/leaf_size
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.neighbors.BallTree/leaf_size
                  padre:implements: padre:BallTree/leaf_size
                  padre:optional: 'False'
                  padre:path: leaf_size
                  padre:value_default: '40'
                  padre:value_type: positive integer
                  rdfs:comment: Number of points at which to switch to brute-force.
                    Changing leaf_size will not affect the results of a query, but can
                    significantly impact the speed of a query and the memory required
                    to store the constructed tree.
                  rdfs:label: leaf_size
                algorithm:
                  '@schema':
                    '@id': padre:BallTree/leaf_size
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:BallTree
    :neighbors.KDTree:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.neighbors.KDTree
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:KDTree
            rdfs:comment: null
            rdfs:label: k-d tree
          algorithm:
            '@schema':
              '@id': padre:KDTree
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: k-d tree
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.neighbors.KDTree/feature_matrix
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neighbors.KDTree/feature_matrix
                  padre:implements: padre:KDTree/feature_matrix
                  padre:optional: 'False'
                  padre:path: X
                  padre:value_default: ''
                  padre:value_type: 'array, shape: [n_samples, n_features]'
                  rdfs:comment: n_samples is the number of points in the data set,
                    and n_features is the dimension of the parameter space.
                  rdfs:label: feature_matrix
                algorithm:
                  '@schema':
                    '@id': padre:KDTree/feature_matrix
                    '@type': padre:ModelParameters
                    padre:configures: padre:KDTree
              - '@schema':
                  '@id': padre:sklearn.neighbors.KDTree/distance_metric
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neighbors.KDTree/distance_metric
                  padre:implements: padre:KDTree/distance_metric
                  padre:optional: 'False'
                  padre:path: metric
                  padre:value_default: '''minkowski'''
                  padre:value_type: '{''p'', ''l1'', ''chebyshev'', ''manhattan'', ''minkowski'',
                  ''cityblock'', ''l2'', ''euclidean'', ''infinity''}'
                  rdfs:comment: The distance metric to use for the tree.
                  rdfs:label: distance_metric
                algorithm:
                  '@schema':
                    '@id': padre:KDTree/distance_metric
                    '@type': padre:ModelParameters
                    padre:configures: padre:KDTree
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.neighbors.KDTree/leaf_size
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.neighbors.KDTree/leaf_size
                  padre:implements: padre:KDTree/leaf_size
                  padre:optional: 'False'
                  padre:path: leaf_size
                  padre:value_default: '40'
                  padre:value_type: positive integer
                  rdfs:comment: Number of points at which to switch to brute-force.
                    Changing leaf_size will not affect the results of a query, but can
                    significantly impact the speed of a query and the memory required
                    to store the constructed tree.
                  rdfs:label: leaf_size
                algorithm:
                  '@schema':
                    '@id': padre:KDTree/leaf_size
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:KDTree
    :neighbors.classification.KNeighborsClassifier:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.neighbors.classification.KNeighborsClassifier
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:KNeighborsClassifier
            rdfs:comment: null
            rdfs:label: k-nn classifier
          algorithm:
            '@schema':
              '@id': padre:KNeighborsClassifier
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: k-nn classifier
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.neighbors.classification.KNeighborsClassifier/n_neighbors
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neighbors.classification.KNeighborsClassifier/n_neighbors
                  padre:implements: padre:KNeighborsClassifier/n_neighbors
                  padre:optional: 'True'
                  padre:path: n_neighbors
                  padre:value_default: '5'
                  padre:value_type: integer
                  rdfs:comment: Number of neighbors to use.
                  rdfs:label: n_neighbors
                algorithm:
                  '@schema':
                    '@id': padre:KNeighborsClassifier/n_neighbors
                    '@type': padre:ModelParameters
                    padre:configures: padre:KNeighborsClassifier
              - '@schema':
                  '@id': padre:sklearn.neighbors.classification.KNeighborsClassifier/weight_function
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neighbors.classification.KNeighborsClassifier/weight_function
                  padre:implements: padre:KNeighborsClassifier/weight_function
                  padre:optional: 'False'
                  padre:path: weights
                  padre:value_default: '''uniform'''
                  padre:value_type: '{''uniform'', ''distance'', callable: a user-defined
                  function which accepts an array of distances, and returns an array
                  of the same shape containing the weights.}'
                  rdfs:comment: Weight function used in prediction.
                  rdfs:label: weight_function
                algorithm:
                  '@schema':
                    '@id': padre:KNeighborsClassifier/weight_function
                    '@type': padre:ModelParameters
                    padre:configures: padre:KNeighborsClassifier
              - '@schema':
                  '@id': padre:sklearn.neighbors.classification.KNeighborsClassifier/nn_algorithm
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neighbors.classification.KNeighborsClassifier/nn_algorithm
                  padre:implements: padre:KNeighborsClassifier/nn_algorithm
                  padre:optional: 'True'
                  padre:path: algorithm
                  padre:value_default: '''auto'''
                  padre:value_type: '{''auto'', ''ball_tree'', ''kd_tree'', ''brute''}'
                  rdfs:comment: Algorithm used to compute the nearest neighbors.
                  rdfs:label: nn_algorithm
                algorithm:
                  '@schema':
                    '@id': padre:KNeighborsClassifier/nn_algorithm
                    '@type': padre:ModelParameters
                    padre:configures: padre:KNeighborsClassifier
              - '@schema':
                  '@id': padre:sklearn.neighbors.classification.KNeighborsClassifier/leaf_size
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neighbors.classification.KNeighborsClassifier/leaf_size
                  padre:implements: padre:KNeighborsClassifier/leaf_size
                  padre:optional: 'True'
                  padre:path: leaf_size
                  padre:value_default: '30'
                  padre:value_type: integer
                  rdfs:comment: Leaf size passed to BallTree or KDTree. This can
                    affect the speed of the construction and query, as well as the memory
                    required to store the tree. The optimal value depends on the nature
                    of the problem.
                  rdfs:label: leaf_size
                algorithm:
                  '@schema':
                    '@id': padre:KNeighborsClassifier/leaf_size
                    '@type': padre:ModelParameters
                    padre:configures: padre:KNeighborsClassifier
              - '@schema':
                  '@id': padre:sklearn.neighbors.classification.KNeighborsClassifier/minkowski_parameter
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neighbors.classification.KNeighborsClassifier/minkowski_parameter
                  padre:implements: padre:KNeighborsClassifier/minkowski_parameter
                  padre:optional: 'True'
                  padre:path: p
                  padre:value_default: '2'
                  padre:value_type: integer
                  rdfs:comment: Parameter for the Minkowski metric.
                  rdfs:label: minkowski_parameter
                algorithm:
                  '@schema':
                    '@id': padre:KNeighborsClassifier/minkowski_parameter
                    '@type': padre:ModelParameters
                    padre:configures: padre:KNeighborsClassifier
              - '@schema':
                  '@id': padre:sklearn.neighbors.classification.KNeighborsClassifier/distance_metric
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neighbors.classification.KNeighborsClassifier/distance_metric
                  padre:implements: padre:KNeighborsClassifier/distance_metric
                  padre:optional: 'False'
                  padre:path: metric
                  padre:value_default: '''minkowski'''
                  padre:value_type: '{''cityblock'', ''cosine'', ''euclidean'', ''l1'',
                  ''l2'', ''manhattan'', ''braycurtis'', ''canberra'', ''chebyshev'',
                  ''correlation'', ''dice'', ''hamming'', ''jaccard'', ''kulsinski'',
                  ''mahalanobis'', ''matching'', ''minkowski'', ''rogerstanimoto'',
                  ''russellrao'', ''seuclidean'', ''sokalmichener'', ''sokalsneath'',
                  ''sqeuclidean'', ''yule'', a callable that should take two arrays
                  as input and return one value indicating the distance between them}'
                  rdfs:comment: The distance metric to use for the tree.
                  rdfs:label: distance_metric
                algorithm:
                  '@schema':
                    '@id': padre:KNeighborsClassifier/distance_metric
                    '@type': padre:ModelParameters
                    padre:configures: padre:KNeighborsClassifier
              - '@schema':
                  '@id': padre:sklearn.neighbors.classification.KNeighborsClassifier/metric_parameters
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neighbors.classification.KNeighborsClassifier/metric_parameters
                  padre:implements: padre:KNeighborsClassifier/metric_parameters
                  padre:optional: 'True'
                  padre:path: metric_params
                  padre:value_default: None
                  padre:value_type: dict
                  rdfs:comment: Additional keyword arguments for the metric function.
                  rdfs:label: metric_parameters
                algorithm:
                  '@schema':
                    '@id': padre:KNeighborsClassifier/metric_parameters
                    '@type': padre:ModelParameters
                    padre:configures: padre:KNeighborsClassifier
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.neighbors.classification.KNeighborsClassifier/jobs
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.neighbors.classification.KNeighborsClassifier/jobs
                  padre:implements: padre:KNeighborsClassifier/jobs
                  padre:optional: 'True'
                  padre:path: n_jobs
                  padre:value_default: '1'
                  padre:value_type: integer
                  rdfs:comment: The number of jobs to use for the computation. If
                    -1 all CPUs are used.
                  rdfs:label: jobs
                algorithm:
                  '@schema':
                    '@id': padre:KNeighborsClassifier/jobs
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:KNeighborsClassifier
    :neighbors.classification.RadiusNeighborsClassifier:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.neighbors.classification.RadiusNeighborsClassifier
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:RadiusNeighborsClassifier
            rdfs:comment: null
            rdfs:label: radius neighbors classifier
          algorithm:
            '@schema':
              '@id': padre:RadiusNeighborsClassifier
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: radius neighbors classifier
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.neighbors.classification.RadiusNeighborsClassifier/radius
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neighbors.classification.RadiusNeighborsClassifier/radius
                  padre:implements: padre:RadiusNeighborsClassifier/radius
                  padre:optional: 'True'
                  padre:path: radius
                  padre:value_default: '1.0'
                  padre:value_type: float
                  rdfs:comment: Range of parameter space to use.
                  rdfs:label: radius
                algorithm:
                  '@schema':
                    '@id': padre:RadiusNeighborsClassifier/radius
                    '@type': padre:ModelParameters
                    padre:configures: padre:RadiusNeighborsClassifier
              - '@schema':
                  '@id': padre:sklearn.neighbors.classification.RadiusNeighborsClassifier/weight_function
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neighbors.classification.RadiusNeighborsClassifier/weight_function
                  padre:implements: padre:RadiusNeighborsClassifier/weight_function
                  padre:optional: 'False'
                  padre:path: weights
                  padre:value_default: '''uniform'''
                  padre:value_type: '{''uniform'', ''distance'', callable: a user-defined
                  function which accepts an array of distances, and returns an array
                  of the same shape containing the weights.}'
                  rdfs:comment: Weight function used in prediction.
                  rdfs:label: weight_function
                algorithm:
                  '@schema':
                    '@id': padre:RadiusNeighborsClassifier/weight_function
                    '@type': padre:ModelParameters
                    padre:configures: padre:RadiusNeighborsClassifier
              - '@schema':
                  '@id': padre:sklearn.neighbors.classification.RadiusNeighborsClassifier/nn_algorithm
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neighbors.classification.RadiusNeighborsClassifier/nn_algorithm
                  padre:implements: padre:RadiusNeighborsClassifier/nn_algorithm
                  padre:optional: 'True'
                  padre:path: algorithm
                  padre:value_default: '''auto'''
                  padre:value_type: '{''auto'', ''ball_tree'', ''kd_tree'', ''brute''}'
                  rdfs:comment: Algorithm used to compute the nearest neighbors.
                  rdfs:label: nn_algorithm
                algorithm:
                  '@schema':
                    '@id': padre:RadiusNeighborsClassifier/nn_algorithm
                    '@type': padre:ModelParameters
                    padre:configures: padre:RadiusNeighborsClassifier
              - '@schema':
                  '@id': padre:sklearn.neighbors.classification.RadiusNeighborsClassifier/leaf_size
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neighbors.classification.RadiusNeighborsClassifier/leaf_size
                  padre:implements: padre:RadiusNeighborsClassifier/leaf_size
                  padre:optional: 'True'
                  padre:path: leaf_size
                  padre:value_default: '30'
                  padre:value_type: integer
                  rdfs:comment: Leaf size passed to BallTree or KDTree. This can
                    affect the speed of the construction and query, as well as the memory
                    required to store the tree. The optimal value depends on the nature
                    of the problem.
                  rdfs:label: leaf_size
                algorithm:
                  '@schema':
                    '@id': padre:RadiusNeighborsClassifier/leaf_size
                    '@type': padre:ModelParameters
                    padre:configures: padre:RadiusNeighborsClassifier
              - '@schema':
                  '@id': padre:sklearn.neighbors.classification.RadiusNeighborsClassifier/minkowski_parameter
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neighbors.classification.RadiusNeighborsClassifier/minkowski_parameter
                  padre:implements: padre:RadiusNeighborsClassifier/minkowski_parameter
                  padre:optional: 'True'
                  padre:path: p
                  padre:value_default: '2'
                  padre:value_type: integer
                  rdfs:comment: Parameter for the Minkowski metric.
                  rdfs:label: minkowski_parameter
                algorithm:
                  '@schema':
                    '@id': padre:RadiusNeighborsClassifier/minkowski_parameter
                    '@type': padre:ModelParameters
                    padre:configures: padre:RadiusNeighborsClassifier
              - '@schema':
                  '@id': padre:sklearn.neighbors.classification.RadiusNeighborsClassifier/distance_metric
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neighbors.classification.RadiusNeighborsClassifier/distance_metric
                  padre:implements: padre:RadiusNeighborsClassifier/distance_metric
                  padre:optional: 'False'
                  padre:path: metric
                  padre:value_default: '''minkowski'''
                  padre:value_type: '{''cityblock'', ''cosine'', ''euclidean'', ''l1'',
                  ''l2'', ''manhattan'', ''braycurtis'', ''canberra'', ''chebyshev'',
                  ''correlation'', ''dice'', ''hamming'', ''jaccard'', ''kulsinski'',
                  ''mahalanobis'', ''matching'', ''minkowski'', ''rogerstanimoto'',
                  ''russellrao'', ''seuclidean'', ''sokalmichener'', ''sokalsneath'',
                  ''sqeuclidean'', ''yule'', a callable that should take two arrays
                  as input and return one value indicating the distance between them}'
                  rdfs:comment: The distance metric to use for the tree.
                  rdfs:label: distance_metric
                algorithm:
                  '@schema':
                    '@id': padre:RadiusNeighborsClassifier/distance_metric
                    '@type': padre:ModelParameters
                    padre:configures: padre:RadiusNeighborsClassifier
              - '@schema':
                  '@id': padre:sklearn.neighbors.classification.RadiusNeighborsClassifier/outlier_label
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neighbors.classification.RadiusNeighborsClassifier/outlier_label
                  padre:implements: padre:RadiusNeighborsClassifier/outlier_label
                  padre:optional: 'True'
                  padre:path: outlier_label
                  padre:value_default: None
                  padre:value_type: '{integer, None}'
                  rdfs:comment: Label, which is given for outlier samples (samples
                    with no neighbors on given radius). If set to None, ValueError is
                    raised, when outlier is detected.
                  rdfs:label: outlier_label
                algorithm:
                  '@schema':
                    '@id': padre:RadiusNeighborsClassifier/outlier_label
                    '@type': padre:ModelParameters
                    padre:configures: padre:RadiusNeighborsClassifier
              - '@schema':
                  '@id': padre:sklearn.neighbors.classification.RadiusNeighborsClassifier/metric_parameters
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neighbors.classification.RadiusNeighborsClassifier/metric_parameters
                  padre:implements: padre:RadiusNeighborsClassifier/metric_parameters
                  padre:optional: 'True'
                  padre:path: metric_params
                  padre:value_default: None
                  padre:value_type: dict
                  rdfs:comment: Additional keyword arguments for the metric function.
                  rdfs:label: metric_parameters
                algorithm:
                  '@schema':
                    '@id': padre:RadiusNeighborsClassifier/metric_parameters
                    '@type': padre:ModelParameters
                    padre:configures: padre:RadiusNeighborsClassifier
            optimisation_parameters: []
    :neighbors.kde.KernelDensity:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.neighbors.kde.KernelDensity
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:KernelDensity
            rdfs:comment: null
            rdfs:label: kernel density
          algorithm:
            '@schema':
              '@id': padre:KernelDensity
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: kernel density
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.neighbors.kde.KernelDensity/bandwidth
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neighbors.kde.KernelDensity/bandwidth
                  padre:implements: padre:KernelDensity/bandwidth
                  padre:optional: 'True'
                  padre:path: bandwidth
                  padre:value_default: '1.0'
                  padre:value_type: float
                  rdfs:comment: The bandwidth of the kernel.
                  rdfs:label: bandwidth
                algorithm:
                  '@schema':
                    '@id': padre:KernelDensity/bandwidth
                    '@type': padre:ModelParameters
                    padre:configures: padre:KernelDensity
              - '@schema':
                  '@id': padre:sklearn.neighbors.kde.KernelDensity/algorithm
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neighbors.kde.KernelDensity/algorithm
                  padre:implements: padre:KernelDensity/algorithm
                  padre:optional: 'True'
                  padre:path: algorithm
                  padre:value_default: '''auto'''
                  padre:value_type: '{''auto'', ''ball_tree'', ''kd_tree''}'
                  rdfs:comment: The tree algorithm to use.
                  rdfs:label: algorithm
                algorithm:
                  '@schema':
                    '@id': padre:KernelDensity/algorithm
                    '@type': padre:ModelParameters
                    padre:configures: padre:KernelDensity
              - '@schema':
                  '@id': padre:sklearn.neighbors.kde.KernelDensity/kernel
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neighbors.kde.KernelDensity/kernel
                  padre:implements: padre:KernelDensity/kernel
                  padre:optional: 'False'
                  padre:path: kernel
                  padre:value_default: '''gaussian'''
                  padre:value_type: '{''gaussian'', ''tophat'', ''epanechnikov'', ''exponential'',
                  ''linear'', ''cosine''}'
                  rdfs:comment: The kernel to use.
                  rdfs:label: kernel
                algorithm:
                  '@schema':
                    '@id': padre:KernelDensity/kernel
                    '@type': padre:ModelParameters
                    padre:configures: padre:KernelDensity
              - '@schema':
                  '@id': padre:sklearn.neighbors.kde.KernelDensity/distance_metric
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neighbors.kde.KernelDensity/distance_metric
                  padre:implements: padre:KernelDensity/distance_metric
                  padre:optional: 'False'
                  padre:path: metric
                  padre:value_default: '''euclidean'''
                  padre:value_type: '{''cityblock'', ''cosine'', ''euclidean'', ''l1'',
                  ''l2'', ''manhattan'', ''braycurtis'', ''canberra'', ''chebyshev'',
                  ''correlation'', ''dice'', ''hamming'', ''jaccard'', ''kulsinski'',
                  ''mahalanobis'', ''matching'', ''minkowski'', ''rogerstanimoto'',
                  ''russellrao'', ''seuclidean'', ''sokalmichener'', ''sokalsneath'',
                  ''sqeuclidean'', ''yule'', a callable that should take two arrays
                  as input and return one value indicating the distance between them}'
                  rdfs:comment: The distance metric to use.
                  rdfs:label: distance_metric
                algorithm:
                  '@schema':
                    '@id': padre:KernelDensity/distance_metric
                    '@type': padre:ModelParameters
                    padre:configures: padre:KernelDensity
              - '@schema':
                  '@id': padre:sklearn.neighbors.kde.KernelDensity/absolute_tolerance
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neighbors.kde.KernelDensity/absolute_tolerance
                  padre:implements: padre:KernelDensity/absolute_tolerance
                  padre:optional: 'False'
                  padre:path: atol
                  padre:value_default: '0'
                  padre:value_type: float
                  rdfs:comment: The desired absolute tolerance of the result. A
                    larger tolerance will generally lead to faster execution. Default
                    is 0.
                  rdfs:label: absolute_tolerance
                algorithm:
                  '@schema':
                    '@id': padre:KernelDensity/absolute_tolerance
                    '@type': padre:ModelParameters
                    padre:configures: padre:KernelDensity
              - '@schema':
                  '@id': padre:sklearn.neighbors.kde.KernelDensity/relative_tolerance
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neighbors.kde.KernelDensity/relative_tolerance
                  padre:implements: padre:KernelDensity/relative_tolerance
                  padre:optional: 'False'
                  padre:path: rtol
                  padre:value_default: '0'
                  padre:value_type: float
                  rdfs:comment: The desired relative tolerance of the result. A
                    larger tolerance will generally lead to faster execution.
                  rdfs:label: relative_tolerance
                algorithm:
                  '@schema':
                    '@id': padre:KernelDensity/relative_tolerance
                    '@type': padre:ModelParameters
                    padre:configures: padre:KernelDensity
              - '@schema':
                  '@id': padre:sklearn.neighbors.kde.KernelDensity/breadth_first
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neighbors.kde.KernelDensity/breadth_first
                  padre:implements: padre:KernelDensity/breadth_first
                  padre:optional: Fasle
                  padre:path: breadth_first
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: If true (default), use a breadth-first approach
                    to the problem. Otherwise use a depth-first approach.
                  rdfs:label: breadth_first
                algorithm:
                  '@schema':
                    '@id': padre:KernelDensity/breadth_first
                    '@type': padre:ModelParameters
                    padre:configures: padre:KernelDensity
              - '@schema':
                  '@id': padre:sklearn.neighbors.kde.KernelDensity/leaf_size
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neighbors.kde.KernelDensity/leaf_size
                  padre:implements: padre:KernelDensity/leaf_size
                  padre:optional: 'True'
                  padre:path: leaf_size
                  padre:value_default: '40'
                  padre:value_type: integer
                  rdfs:comment: Leaf size passed to BallTree or KDTree. This can
                    affect the speed of the construction and query, as well as the memory
                    required to store the tree. The optimal value depends on the nature
                    of the problem.
                  rdfs:label: leaf_size
                algorithm:
                  '@schema':
                    '@id': padre:KernelDensity/leaf_size
                    '@type': padre:ModelParameters
                    padre:configures: padre:KernelDensity
              - '@schema':
                  '@id': padre:sklearn.neighbors.kde.KernelDensity/metric_parameters
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neighbors.kde.KernelDensity/metric_parameters
                  padre:implements: padre:KernelDensity/metric_parameters
                  padre:optional: 'True'
                  padre:path: metric_params
                  padre:value_default: None
                  padre:value_type: '{dict, None}'
                  rdfs:comment: Additional keyword arguments for the metric function.
                  rdfs:label: metric_parameters
                algorithm:
                  '@schema':
                    '@id': padre:KernelDensity/metric_parameters
                    '@type': padre:ModelParameters
                    padre:configures: padre:KernelDensity
            optimisation_parameters: []
    :neighbors.lof.LocalOutlierFactor:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.neighbors.lof.LocalOutlierFactor
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:LocalOutlierFactor
            rdfs:comment: null
            rdfs:label: local outlier factor
          algorithm:
            '@schema':
              '@id': padre:LocalOutlierFactor
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: local outlier factor
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.neighbors.lof.LocalOutlierFactor/num_neighbours
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neighbors.lof.LocalOutlierFactor/num_neighbours
                  padre:implements: padre:LocalOutlierFactor/num_neighbours
                  padre:optional: 'True'
                  padre:path: n_neighbors
                  padre:value_default: '20'
                  padre:value_type: integer
                  rdfs:comment: Number of neighbors to use by default for kneighbors
                    queries.
                  rdfs:label: num_neighbours
                algorithm:
                  '@schema':
                    '@id': padre:LocalOutlierFactor/num_neighbours
                    '@type': padre:ModelParameters
                    padre:configures: padre:LocalOutlierFactor
              - '@schema':
                  '@id': padre:sklearn.neighbors.lof.LocalOutlierFactor/algorithm
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neighbors.lof.LocalOutlierFactor/algorithm
                  padre:implements: padre:LocalOutlierFactor/algorithm
                  padre:optional: 'True'
                  padre:path: algorithm
                  padre:value_default: '''auto'''
                  padre:value_type: '{''auto'', ''ball_tree'', ''kd_tree'', ''brute''}'
                  rdfs:comment: The algorithm to be used by the NearestNeighbors
                    module to compute pointwise distances and find nearest neighbors.
                  rdfs:label: algorithm
                algorithm:
                  '@schema':
                    '@id': padre:LocalOutlierFactor/algorithm
                    '@type': padre:ModelParameters
                    padre:configures: padre:LocalOutlierFactor
              - '@schema':
                  '@id': padre:sklearn.neighbors.lof.LocalOutlierFactor/leaf_size
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neighbors.lof.LocalOutlierFactor/leaf_size
                  padre:implements: padre:LocalOutlierFactor/leaf_size
                  padre:optional: 'True'
                  padre:path: leaf_size
                  padre:value_default: '30'
                  padre:value_type: integer
                  rdfs:comment: Leaf size passed to BallTree or KDTree. This can
                    affect the speed of the construction and query, as well as the memory
                    required to store the tree. The optimal value depends on the nature
                    of the problem.
                  rdfs:label: leaf_size
                algorithm:
                  '@schema':
                    '@id': padre:LocalOutlierFactor/leaf_size
                    '@type': padre:ModelParameters
                    padre:configures: padre:LocalOutlierFactor
              - '@schema':
                  '@id': padre:sklearn.neighbors.lof.LocalOutlierFactor/distance_metric
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neighbors.lof.LocalOutlierFactor/distance_metric
                  padre:implements: padre:LocalOutlierFactor/distance_metric
                  padre:optional: 'False'
                  padre:path: metric
                  padre:value_default: '''minkowski'''
                  padre:value_type: '{''cityblock'', ''cosine'', ''euclidean'', ''l1'',
                  ''l2'', ''manhattan'', ''braycurtis'', ''canberra'', ''chebyshev'',
                  ''correlation'', ''dice'', ''hamming'', ''jaccard'', ''kulsinski'',
                  ''mahalanobis'', ''matching'', ''minkowski'', ''rogerstanimoto'',
                  ''russellrao'', ''seuclidean'', ''sokalmichener'', ''sokalsneath'',
                  ''sqeuclidean'', ''yule'', a callable that should take two arrays
                  as input and return one value indicating the distance between them}'
                  rdfs:comment: The metric to use when calculating distance between
                    instances in a feature array.
                  rdfs:label: distance_metric
                algorithm:
                  '@schema':
                    '@id': padre:LocalOutlierFactor/distance_metric
                    '@type': padre:ModelParameters
                    padre:configures: padre:LocalOutlierFactor
              - '@schema':
                  '@id': padre:sklearn.neighbors.lof.LocalOutlierFactor/minkowski_parameter
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neighbors.lof.LocalOutlierFactor/minkowski_parameter
                  padre:implements: padre:LocalOutlierFactor/minkowski_parameter
                  padre:optional: 'True'
                  padre:path: p
                  padre:value_default: '2'
                  padre:value_type: '{integer, None}'
                  rdfs:comment: Parameter for the Minkowski metric. When minkowski_parameter
                    = 1, this is equivalent to using manhattan_distance (l1), and euclidean_distance
                    (l2) for minkowski_parameter = 2. For arbitrary minkowski_parameter,
                    minkowski_distance (l_p) is used.
                  rdfs:label: minkowski_parameter
                algorithm:
                  '@schema':
                    '@id': padre:LocalOutlierFactor/minkowski_parameter
                    '@type': padre:ModelParameters
                    padre:configures: padre:LocalOutlierFactor
              - '@schema':
                  '@id': padre:sklearn.neighbors.lof.LocalOutlierFactor/metric_parameters
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neighbors.lof.LocalOutlierFactor/metric_parameters
                  padre:implements: padre:LocalOutlierFactor/metric_parameters
                  padre:optional: 'True'
                  padre:path: metric_params
                  padre:value_default: None
                  padre:value_type: '{dict, None}'
                  rdfs:comment: Additional keyword arguments for the metric function.
                  rdfs:label: metric_parameters
                algorithm:
                  '@schema':
                    '@id': padre:LocalOutlierFactor/metric_parameters
                    '@type': padre:ModelParameters
                    padre:configures: padre:LocalOutlierFactor
              - '@schema':
                  '@id': padre:sklearn.neighbors.lof.LocalOutlierFactor/contamination
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neighbors.lof.LocalOutlierFactor/contamination
                  padre:implements: padre:LocalOutlierFactor/contamination
                  padre:optional: 'True'
                  padre:path: contamination
                  padre:value_default: '0.1'
                  padre:value_type: float in (0., 0.5)
                  rdfs:comment: The amount of contamination of the data set, i.e.
                    the proportion of outliers in the data set.
                  rdfs:label: contamination
                algorithm:
                  '@schema':
                    '@id': padre:LocalOutlierFactor/contamination
                    '@type': padre:ModelParameters
                    padre:configures: padre:LocalOutlierFactor
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.neighbors.lof.LocalOutlierFactor/jobs
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.neighbors.lof.LocalOutlierFactor/jobs
                  padre:implements: padre:LocalOutlierFactor/jobs
                  padre:optional: 'True'
                  padre:path: n_jobs
                  padre:value_default: '1'
                  padre:value_type: integer
                  rdfs:comment: The number of jobs to use for the computation. If
                    -1 all CPUs are used.
                  rdfs:label: jobs
                algorithm:
                  '@schema':
                    '@id': padre:LocalOutlierFactor/jobs
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:LocalOutlierFactor
    :neighbors.nearest_centroid.NearestCentroid:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.neighbors.nearest_centroid.NearestCentroid
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:NearestCentroid
            rdfs:comment: null
            rdfs:label: nearest centroid classifier
          algorithm:
            '@schema':
              '@id': padre:NearestCentroid
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: nearest centroid classifier
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.neighbors.nearest_centroid.NearestCentroid/distance_metric
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neighbors.nearest_centroid.NearestCentroid/distance_metric
                  padre:implements: padre:NearestCentroid/distance_metric
                  padre:optional: 'False'
                  padre:path: metric
                  padre:value_default: '''euclidean'''''
                  padre:value_type: '{''cityblock'', ''cosine'', ''euclidean'', ''l1'',
                  ''l2'', ''manhattan'', ''braycurtis'', ''canberra'', ''chebyshev'',
                  ''correlation'', ''dice'', ''hamming'', ''jaccard'', ''kulsinski'',
                  ''mahalanobis'', ''matching'', ''minkowski'', ''rogerstanimoto'',
                  ''russellrao'', ''seuclidean'', ''sokalmichener'', ''sokalsneath'',
                  ''sqeuclidean'', ''yule''}'
                  rdfs:comment: The metric to use when calculating distance between
                    instances in a feature array.
                  rdfs:label: distance_metric
                algorithm:
                  '@schema':
                    '@id': padre:NearestCentroid/distance_metric
                    '@type': padre:ModelParameters
                    padre:configures: padre:NearestCentroid
              - '@schema':
                  '@id': padre:sklearn.neighbors.nearest_centroid.NearestCentroid/shrink_threshold
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neighbors.nearest_centroid.NearestCentroid/shrink_threshold
                  padre:implements: padre:NearestCentroid/shrink_threshold
                  padre:optional: 'True'
                  padre:path: shrink_threshold
                  padre:value_default: None
                  padre:value_type: '{float, None}'
                  rdfs:comment: Threshold for shrinking centroids to remove features.
                  rdfs:label: shrink_threshold
                algorithm:
                  '@schema':
                    '@id': padre:NearestCentroid/shrink_threshold
                    '@type': padre:ModelParameters
                    padre:configures: padre:NearestCentroid
            optimisation_parameters: []
    :neighbors.regression.KNeighborsRegressor:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.neighbors.regression.KNeighborsRegressor
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:KNeighborsRegressor
            rdfs:comment: null
            rdfs:label: k-nn regressor
          algorithm:
            '@schema':
              '@id': padre:KNeighborsRegressor
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: k-nn regressor
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.neighbors.regression.KNeighborsRegressor/n_neighbors
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neighbors.regression.KNeighborsRegressor/n_neighbors
                  padre:implements: padre:KNeighborsRegressor/n_neighbors
                  padre:optional: 'True'
                  padre:path: n_neighbors
                  padre:value_default: '5'
                  padre:value_type: integer
                  rdfs:comment: Number of neighbors to use.
                  rdfs:label: n_neighbors
                algorithm:
                  '@schema':
                    '@id': padre:KNeighborsRegressor/n_neighbors
                    '@type': padre:ModelParameters
                    padre:configures: padre:KNeighborsRegressor
              - '@schema':
                  '@id': padre:sklearn.neighbors.regression.KNeighborsRegressor/weight_function
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neighbors.regression.KNeighborsRegressor/weight_function
                  padre:implements: padre:KNeighborsRegressor/weight_function
                  padre:optional: 'False'
                  padre:path: weights
                  padre:value_default: '''uniform'''
                  padre:value_type: '{''uniform'', ''distance'', callable: a user-defined
                  function which accepts an array of distances, and returns an array
                  of the same shape containing the weights.}'
                  rdfs:comment: Weight function used in prediction.
                  rdfs:label: weight_function
                algorithm:
                  '@schema':
                    '@id': padre:KNeighborsRegressor/weight_function
                    '@type': padre:ModelParameters
                    padre:configures: padre:KNeighborsRegressor
              - '@schema':
                  '@id': padre:sklearn.neighbors.regression.KNeighborsRegressor/nn_algorithm
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neighbors.regression.KNeighborsRegressor/nn_algorithm
                  padre:implements: padre:KNeighborsRegressor/nn_algorithm
                  padre:optional: 'True'
                  padre:path: algorithm
                  padre:value_default: '''auto'''
                  padre:value_type: '{''auto'', ''ball_tree'', ''kd_tree'', ''brute''}'
                  rdfs:comment: Algorithm used to compute the nearest neighbors.
                  rdfs:label: nn_algorithm
                algorithm:
                  '@schema':
                    '@id': padre:KNeighborsRegressor/nn_algorithm
                    '@type': padre:ModelParameters
                    padre:configures: padre:KNeighborsRegressor
              - '@schema':
                  '@id': padre:sklearn.neighbors.regression.KNeighborsRegressor/leaf_size
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neighbors.regression.KNeighborsRegressor/leaf_size
                  padre:implements: padre:KNeighborsRegressor/leaf_size
                  padre:optional: 'True'
                  padre:path: leaf_size
                  padre:value_default: '30'
                  padre:value_type: integer
                  rdfs:comment: Leaf size passed to BallTree or KDTree. This can
                    affect the speed of the construction and query, as well as the memory
                    required to store the tree. The optimal value depends on the nature
                    of the problem.
                  rdfs:label: leaf_size
                algorithm:
                  '@schema':
                    '@id': padre:KNeighborsRegressor/leaf_size
                    '@type': padre:ModelParameters
                    padre:configures: padre:KNeighborsRegressor
              - '@schema':
                  '@id': padre:sklearn.neighbors.regression.KNeighborsRegressor/minkowski_parameter
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neighbors.regression.KNeighborsRegressor/minkowski_parameter
                  padre:implements: padre:KNeighborsRegressor/minkowski_parameter
                  padre:optional: 'True'
                  padre:path: p
                  padre:value_default: '2'
                  padre:value_type: integer
                  rdfs:comment: Parameter for the Minkowski metric.
                  rdfs:label: minkowski_parameter
                algorithm:
                  '@schema':
                    '@id': padre:KNeighborsRegressor/minkowski_parameter
                    '@type': padre:ModelParameters
                    padre:configures: padre:KNeighborsRegressor
              - '@schema':
                  '@id': padre:sklearn.neighbors.regression.KNeighborsRegressor/distance_metric
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neighbors.regression.KNeighborsRegressor/distance_metric
                  padre:implements: padre:KNeighborsRegressor/distance_metric
                  padre:optional: 'False'
                  padre:path: metric
                  padre:value_default: '''minkowski'''
                  padre:value_type: '{''cityblock'', ''cosine'', ''euclidean'', ''l1'',
                  ''l2'', ''manhattan'', ''braycurtis'', ''canberra'', ''chebyshev'',
                  ''correlation'', ''dice'', ''hamming'', ''jaccard'', ''kulsinski'',
                  ''mahalanobis'', ''matching'', ''minkowski'', ''rogerstanimoto'',
                  ''russellrao'', ''seuclidean'', ''sokalmichener'', ''sokalsneath'',
                  ''sqeuclidean'', ''yule'', a callable that should take two arrays
                  as input and return one value indicating the distance between them}'
                  rdfs:comment: The distance metric to use for the tree.
                  rdfs:label: distance_metric
                algorithm:
                  '@schema':
                    '@id': padre:KNeighborsRegressor/distance_metric
                    '@type': padre:ModelParameters
                    padre:configures: padre:KNeighborsRegressor
              - '@schema':
                  '@id': padre:sklearn.neighbors.regression.KNeighborsRegressor/metric_parameters
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neighbors.regression.KNeighborsRegressor/metric_parameters
                  padre:implements: padre:KNeighborsRegressor/metric_parameters
                  padre:optional: 'True'
                  padre:path: metric_params
                  padre:value_default: None
                  padre:value_type: dict
                  rdfs:comment: Additional keyword arguments for the metric function.
                  rdfs:label: metric_parameters
                algorithm:
                  '@schema':
                    '@id': padre:KNeighborsRegressor/metric_parameters
                    '@type': padre:ModelParameters
                    padre:configures: padre:KNeighborsRegressor
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.neighbors.regression.KNeighborsRegressor/jobs
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.neighbors.regression.KNeighborsRegressor/jobs
                  padre:implements: padre:KNeighborsRegressor/jobs
                  padre:optional: 'True'
                  padre:path: n_jobs
                  padre:value_default: '1'
                  padre:value_type: integer
                  rdfs:comment: The number of jobs to use for the computation. If
                    -1 all CPUs are used.
                  rdfs:label: jobs
                algorithm:
                  '@schema':
                    '@id': padre:KNeighborsRegressor/jobs
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:KNeighborsRegressor
    :neighbors.regression.RadiusNeighborsRegressor:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.neighbors.regression.RadiusNeighborsRegressor
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:RadiusNeighborsRegressor
            rdfs:comment: null
            rdfs:label: radius neighbors regressor
          algorithm:
            '@schema':
              '@id': padre:RadiusNeighborsRegressor
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: radius neighbors regressor
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.neighbors.regression.RadiusNeighborsRegressor/radius
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neighbors.regression.RadiusNeighborsRegressor/radius
                  padre:implements: padre:RadiusNeighborsRegressor/radius
                  padre:optional: 'True'
                  padre:path: radius
                  padre:value_default: '1.0'
                  padre:value_type: float
                  rdfs:comment: Range of parameter space to use.
                  rdfs:label: radius
                algorithm:
                  '@schema':
                    '@id': padre:RadiusNeighborsRegressor/radius
                    '@type': padre:ModelParameters
                    padre:configures: padre:RadiusNeighborsRegressor
              - '@schema':
                  '@id': padre:sklearn.neighbors.regression.RadiusNeighborsRegressor/weight_function
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neighbors.regression.RadiusNeighborsRegressor/weight_function
                  padre:implements: padre:RadiusNeighborsRegressor/weight_function
                  padre:optional: 'False'
                  padre:path: weights
                  padre:value_default: '''uniform'''
                  padre:value_type: '{''uniform'', ''distance'', callable: a user-defined
                  function which accepts an array of distances, and returns an array
                  of the same shape containing the weights.}'
                  rdfs:comment: Weight function used in prediction.
                  rdfs:label: weight_function
                algorithm:
                  '@schema':
                    '@id': padre:RadiusNeighborsRegressor/weight_function
                    '@type': padre:ModelParameters
                    padre:configures: padre:RadiusNeighborsRegressor
              - '@schema':
                  '@id': padre:sklearn.neighbors.regression.RadiusNeighborsRegressor/nn_algorithm
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neighbors.regression.RadiusNeighborsRegressor/nn_algorithm
                  padre:implements: padre:RadiusNeighborsRegressor/nn_algorithm
                  padre:optional: 'True'
                  padre:path: algorithm
                  padre:value_default: '''auto'''
                  padre:value_type: '{''auto'', ''ball_tree'', ''kd_tree'', ''brute''}'
                  rdfs:comment: Algorithm used to compute the nearest neighbors.
                  rdfs:label: nn_algorithm
                algorithm:
                  '@schema':
                    '@id': padre:RadiusNeighborsRegressor/nn_algorithm
                    '@type': padre:ModelParameters
                    padre:configures: padre:RadiusNeighborsRegressor
              - '@schema':
                  '@id': padre:sklearn.neighbors.regression.RadiusNeighborsRegressor/leaf_size
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neighbors.regression.RadiusNeighborsRegressor/leaf_size
                  padre:implements: padre:RadiusNeighborsRegressor/leaf_size
                  padre:optional: 'True'
                  padre:path: leaf_size
                  padre:value_default: '30'
                  padre:value_type: integer
                  rdfs:comment: Leaf size passed to BallTree or KDTree. This can
                    affect the speed of the construction and query, as well as the memory
                    required to store the tree. The optimal value depends on the nature
                    of the problem.
                  rdfs:label: leaf_size
                algorithm:
                  '@schema':
                    '@id': padre:RadiusNeighborsRegressor/leaf_size
                    '@type': padre:ModelParameters
                    padre:configures: padre:RadiusNeighborsRegressor
              - '@schema':
                  '@id': padre:sklearn.neighbors.regression.RadiusNeighborsRegressor/minkowski_parameter
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neighbors.regression.RadiusNeighborsRegressor/minkowski_parameter
                  padre:implements: padre:RadiusNeighborsRegressor/minkowski_parameter
                  padre:optional: 'True'
                  padre:path: p
                  padre:value_default: '2'
                  padre:value_type: integer
                  rdfs:comment: Parameter for the Minkowski metric.
                  rdfs:label: minkowski_parameter
                algorithm:
                  '@schema':
                    '@id': padre:RadiusNeighborsRegressor/minkowski_parameter
                    '@type': padre:ModelParameters
                    padre:configures: padre:RadiusNeighborsRegressor
              - '@schema':
                  '@id': padre:sklearn.neighbors.regression.RadiusNeighborsRegressor/distance_metric
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neighbors.regression.RadiusNeighborsRegressor/distance_metric
                  padre:implements: padre:RadiusNeighborsRegressor/distance_metric
                  padre:optional: 'False'
                  padre:path: metric
                  padre:value_default: '''minkowski'''
                  padre:value_type: '{''cityblock'', ''cosine'', ''euclidean'', ''l1'',
                  ''l2'', ''manhattan'', ''braycurtis'', ''canberra'', ''chebyshev'',
                  ''correlation'', ''dice'', ''hamming'', ''jaccard'', ''kulsinski'',
                  ''mahalanobis'', ''matching'', ''minkowski'', ''rogerstanimoto'',
                  ''russellrao'', ''seuclidean'', ''sokalmichener'', ''sokalsneath'',
                  ''sqeuclidean'', ''yule'', a callable that should take two arrays
                  as input and return one value indicating the distance between them}'
                  rdfs:comment: The distance metric to use for the tree.
                  rdfs:label: distance_metric
                algorithm:
                  '@schema':
                    '@id': padre:RadiusNeighborsRegressor/distance_metric
                    '@type': padre:ModelParameters
                    padre:configures: padre:RadiusNeighborsRegressor
              - '@schema':
                  '@id': padre:sklearn.neighbors.regression.RadiusNeighborsRegressor/metric_parameters
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neighbors.regression.RadiusNeighborsRegressor/metric_parameters
                  padre:implements: padre:RadiusNeighborsRegressor/metric_parameters
                  padre:optional: 'True'
                  padre:path: metric_params
                  padre:value_default: None
                  padre:value_type: dict
                  rdfs:comment: Additional keyword arguments for the metric function.
                  rdfs:label: metric_parameters
                algorithm:
                  '@schema':
                    '@id': padre:RadiusNeighborsRegressor/metric_parameters
                    '@type': padre:ModelParameters
                    padre:configures: padre:RadiusNeighborsRegressor
            optimisation_parameters: []
    :neighbors.unsupervised.NearestNeighbors:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.neighbors.unsupervised.NearestNeighbors
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:NearestNeighbors
            rdfs:comment: null
            rdfs:label: nearest neighbours
          algorithm:
            '@schema':
              '@id': padre:NearestNeighbors
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: nearest neighbours
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.neighbors.unsupervised.NearestNeighbors/num_neighbours
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neighbors.unsupervised.NearestNeighbors/num_neighbours
                  padre:implements: padre:NearestNeighbors/num_neighbours
                  padre:optional: 'True'
                  padre:path: n_neighbors
                  padre:value_default: '5'
                  padre:value_type: integer
                  rdfs:comment: Number of neighbors to use by default for kneighbors
                    queries.
                  rdfs:label: num_neighbours
                algorithm:
                  '@schema':
                    '@id': padre:NearestNeighbors/num_neighbours
                    '@type': padre:ModelParameters
                    padre:configures: padre:NearestNeighbors
              - '@schema':
                  '@id': padre:sklearn.neighbors.unsupervised.NearestNeighbors/radius
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neighbors.unsupervised.NearestNeighbors/radius
                  padre:implements: padre:NearestNeighbors/radius
                  padre:optional: 'True'
                  padre:path: radius
                  padre:value_default: '1.0'
                  padre:value_type: float
                  rdfs:comment: Range of parameter space to use by default for radius_neighbors
                    queries.
                  rdfs:label: radius
                algorithm:
                  '@schema':
                    '@id': padre:NearestNeighbors/radius
                    '@type': padre:ModelParameters
                    padre:configures: padre:NearestNeighbors
              - '@schema':
                  '@id': padre:sklearn.neighbors.unsupervised.NearestNeighbors/algorithm
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neighbors.unsupervised.NearestNeighbors/algorithm
                  padre:implements: padre:NearestNeighbors/algorithm
                  padre:optional: 'True'
                  padre:path: algorithm
                  padre:value_default: '''auto'''
                  padre:value_type: '{''ball_tree'', ''kd_tree'', ''brute'', ''auto''}'
                  rdfs:comment: Algorithm used to compute the nearest neighbors.
                  rdfs:label: algorithm
                algorithm:
                  '@schema':
                    '@id': padre:NearestNeighbors/algorithm
                    '@type': padre:ModelParameters
                    padre:configures: padre:NearestNeighbors
              - '@schema':
                  '@id': padre:sklearn.neighbors.unsupervised.NearestNeighbors/leaf_size
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neighbors.unsupervised.NearestNeighbors/leaf_size
                  padre:implements: padre:NearestNeighbors/leaf_size
                  padre:optional: 'True'
                  padre:path: leaf_size
                  padre:value_default: '30'
                  padre:value_type: integer
                  rdfs:comment: Leaf size passed to BallTree or KDTree. This can
                    affect the speed of the construction and query, as well as the memory
                    required to store the tree. The optimal value depends on the nature
                    of the problem.
                  rdfs:label: leaf_size
                algorithm:
                  '@schema':
                    '@id': padre:NearestNeighbors/leaf_size
                    '@type': padre:ModelParameters
                    padre:configures: padre:NearestNeighbors
              - '@schema':
                  '@id': padre:sklearn.neighbors.unsupervised.NearestNeighbors/distance_metric
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neighbors.unsupervised.NearestNeighbors/distance_metric
                  padre:implements: padre:NearestNeighbors/distance_metric
                  padre:optional: 'False'
                  padre:path: metric
                  padre:value_default: '''minkowski'''
                  padre:value_type: '{''cityblock'', ''cosine'', ''euclidean'', ''l1'',
                  ''l2'', ''manhattan'', ''braycurtis'', ''canberra'', ''chebyshev'',
                  ''correlation'', ''dice'', ''hamming'', ''jaccard'', ''kulsinski'',
                  ''mahalanobis'', ''matching'', ''minkowski'', ''rogerstanimoto'',
                  ''russellrao'', ''seuclidean'', ''sokalmichener'', ''sokalsneath'',
                  ''sqeuclidean'', ''yule'', a callable that should take two arrays
                  as input and return one value indicating the distance between them}'
                  rdfs:comment: Metric to use for distance computation.
                  rdfs:label: distance_metric
                algorithm:
                  '@schema':
                    '@id': padre:NearestNeighbors/distance_metric
                    '@type': padre:ModelParameters
                    padre:configures: padre:NearestNeighbors
              - '@schema':
                  '@id': padre:sklearn.neighbors.unsupervised.NearestNeighbors/minkowski_parameter
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neighbors.unsupervised.NearestNeighbors/minkowski_parameter
                  padre:implements: padre:NearestNeighbors/minkowski_parameter
                  padre:optional: 'True'
                  padre:path: p
                  padre:value_default: '2'
                  padre:value_type: integer
                  rdfs:comment: Parameter for the Minkowski metric.
                  rdfs:label: minkowski_parameter
                algorithm:
                  '@schema':
                    '@id': padre:NearestNeighbors/minkowski_parameter
                    '@type': padre:ModelParameters
                    padre:configures: padre:NearestNeighbors
              - '@schema':
                  '@id': padre:sklearn.neighbors.unsupervised.NearestNeighbors/metric_parameters
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neighbors.unsupervised.NearestNeighbors/metric_parameters
                  padre:implements: padre:NearestNeighbors/metric_parameters
                  padre:optional: 'True'
                  padre:path: metric_params
                  padre:value_default: None
                  padre:value_type: dict
                  rdfs:comment: Additional keyword arguments for the metric function.
                  rdfs:label: metric_parameters
                algorithm:
                  '@schema':
                    '@id': padre:NearestNeighbors/metric_parameters
                    '@type': padre:ModelParameters
                    padre:configures: padre:NearestNeighbors
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.neighbors.unsupervised.NearestNeighbors/jobs
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.neighbors.unsupervised.NearestNeighbors/jobs
                  padre:implements: padre:NearestNeighbors/jobs
                  padre:optional: 'True'
                  padre:path: n_jobs
                  padre:value_default: '1'
                  padre:value_type: integer
                  rdfs:comment: The number of jobs to use for the computation. If
                    -1 all CPUs are used.
                  rdfs:label: jobs
                algorithm:
                  '@schema':
                    '@id': padre:NearestNeighbors/jobs
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:NearestNeighbors
    :neural_network.multilayer_perceptron.MLPClassifier:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.neural_network.multilayer_perceptron.MLPClassifier
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:MLPClassifier
            rdfs:comment: null
            rdfs:label: multi-layer perceptron classifier
          algorithm:
            '@schema':
              '@id': padre:MLPClassifier
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: multi-layer perceptron classifier
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.neural_network.multilayer_perceptron.MLPClassifier/hidden_layer_sizes
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neural_network.multilayer_perceptron.MLPClassifier/hidden_layer_sizes
                  padre:implements: padre:MLPClassifier/hidden_layer_sizes
                  padre:optional: 'False'
                  padre:path: hidden_layer_sizes
                  padre:value_default: (100,)
                  padre:value_type: tuple, length = n_layers - 2
                  rdfs:comment: The ith element represents the number of neurons
                    in the ith hidden layer.
                  rdfs:label: hidden_layer_sizes
                algorithm:
                  '@schema':
                    '@id': padre:MLPClassifier/hidden_layer_sizes
                    '@type': padre:ModelParameters
                    padre:configures: padre:MLPClassifier
              - '@schema':
                  '@id': padre:sklearn.neural_network.multilayer_perceptron.MLPClassifier/activation
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neural_network.multilayer_perceptron.MLPClassifier/activation
                  padre:implements: padre:MLPClassifier/activation
                  padre:optional: 'False'
                  padre:path: activation
                  padre:value_default: '''relu'''
                  padre:value_type: ' {''identity'', ''logistic'', ''tanh'', ''relu''}'
                  rdfs:comment: Activation function for the hidden layer.
                  rdfs:label: activation
                algorithm:
                  '@schema':
                    '@id': padre:MLPClassifier/activation
                    '@type': padre:ModelParameters
                    padre:configures: padre:MLPClassifier
              - '@schema':
                  '@id': padre:sklearn.neural_network.multilayer_perceptron.MLPClassifier/solver
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neural_network.multilayer_perceptron.MLPClassifier/solver
                  padre:implements: padre:MLPClassifier/solver
                  padre:optional: 'False'
                  padre:path: solver
                  padre:value_default: '''adam'''
                  padre:value_type: '{''lbfgs'', ''sgd'', ''adam''}'
                  rdfs:comment: The solver for weight optimization.
                  rdfs:label: solver
                algorithm:
                  '@schema':
                    '@id': padre:MLPClassifier/solver
                    '@type': padre:ModelParameters
                    padre:configures: padre:MLPClassifier
              - '@schema':
                  '@id': padre:sklearn.neural_network.multilayer_perceptron.MLPClassifier/l2_penalty
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neural_network.multilayer_perceptron.MLPClassifier/l2_penalty
                  padre:implements: padre:MLPClassifier/l2_penalty
                  padre:optional: 'True'
                  padre:path: alpha
                  padre:value_default: '0.0001'
                  padre:value_type: float
                  rdfs:comment: L2 penalty (regularization term) parameter.
                  rdfs:label: l2_penalty
                algorithm:
                  '@schema':
                    '@id': padre:MLPClassifier/l2_penalty
                    '@type': padre:ModelParameters
                    padre:configures: padre:MLPClassifier
              - '@schema':
                  '@id': padre:sklearn.neural_network.multilayer_perceptron.MLPClassifier/batch_size
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neural_network.multilayer_perceptron.MLPClassifier/batch_size
                  padre:implements: padre:MLPClassifier/batch_size
                  padre:optional: 'True'
                  padre:path: batch_size
                  padre:value_default: '''auto'''
                  padre:value_type: '{integer, ''auto''}'
                  rdfs:comment: Size of minibatches for stochastic optimizers.
                  rdfs:label: batch_size
                algorithm:
                  '@schema':
                    '@id': padre:MLPClassifier/batch_size
                    '@type': padre:ModelParameters
                    padre:configures: padre:MLPClassifier
              - '@schema':
                  '@id': padre:sklearn.neural_network.multilayer_perceptron.MLPClassifier/learning_rate
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neural_network.multilayer_perceptron.MLPClassifier/learning_rate
                  padre:implements: padre:MLPClassifier/learning_rate
                  padre:optional: 'False'
                  padre:path: learning_rate
                  padre:value_default: '''constant'''
                  padre:value_type: '{''constant'', ''invscaling'', ''adaptive''}'
                  rdfs:comment: Learning rate schedule for weight updates.
                  rdfs:label: learning_rate
                algorithm:
                  '@schema':
                    '@id': padre:MLPClassifier/learning_rate
                    '@type': padre:ModelParameters
                    padre:configures: padre:MLPClassifier
              - '@schema':
                  '@id': padre:sklearn.neural_network.multilayer_perceptron.MLPClassifier/learning_rate_init
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neural_network.multilayer_perceptron.MLPClassifier/learning_rate_init
                  padre:implements: padre:MLPClassifier/learning_rate_init
                  padre:optional: 'True'
                  padre:path: learning_rate_init
                  padre:value_default: '0.001'
                  padre:value_type: double
                  rdfs:comment: The initial learning rate used. It controls the
                    step-size in updating the weights.
                  rdfs:label: learning_rate_init
                algorithm:
                  '@schema':
                    '@id': padre:MLPClassifier/learning_rate_init
                    '@type': padre:ModelParameters
                    padre:configures: padre:MLPClassifier
              - '@schema':
                  '@id': padre:sklearn.neural_network.multilayer_perceptron.MLPClassifier/inverse_scaling_exponent
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neural_network.multilayer_perceptron.MLPClassifier/inverse_scaling_exponent
                  padre:implements: padre:MLPClassifier/inverse_scaling_exponent
                  padre:optional: 'True'
                  padre:path: power_t
                  padre:value_default: '0.5'
                  padre:value_type: double
                  rdfs:comment: The exponent for inverse scaling learning rate.
                  rdfs:label: inverse_scaling_exponent
                algorithm:
                  '@schema':
                    '@id': padre:MLPClassifier/inverse_scaling_exponent
                    '@type': padre:ModelParameters
                    padre:configures: padre:MLPClassifier
              - '@schema':
                  '@id': padre:sklearn.neural_network.multilayer_perceptron.MLPClassifier/shuffle
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neural_network.multilayer_perceptron.MLPClassifier/shuffle
                  padre:implements: padre:MLPClassifier/shuffle
                  padre:optional: 'True'
                  padre:path: shuffle
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: Whether to shuffle samples in each iteration.
                  rdfs:label: shuffle
                algorithm:
                  '@schema':
                    '@id': padre:MLPClassifier/shuffle
                    '@type': padre:ModelParameters
                    padre:configures: padre:MLPClassifier
              - '@schema':
                  '@id': padre:sklearn.neural_network.multilayer_perceptron.MLPClassifier/random_state
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neural_network.multilayer_perceptron.MLPClassifier/random_state
                  padre:implements: padre:MLPClassifier/random_state
                  padre:optional: 'True'
                  padre:path: random_state
                  padre:value_default: None
                  padre:value_type: '{integer, RandomState instance, None}'
                  rdfs:comment: The seed of the pseudo random number generator to
                    use when shuffling the data. If int, random_state is the seed used
                    by the random number generator; If RandomState instance, random_state
                    is the random number generator; If None, the random number generator
                    is the RandomState instance used by np.random.
                  rdfs:label: random_state
                algorithm:
                  '@schema':
                    '@id': padre:MLPClassifier/random_state
                    '@type': padre:ModelParameters
                    padre:configures: padre:MLPClassifier
              - '@schema':
                  '@id': padre:sklearn.neural_network.multilayer_perceptron.MLPClassifier/tolerance
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neural_network.multilayer_perceptron.MLPClassifier/tolerance
                  padre:implements: padre:MLPClassifier/tolerance
                  padre:optional: 'True'
                  padre:path: tol
                  padre:value_default: '0.0001'
                  padre:value_type: float
                  rdfs:comment: Precision of the solution. (The tolerance for the
                    optimisation.)
                  rdfs:label: tolerance
                algorithm:
                  '@schema':
                    '@id': padre:MLPClassifier/tolerance
                    '@type': padre:ModelParameters
                    padre:configures: padre:MLPClassifier
              - '@schema':
                  '@id': padre:sklearn.neural_network.multilayer_perceptron.MLPClassifier/verbose
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neural_network.multilayer_perceptron.MLPClassifier/verbose
                  padre:implements: padre:MLPClassifier/verbose
                  padre:optional: 'True'
                  padre:path: verbose
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: Whether to print progress messages to stdout.
                  rdfs:label: verbose
                algorithm:
                  '@schema':
                    '@id': padre:MLPClassifier/verbose
                    '@type': padre:ModelParameters
                    padre:configures: padre:MLPClassifier
              - '@schema':
                  '@id': padre:sklearn.neural_network.multilayer_perceptron.MLPClassifier/reuse_previous
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neural_network.multilayer_perceptron.MLPClassifier/reuse_previous
                  padre:implements: padre:MLPClassifier/reuse_previous
                  padre:optional: 'True'
                  padre:path: warm_start
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: When set to True, reuse the solution of the previous
                    call to fit as initialization, otherwise, just erase the previous
                    solution.
                  rdfs:label: reuse_previous
                algorithm:
                  '@schema':
                    '@id': padre:MLPClassifier/reuse_previous
                    '@type': padre:ModelParameters
                    padre:configures: padre:MLPClassifier
              - '@schema':
                  '@id': padre:sklearn.neural_network.multilayer_perceptron.MLPClassifier/gradient_momentum
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neural_network.multilayer_perceptron.MLPClassifier/gradient_momentum
                  padre:implements: padre:MLPClassifier/gradient_momentum
                  padre:optional: 'False'
                  padre:path: momentum
                  padre:value_default: '0.9'
                  padre:value_type: float
                  rdfs:comment: Momentum for gradient descent update.
                  rdfs:label: gradient_momentum
                algorithm:
                  '@schema':
                    '@id': padre:MLPClassifier/gradient_momentum
                    '@type': padre:ModelParameters
                    padre:configures: padre:MLPClassifier
              - '@schema':
                  '@id': padre:sklearn.neural_network.multilayer_perceptron.MLPClassifier/nesterovs_momentum
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neural_network.multilayer_perceptron.MLPClassifier/nesterovs_momentum
                  padre:implements: padre:MLPClassifier/nesterovs_momentum
                  padre:optional: 'False'
                  padre:path: nesterovs_momentum
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: "Whether to use Nesterov\u2019s momentum."
                  rdfs:label: nesterovs_momentum
                algorithm:
                  '@schema':
                    '@id': padre:MLPClassifier/nesterovs_momentum
                    '@type': padre:ModelParameters
                    padre:configures: padre:MLPClassifier
              - '@schema':
                  '@id': padre:sklearn.neural_network.multilayer_perceptron.MLPClassifier/early_stopping
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neural_network.multilayer_perceptron.MLPClassifier/early_stopping
                  padre:implements: padre:MLPClassifier/early_stopping
                  padre:optional: 'False'
                  padre:path: early_stopping
                  padre:value_default: Flase
                  padre:value_type: boolean
                  rdfs:comment: Whether to use early stopping to terminate training
                    when validation score is not improving. If set to true, it will
                    automatically set aside 10% of training data as validation and terminate
                    training when validation score is not improving by at least tol
                    for two consecutive epochs.
                  rdfs:label: early_stopping
                algorithm:
                  '@schema':
                    '@id': padre:MLPClassifier/early_stopping
                    '@type': padre:ModelParameters
                    padre:configures: padre:MLPClassifier
              - '@schema':
                  '@id': padre:sklearn.neural_network.multilayer_perceptron.MLPClassifier/validation_fraction
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neural_network.multilayer_perceptron.MLPClassifier/validation_fraction
                  padre:implements: padre:MLPClassifier/validation_fraction
                  padre:optional: 'True'
                  padre:path: validation_fraction
                  padre:value_default: '0.1'
                  padre:value_type: float between 0 and 1
                  rdfs:comment: The proportion of training data to set aside as
                    validation set for early stopping.
                  rdfs:label: validation_fraction
                algorithm:
                  '@schema':
                    '@id': padre:MLPClassifier/validation_fraction
                    '@type': padre:ModelParameters
                    padre:configures: padre:MLPClassifier
              - '@schema':
                  '@id': padre:sklearn.neural_network.multilayer_perceptron.MLPClassifier/adam_beta_1
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neural_network.multilayer_perceptron.MLPClassifier/adam_beta_1
                  padre:implements: padre:MLPClassifier/adam_beta_1
                  padre:optional: 'True'
                  padre:path: beta_1
                  padre:value_default: '0.9'
                  padre:value_type: float should be in [0, 1)
                  rdfs:comment: Exponential decay rate for estimates of first moment
                    vector in adam.
                  rdfs:label: adam_beta_1
                algorithm:
                  '@schema':
                    '@id': padre:MLPClassifier/adam_beta_1
                    '@type': padre:ModelParameters
                    padre:configures: padre:MLPClassifier
              - '@schema':
                  '@id': padre:sklearn.neural_network.multilayer_perceptron.MLPClassifier/adam_beta_2
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neural_network.multilayer_perceptron.MLPClassifier/adam_beta_2
                  padre:implements: padre:MLPClassifier/adam_beta_2
                  padre:optional: 'True'
                  padre:path: beta_2
                  padre:value_default: '0.999'
                  padre:value_type: float should be in [0, 1)
                  rdfs:comment: Exponential decay rate for estimates of second moment
                    vector in adam.
                  rdfs:label: adam_beta_2
                algorithm:
                  '@schema':
                    '@id': padre:MLPClassifier/adam_beta_2
                    '@type': padre:ModelParameters
                    padre:configures: padre:MLPClassifier
              - '@schema':
                  '@id': padre:sklearn.neural_network.multilayer_perceptron.MLPClassifier/adam_epsilon
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neural_network.multilayer_perceptron.MLPClassifier/adam_epsilon
                  padre:implements: padre:MLPClassifier/adam_epsilon
                  padre:optional: 'True'
                  padre:path: epsilon
                  padre:value_default: '0.00000001'
                  padre:value_type: float
                  rdfs:comment: Value for numerical stability in adam.
                  rdfs:label: adam_epsilon
                algorithm:
                  '@schema':
                    '@id': padre:MLPClassifier/adam_epsilon
                    '@type': padre:ModelParameters
                    padre:configures: padre:MLPClassifier
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.neural_network.multilayer_perceptron.MLPClassifier/max_iterations
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.neural_network.multilayer_perceptron.MLPClassifier/max_iterations
                  padre:implements: padre:MLPClassifier/max_iterations
                  padre:optional: 'True'
                  padre:path: max_iter
                  padre:value_default: '200'
                  padre:value_type: integer
                  rdfs:comment: Maximum number of iterations.
                  rdfs:label: max_iterations
                algorithm:
                  '@schema':
                    '@id': padre:MLPClassifier/max_iterations
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:MLPClassifier
    :neural_network.multilayer_perceptron.MLPRegressor:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.neural_network.multilayer_perceptron.MLPRegressor
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:MLPRegressor
            rdfs:comment: null
            rdfs:label: multi-layer perceptron regressor
          algorithm:
            '@schema':
              '@id': padre:MLPRegressor
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: multi-layer perceptron regressor
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.neural_network.multilayer_perceptron.MLPRegressor/hidden_layer_sizes
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neural_network.multilayer_perceptron.MLPRegressor/hidden_layer_sizes
                  padre:implements: padre:MLPRegressor/hidden_layer_sizes
                  padre:optional: 'False'
                  padre:path: hidden_layer_sizes
                  padre:value_default: (100,)
                  padre:value_type: tuple, length = n_layers - 2
                  rdfs:comment: The ith element represents the number of neurons
                    in the ith hidden layer.
                  rdfs:label: hidden_layer_sizes
                algorithm:
                  '@schema':
                    '@id': padre:MLPRegressor/hidden_layer_sizes
                    '@type': padre:ModelParameters
                    padre:configures: padre:MLPRegressor
              - '@schema':
                  '@id': padre:sklearn.neural_network.multilayer_perceptron.MLPRegressor/activation
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neural_network.multilayer_perceptron.MLPRegressor/activation
                  padre:implements: padre:MLPRegressor/activation
                  padre:optional: 'False'
                  padre:path: activation
                  padre:value_default: '''relu'''
                  padre:value_type: ' {''identity'', ''logistic'', ''tanh'', ''relu''}'
                  rdfs:comment: Activation function for the hidden layer.
                  rdfs:label: activation
                algorithm:
                  '@schema':
                    '@id': padre:MLPRegressor/activation
                    '@type': padre:ModelParameters
                    padre:configures: padre:MLPRegressor
              - '@schema':
                  '@id': padre:sklearn.neural_network.multilayer_perceptron.MLPRegressor/solver
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neural_network.multilayer_perceptron.MLPRegressor/solver
                  padre:implements: padre:MLPRegressor/solver
                  padre:optional: 'False'
                  padre:path: solver
                  padre:value_default: '''adam'''
                  padre:value_type: '{''lbfgs'', ''sgd'', ''adam''}'
                  rdfs:comment: The solver for weight optimization.
                  rdfs:label: solver
                algorithm:
                  '@schema':
                    '@id': padre:MLPRegressor/solver
                    '@type': padre:ModelParameters
                    padre:configures: padre:MLPRegressor
              - '@schema':
                  '@id': padre:sklearn.neural_network.multilayer_perceptron.MLPRegressor/l2_penalty
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neural_network.multilayer_perceptron.MLPRegressor/l2_penalty
                  padre:implements: padre:MLPRegressor/l2_penalty
                  padre:optional: 'True'
                  padre:path: alpha
                  padre:value_default: '0.0001'
                  padre:value_type: float
                  rdfs:comment: L2 penalty (regularization term) parameter.
                  rdfs:label: l2_penalty
                algorithm:
                  '@schema':
                    '@id': padre:MLPRegressor/l2_penalty
                    '@type': padre:ModelParameters
                    padre:configures: padre:MLPRegressor
              - '@schema':
                  '@id': padre:sklearn.neural_network.multilayer_perceptron.MLPRegressor/batch_size
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neural_network.multilayer_perceptron.MLPRegressor/batch_size
                  padre:implements: padre:MLPRegressor/batch_size
                  padre:optional: 'True'
                  padre:path: batch_size
                  padre:value_default: '''auto'''
                  padre:value_type: '{integer, ''auto''}'
                  rdfs:comment: Size of minibatches for stochastic optimizers.
                  rdfs:label: batch_size
                algorithm:
                  '@schema':
                    '@id': padre:MLPRegressor/batch_size
                    '@type': padre:ModelParameters
                    padre:configures: padre:MLPRegressor
              - '@schema':
                  '@id': padre:sklearn.neural_network.multilayer_perceptron.MLPRegressor/learning_rate
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neural_network.multilayer_perceptron.MLPRegressor/learning_rate
                  padre:implements: padre:MLPRegressor/learning_rate
                  padre:optional: 'False'
                  padre:path: learning_rate
                  padre:value_default: '''constant'''
                  padre:value_type: '{''constant'', ''invscaling'', ''adaptive''}'
                  rdfs:comment: Learning rate schedule for weight updates.
                  rdfs:label: learning_rate
                algorithm:
                  '@schema':
                    '@id': padre:MLPRegressor/learning_rate
                    '@type': padre:ModelParameters
                    padre:configures: padre:MLPRegressor
              - '@schema':
                  '@id': padre:sklearn.neural_network.multilayer_perceptron.MLPRegressor/learning_rate_init
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neural_network.multilayer_perceptron.MLPRegressor/learning_rate_init
                  padre:implements: padre:MLPRegressor/learning_rate_init
                  padre:optional: 'True'
                  padre:path: learning_rate_init
                  padre:value_default: '0.001'
                  padre:value_type: double
                  rdfs:comment: The initial learning rate used. It controls the
                    step-size in updating the weights.
                  rdfs:label: learning_rate_init
                algorithm:
                  '@schema':
                    '@id': padre:MLPRegressor/learning_rate_init
                    '@type': padre:ModelParameters
                    padre:configures: padre:MLPRegressor
              - '@schema':
                  '@id': padre:sklearn.neural_network.multilayer_perceptron.MLPRegressor/inverse_scaling_exponent
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neural_network.multilayer_perceptron.MLPRegressor/inverse_scaling_exponent
                  padre:implements: padre:MLPRegressor/inverse_scaling_exponent
                  padre:optional: 'True'
                  padre:path: power_t
                  padre:value_default: '0.5'
                  padre:value_type: double
                  rdfs:comment: The exponent for inverse scaling learning rate.
                  rdfs:label: inverse_scaling_exponent
                algorithm:
                  '@schema':
                    '@id': padre:MLPRegressor/inverse_scaling_exponent
                    '@type': padre:ModelParameters
                    padre:configures: padre:MLPRegressor
              - '@schema':
                  '@id': padre:sklearn.neural_network.multilayer_perceptron.MLPRegressor/shuffle
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neural_network.multilayer_perceptron.MLPRegressor/shuffle
                  padre:implements: padre:MLPRegressor/shuffle
                  padre:optional: 'True'
                  padre:path: shuffle
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: Whether to shuffle samples in each iteration.
                  rdfs:label: shuffle
                algorithm:
                  '@schema':
                    '@id': padre:MLPRegressor/shuffle
                    '@type': padre:ModelParameters
                    padre:configures: padre:MLPRegressor
              - '@schema':
                  '@id': padre:sklearn.neural_network.multilayer_perceptron.MLPRegressor/random_state
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neural_network.multilayer_perceptron.MLPRegressor/random_state
                  padre:implements: padre:MLPRegressor/random_state
                  padre:optional: 'True'
                  padre:path: random_state
                  padre:value_default: None
                  padre:value_type: '{integer, RandomState instance, None}'
                  rdfs:comment: The seed of the pseudo random number generator to
                    use when shuffling the data. If int, random_state is the seed used
                    by the random number generator; If RandomState instance, random_state
                    is the random number generator; If None, the random number generator
                    is the RandomState instance used by np.random.
                  rdfs:label: random_state
                algorithm:
                  '@schema':
                    '@id': padre:MLPRegressor/random_state
                    '@type': padre:ModelParameters
                    padre:configures: padre:MLPRegressor
              - '@schema':
                  '@id': padre:sklearn.neural_network.multilayer_perceptron.MLPRegressor/tolerance
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neural_network.multilayer_perceptron.MLPRegressor/tolerance
                  padre:implements: padre:MLPRegressor/tolerance
                  padre:optional: 'True'
                  padre:path: tol
                  padre:value_default: '0.0001'
                  padre:value_type: float
                  rdfs:comment: Precision of the solution. (The tolerance for the
                    optimisation.)
                  rdfs:label: tolerance
                algorithm:
                  '@schema':
                    '@id': padre:MLPRegressor/tolerance
                    '@type': padre:ModelParameters
                    padre:configures: padre:MLPRegressor
              - '@schema':
                  '@id': padre:sklearn.neural_network.multilayer_perceptron.MLPRegressor/verbose
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neural_network.multilayer_perceptron.MLPRegressor/verbose
                  padre:implements: padre:MLPRegressor/verbose
                  padre:optional: 'True'
                  padre:path: verbose
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: Whether to print progress messages to stdout.
                  rdfs:label: verbose
                algorithm:
                  '@schema':
                    '@id': padre:MLPRegressor/verbose
                    '@type': padre:ModelParameters
                    padre:configures: padre:MLPRegressor
              - '@schema':
                  '@id': padre:sklearn.neural_network.multilayer_perceptron.MLPRegressor/reuse_previous
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neural_network.multilayer_perceptron.MLPRegressor/reuse_previous
                  padre:implements: padre:MLPRegressor/reuse_previous
                  padre:optional: 'True'
                  padre:path: warm_start
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: When set to True, reuse the solution of the previous
                    call to fit as initialization, otherwise, just erase the previous
                    solution.
                  rdfs:label: reuse_previous
                algorithm:
                  '@schema':
                    '@id': padre:MLPRegressor/reuse_previous
                    '@type': padre:ModelParameters
                    padre:configures: padre:MLPRegressor
              - '@schema':
                  '@id': padre:sklearn.neural_network.multilayer_perceptron.MLPRegressor/gradient_momentum
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neural_network.multilayer_perceptron.MLPRegressor/gradient_momentum
                  padre:implements: padre:MLPRegressor/gradient_momentum
                  padre:optional: 'False'
                  padre:path: momentum
                  padre:value_default: '0.9'
                  padre:value_type: float
                  rdfs:comment: Momentum for gradient descent update.
                  rdfs:label: gradient_momentum
                algorithm:
                  '@schema':
                    '@id': padre:MLPRegressor/gradient_momentum
                    '@type': padre:ModelParameters
                    padre:configures: padre:MLPRegressor
              - '@schema':
                  '@id': padre:sklearn.neural_network.multilayer_perceptron.MLPRegressor/nesterovs_momentum
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neural_network.multilayer_perceptron.MLPRegressor/nesterovs_momentum
                  padre:implements: padre:MLPRegressor/nesterovs_momentum
                  padre:optional: 'False'
                  padre:path: nesterovs_momentum
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: "Whether to use Nesterov\u2019s momentum."
                  rdfs:label: nesterovs_momentum
                algorithm:
                  '@schema':
                    '@id': padre:MLPRegressor/nesterovs_momentum
                    '@type': padre:ModelParameters
                    padre:configures: padre:MLPRegressor
              - '@schema':
                  '@id': padre:sklearn.neural_network.multilayer_perceptron.MLPRegressor/early_stopping
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neural_network.multilayer_perceptron.MLPRegressor/early_stopping
                  padre:implements: padre:MLPRegressor/early_stopping
                  padre:optional: Flase
                  padre:path: early_stopping
                  padre:value_default: Flase
                  padre:value_type: boolean
                  rdfs:comment: Whether to use early stopping to terminate training
                    when validation score is not improving. If set to true, it will
                    automatically set aside 10% of training data as validation and terminate
                    training when validation score is not improving by at least tol
                    for two consecutive epochs.
                  rdfs:label: early_stopping
                algorithm:
                  '@schema':
                    '@id': padre:MLPRegressor/early_stopping
                    '@type': padre:ModelParameters
                    padre:configures: padre:MLPRegressor
              - '@schema':
                  '@id': padre:sklearn.neural_network.multilayer_perceptron.MLPRegressor/validation_fraction
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neural_network.multilayer_perceptron.MLPRegressor/validation_fraction
                  padre:implements: padre:MLPRegressor/validation_fraction
                  padre:optional: 'True'
                  padre:path: validation_fraction
                  padre:value_default: '0.1'
                  padre:value_type: float between 0 and 1
                  rdfs:comment: The proportion of training data to set aside as
                    validation set for early stopping.
                  rdfs:label: validation_fraction
                algorithm:
                  '@schema':
                    '@id': padre:MLPRegressor/validation_fraction
                    '@type': padre:ModelParameters
                    padre:configures: padre:MLPRegressor
              - '@schema':
                  '@id': padre:sklearn.neural_network.multilayer_perceptron.MLPRegressor/adam_beta_1
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neural_network.multilayer_perceptron.MLPRegressor/adam_beta_1
                  padre:implements: padre:MLPRegressor/adam_beta_1
                  padre:optional: 'True'
                  padre:path: beta_1
                  padre:value_default: '0.9'
                  padre:value_type: float should be in [0, 1)
                  rdfs:comment: Exponential decay rate for estimates of first moment
                    vector in adam.
                  rdfs:label: adam_beta_1
                algorithm:
                  '@schema':
                    '@id': padre:MLPRegressor/adam_beta_1
                    '@type': padre:ModelParameters
                    padre:configures: padre:MLPRegressor
              - '@schema':
                  '@id': padre:sklearn.neural_network.multilayer_perceptron.MLPRegressor/adam_beta_2
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neural_network.multilayer_perceptron.MLPRegressor/adam_beta_2
                  padre:implements: padre:MLPRegressor/adam_beta_2
                  padre:optional: 'True'
                  padre:path: beta_2
                  padre:value_default: '0.999'
                  padre:value_type: float should be in [0, 1)
                  rdfs:comment: Exponential decay rate for estimates of second moment
                    vector in adam.
                  rdfs:label: adam_beta_2
                algorithm:
                  '@schema':
                    '@id': padre:MLPRegressor/adam_beta_2
                    '@type': padre:ModelParameters
                    padre:configures: padre:MLPRegressor
              - '@schema':
                  '@id': padre:sklearn.neural_network.multilayer_perceptron.MLPRegressor/adam_epsilon
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neural_network.multilayer_perceptron.MLPRegressor/adam_epsilon
                  padre:implements: padre:MLPRegressor/adam_epsilon
                  padre:optional: 'True'
                  padre:path: epsilon
                  padre:value_default: '0.00000001'
                  padre:value_type: float
                  rdfs:comment: Value for numerical stability in adam.
                  rdfs:label: adam_epsilon
                algorithm:
                  '@schema':
                    '@id': padre:MLPRegressor/adam_epsilon
                    '@type': padre:ModelParameters
                    padre:configures: padre:MLPRegressor
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.neural_network.multilayer_perceptron.MLPRegressor/max_iterations
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.neural_network.multilayer_perceptron.MLPRegressor/max_iterations
                  padre:implements: padre:MLPRegressor/max_iterations
                  padre:optional: 'True'
                  padre:path: max_iter
                  padre:value_default: '200'
                  padre:value_type: integer
                  rdfs:comment: Maximum number of iterations.
                  rdfs:label: max_iterations
                algorithm:
                  '@schema':
                    '@id': padre:MLPRegressor/max_iterations
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:MLPRegressor
    :neural_network.rbm.BernoulliRBM:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.neural_network.rbm.BernoulliRBM
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:BernoulliRBM
            rdfs:comment: null
            rdfs:label: Bernoulli restricted Boltzmann machines
          algorithm:
            '@schema':
              '@id': padre:BernoulliRBM
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: Bernoulli restricted Boltzmann machines
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.neural_network.rbm.BernoulliRBM/num_components
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neural_network.rbm.BernoulliRBM/num_components
                  padre:implements: padre:BernoulliRBM/num_components
                  padre:optional: 'True'
                  padre:path: n_components
                  padre:value_default: '256'
                  padre:value_type: integer
                  rdfs:comment: Number of binary hidden units.
                  rdfs:label: num_components
                algorithm:
                  '@schema':
                    '@id': padre:BernoulliRBM/num_components
                    '@type': padre:ModelParameters
                    padre:configures: padre:BernoulliRBM
              - '@schema':
                  '@id': padre:sklearn.neural_network.rbm.BernoulliRBM/learning_rate
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neural_network.rbm.BernoulliRBM/learning_rate
                  padre:implements: padre:BernoulliRBM/learning_rate
                  padre:optional: 'True'
                  padre:path: learning_rate
                  padre:value_default: '0.1'
                  padre:value_type: float
                  rdfs:comment: The learning rate for weight updates.
                  rdfs:label: learning_rate
                algorithm:
                  '@schema':
                    '@id': padre:BernoulliRBM/learning_rate
                    '@type': padre:ModelParameters
                    padre:configures: padre:BernoulliRBM
              - '@schema':
                  '@id': padre:sklearn.neural_network.rbm.BernoulliRBM/batch_size
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neural_network.rbm.BernoulliRBM/batch_size
                  padre:implements: padre:BernoulliRBM/batch_size
                  padre:optional: 'True'
                  padre:path: batch_size
                  padre:value_default: '10'
                  padre:value_type: integer
                  rdfs:comment: Number of examples per minibatch.
                  rdfs:label: batch_size
                algorithm:
                  '@schema':
                    '@id': padre:BernoulliRBM/batch_size
                    '@type': padre:ModelParameters
                    padre:configures: padre:BernoulliRBM
              - '@schema':
                  '@id': padre:sklearn.neural_network.rbm.BernoulliRBM/verbose
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neural_network.rbm.BernoulliRBM/verbose
                  padre:implements: padre:BernoulliRBM/verbose
                  padre:optional: 'True'
                  padre:path: verbose
                  padre:value_default: '0'
                  padre:value_type: integer
                  rdfs:comment: he verbosity level. The default, zero, means silent
                    mode.
                  rdfs:label: verbose
                algorithm:
                  '@schema':
                    '@id': padre:BernoulliRBM/verbose
                    '@type': padre:ModelParameters
                    padre:configures: padre:BernoulliRBM
              - '@schema':
                  '@id': padre:sklearn.neural_network.rbm.BernoulliRBM/random_state
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.neural_network.rbm.BernoulliRBM/random_state
                  padre:implements: padre:BernoulliRBM/random_state
                  padre:optional: 'True'
                  padre:path: random_state
                  padre:value_default: None
                  padre:value_type: '{integer, RandomState instance, None}'
                  rdfs:comment: A random number generator instance to define the
                    state of the random permutations generator. If an integer is given,
                    it fixes the seed. Defaults to the global numpy random number generator.
                  rdfs:label: random_state
                algorithm:
                  '@schema':
                    '@id': padre:BernoulliRBM/random_state
                    '@type': padre:ModelParameters
                    padre:configures: padre:BernoulliRBM
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.neural_network.rbm.BernoulliRBM/num_iter
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.neural_network.rbm.BernoulliRBM/num_iter
                  padre:implements: padre:BernoulliRBM/num_iter
                  padre:optional: 'True'
                  padre:path: n_iter
                  padre:value_default: '10'
                  padre:value_type: integer
                  rdfs:comment: Number of iterations/sweeps over the training dataset
                    to perform during training.
                  rdfs:label: num_iter
                algorithm:
                  '@schema':
                    '@id': padre:BernoulliRBM/num_iter
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:BernoulliRBM
    :semi_supervised.label_propagation.LabelPropagation:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.semi_supervised.label_propagation.LabelPropagation
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:LabelPropagation
            rdfs:comment: null
            rdfs:label: label propagation
          algorithm:
            '@schema':
              '@id': padre:LabelPropagation
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: label propagation
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.semi_supervised.label_propagation.LabelPropagation/kernel
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.semi_supervised.label_propagation.LabelPropagation/kernel
                  padre:implements: padre:LabelPropagation/kernel
                  padre:optional: 'False'
                  padre:path: kernel
                  padre:value_default: '''rbf'''
                  padre:value_type: '{''knn'', ''rbf'', a callable taking two inputs
                  in shape (n_samples, n_features) and returns weight matrix in shape
                  [n_samples, n_samples]}'
                  rdfs:comment: Specifies the kernel type to be used in the algorithm.
                  rdfs:label: kernel
                algorithm:
                  '@schema':
                    '@id': padre:LabelPropagation/kernel
                    '@type': padre:ModelParameters
                    padre:configures: padre:LabelPropagation
              - '@schema':
                  '@id': padre:sklearn.semi_supervised.label_propagation.LabelPropagation/rbf_parameter
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.semi_supervised.label_propagation.LabelPropagation/rbf_parameter
                  padre:implements: padre:LabelPropagation/rbf_parameter
                  padre:optional: 'False'
                  padre:path: gamma
                  padre:value_default: '20'
                  padre:value_type: float
                  rdfs:comment: Parameter for rbf kernel
                  rdfs:label: rbf_parameter
                algorithm:
                  '@schema':
                    '@id': padre:LabelPropagation/rbf_parameter
                    '@type': padre:ModelParameters
                    padre:configures: padre:LabelPropagation
              - '@schema':
                  '@id': padre:sklearn.semi_supervised.label_propagation.LabelPropagation/num_neighbours
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.semi_supervised.label_propagation.LabelPropagation/num_neighbours
                  padre:implements: padre:LabelPropagation/num_neighbours
                  padre:optional: 'True'
                  padre:path: n_neighbors
                  padre:value_default: '7'
                  padre:value_type: integer > 0
                  rdfs:comment: Number of neighbors to use by for knn kernel.
                  rdfs:label: num_neighbours
                algorithm:
                  '@schema':
                    '@id': padre:LabelPropagation/num_neighbours
                    '@type': padre:ModelParameters
                    padre:configures: padre:LabelPropagation
              - '@schema':
                  '@id': padre:sklearn.semi_supervised.label_propagation.LabelPropagation/tolerance
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.semi_supervised.label_propagation.LabelPropagation/tolerance
                  padre:implements: padre:LabelPropagation/tolerance
                  padre:optional: 'False'
                  padre:path: tol
                  padre:value_default: '0.001'
                  padre:value_type: float
                  rdfs:comment: 'Convergence tolerance: threshold to consider the
                  system at steady state'
                  rdfs:label: tolerance
                algorithm:
                  '@schema':
                    '@id': padre:LabelPropagation/tolerance
                    '@type': padre:ModelParameters
                    padre:configures: padre:LabelPropagation
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.semi_supervised.label_propagation.LabelPropagation/max_iterations
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.semi_supervised.label_propagation.LabelPropagation/max_iterations
                  padre:implements: padre:LabelPropagation/max_iterations
                  padre:optional: 'False'
                  padre:path: max_iter
                  padre:value_default: '1000'
                  padre:value_type: integer
                  rdfs:comment: Maximum number of iterations.
                  rdfs:label: max_iterations
                algorithm:
                  '@schema':
                    '@id': padre:LabelPropagation/max_iterations
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:LabelPropagation
              - '@schema':
                  '@id': padre:sklearn.semi_supervised.label_propagation.LabelPropagation/jobs
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.semi_supervised.label_propagation.LabelPropagation/jobs
                  padre:implements: padre:LabelPropagation/jobs
                  padre:optional: 'True'
                  padre:path: n_jobs
                  padre:value_default: '1'
                  padre:value_type: integer
                  rdfs:comment: The number of jobs to use for the computation. If
                    -1 all CPUs are used.
                  rdfs:label: jobs
                algorithm:
                  '@schema':
                    '@id': padre:LabelPropagation/jobs
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:LabelPropagation
    :semi_supervised.label_propagation.LabelSpreading:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.semi_supervised.label_propagation.LabelSpreading
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:LabelSpreading
            rdfs:comment: null
            rdfs:label: label spreading
          algorithm:
            '@schema':
              '@id': padre:LabelSpreading
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: label spreading
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.semi_supervised.label_propagation.LabelSpreading/kernel
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.semi_supervised.label_propagation.LabelSpreading/kernel
                  padre:implements: padre:LabelSpreading/kernel
                  padre:optional: 'False'
                  padre:path: kernel
                  padre:value_default: '''rbf'''
                  padre:value_type: '{''knn'', ''rbf'', a callable taking two inputs
                  in shape (n_samples, n_features) and returns weight matrix in shape
                  [n_samples, n_samples]}'
                  rdfs:comment: Specifies the kernel type to be used in the algorithm.
                  rdfs:label: kernel
                algorithm:
                  '@schema':
                    '@id': padre:LabelSpreading/kernel
                    '@type': padre:ModelParameters
                    padre:configures: padre:LabelSpreading
              - '@schema':
                  '@id': padre:sklearn.semi_supervised.label_propagation.LabelSpreading/rbf_parameter
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.semi_supervised.label_propagation.LabelSpreading/rbf_parameter
                  padre:implements: padre:LabelSpreading/rbf_parameter
                  padre:optional: 'False'
                  padre:path: gamma
                  padre:value_default: '20'
                  padre:value_type: float
                  rdfs:comment: Parameter for rbf kernel
                  rdfs:label: rbf_parameter
                algorithm:
                  '@schema':
                    '@id': padre:LabelSpreading/rbf_parameter
                    '@type': padre:ModelParameters
                    padre:configures: padre:LabelSpreading
              - '@schema':
                  '@id': padre:sklearn.semi_supervised.label_propagation.LabelSpreading/num_neighbours
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.semi_supervised.label_propagation.LabelSpreading/num_neighbours
                  padre:implements: padre:LabelSpreading/num_neighbours
                  padre:optional: 'True'
                  padre:path: n_neighbors
                  padre:value_default: '7'
                  padre:value_type: integer > 0
                  rdfs:comment: Number of neighbors to use by for knn kernel.
                  rdfs:label: num_neighbours
                algorithm:
                  '@schema':
                    '@id': padre:LabelSpreading/num_neighbours
                    '@type': padre:ModelParameters
                    padre:configures: padre:LabelSpreading
              - '@schema':
                  '@id': padre:sklearn.semi_supervised.label_propagation.LabelSpreading/calmping_factor
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.semi_supervised.label_propagation.LabelSpreading/calmping_factor
                  padre:implements: padre:LabelSpreading/calmping_factor
                  padre:optional: 'False'
                  padre:path: alpha
                  padre:value_default: '0.2'
                  padre:value_type: float in [0,1]
                  rdfs:comment: Clamping factor. A value in [0, 1] that specifies
                    the relative amount that an instance should adopt the information
                    from its neighbors as opposed to its initial label. 0 means  keeping
                    the initial label information; 1 means replacing all initial information.
                  rdfs:label: calmping_factor
                algorithm:
                  '@schema':
                    '@id': padre:LabelSpreading/calmping_factor
                    '@type': padre:ModelParameters
                    padre:configures: padre:LabelSpreading
              - '@schema':
                  '@id': padre:sklearn.semi_supervised.label_propagation.LabelSpreading/tolerance
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.semi_supervised.label_propagation.LabelSpreading/tolerance
                  padre:implements: padre:LabelSpreading/tolerance
                  padre:optional: 'False'
                  padre:path: tol
                  padre:value_default: '0.001'
                  padre:value_type: float
                  rdfs:comment: 'Convergence tolerance: threshold to consider the
                  system at steady state'
                  rdfs:label: tolerance
                algorithm:
                  '@schema':
                    '@id': padre:LabelSpreading/tolerance
                    '@type': padre:ModelParameters
                    padre:configures: padre:LabelSpreading
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.semi_supervised.label_propagation.LabelSpreading/max_iterations
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.semi_supervised.label_propagation.LabelSpreading/max_iterations
                  padre:implements: padre:LabelSpreading/max_iterations
                  padre:optional: 'False'
                  padre:path: max_iter
                  padre:value_default: '30'
                  padre:value_type: integer
                  rdfs:comment: Maximum number of iterations.
                  rdfs:label: max_iterations
                algorithm:
                  '@schema':
                    '@id': padre:LabelSpreading/max_iterations
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:LabelSpreading
              - '@schema':
                  '@id': padre:sklearn.semi_supervised.label_propagation.LabelSpreading/jobs
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.semi_supervised.label_propagation.LabelSpreading/jobs
                  padre:implements: padre:LabelSpreading/jobs
                  padre:optional: 'True'
                  padre:path: n_jobs
                  padre:value_default: '1'
                  padre:value_type: integer
                  rdfs:comment: The number of jobs to use for the computation. If
                    -1 all CPUs are used.
                  rdfs:label: jobs
                algorithm:
                  '@schema':
                    '@id': padre:LabelSpreading/jobs
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:LabelSpreading
    :svm.classes.LinearSVC:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.svm.classes.LinearSVC
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:LinearSVC
            rdfs:comment: null
            rdfs:label: linear-support vector classification
          algorithm:
            '@schema':
              '@id': padre:LinearSVC
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: linear-support vector classification
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.svm.classes.LinearSVC/penalty_norm
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.svm.classes.LinearSVC/penalty_norm
                  padre:implements: padre:LinearSVC/penalty_norm
                  padre:optional: 'False'
                  padre:path: penalty
                  padre:value_default: '''l2'''
                  padre:value_type: '{''l1'', ''l2''}'
                  rdfs:comment: Specifies the norm used in the penalization.
                  rdfs:label: penalty_norm
                algorithm:
                  '@schema':
                    '@id': padre:LinearSVC/penalty_norm
                    '@type': padre:ModelParameters
                    padre:configures: padre:LinearSVC
              - '@schema':
                  '@id': padre:sklearn.svm.classes.LinearSVC/loss_function
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.svm.classes.LinearSVC/loss_function
                  padre:implements: padre:LinearSVC/loss_function
                  padre:optional: 'False'
                  padre:path: loss
                  padre:value_default: '''squared_hinge'''
                  padre:value_type: '{''hinge'', ''squared_hinge''}'
                  rdfs:comment: The loss function to be used.
                  rdfs:label: loss_function
                algorithm:
                  '@schema':
                    '@id': padre:LinearSVC/loss_function
                    '@type': padre:ModelParameters
                    padre:configures: padre:LinearSVC
              - '@schema':
                  '@id': padre:sklearn.svm.classes.LinearSVC/dual
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.svm.classes.LinearSVC/dual
                  padre:implements: padre:LinearSVC/dual
                  padre:optional: 'False'
                  padre:path: dual
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: Select the algorithm to either solve the dual or
                    primal optimization problem.
                  rdfs:label: dual
                algorithm:
                  '@schema':
                    '@id': padre:LinearSVC/dual
                    '@type': padre:ModelParameters
                    padre:configures: padre:LinearSVC
              - '@schema':
                  '@id': padre:sklearn.svm.classes.LinearSVC/tolerance
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.svm.classes.LinearSVC/tolerance
                  padre:implements: padre:LinearSVC/tolerance
                  padre:optional: 'True'
                  padre:path: tol
                  padre:value_default: '0.0001'
                  padre:value_type: float
                  rdfs:comment: Tolerance for stopping criteria.
                  rdfs:label: tolerance
                algorithm:
                  '@schema':
                    '@id': padre:LinearSVC/tolerance
                    '@type': padre:ModelParameters
                    padre:configures: padre:LinearSVC
              - '@schema':
                  '@id': padre:sklearn.svm.classes.LinearSVC/error_penalty
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.svm.classes.LinearSVC/error_penalty
                  padre:implements: padre:LinearSVC/error_penalty
                  padre:optional: 'True'
                  padre:path: C
                  padre:value_default: '1.0'
                  padre:value_type: float
                  rdfs:comment: Penalty parameter of the error term.
                  rdfs:label: error_penalty
                algorithm:
                  '@schema':
                    '@id': padre:LinearSVC/error_penalty
                    '@type': padre:ModelParameters
                    padre:configures: padre:LinearSVC
              - '@schema':
                  '@id': padre:sklearn.svm.classes.LinearSVC/multi_class_strategy
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.svm.classes.LinearSVC/multi_class_strategy
                  padre:implements: padre:LinearSVC/multi_class_strategy
                  padre:optional: 'False'
                  padre:path: multi_class
                  padre:value_default: '''ovr'''
                  padre:value_type: '{''ovr'', ''crammer_singer''}'
                  rdfs:comment: Determines the multi-class strategy if y contains
                    more than two classes.
                  rdfs:label: multi_class_strategy
                algorithm:
                  '@schema':
                    '@id': padre:LinearSVC/multi_class_strategy
                    '@type': padre:ModelParameters
                    padre:configures: padre:LinearSVC
              - '@schema':
                  '@id': padre:sklearn.svm.classes.LinearSVC/fit_intercept
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.svm.classes.LinearSVC/fit_intercept
                  padre:implements: padre:LinearSVC/fit_intercept
                  padre:optional: 'True'
                  padre:path: fit_intercept
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: Whether to calculate the intercept for this model.
                  rdfs:label: fit_intercept
                algorithm:
                  '@schema':
                    '@id': padre:LinearSVC/fit_intercept
                    '@type': padre:ModelParameters
                    padre:configures: padre:LinearSVC
              - '@schema':
                  '@id': padre:sklearn.svm.classes.LinearSVC/intercept_scaling
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.svm.classes.LinearSVC/intercept_scaling
                  padre:implements: padre:LinearSVC/intercept_scaling
                  padre:optional: 'False'
                  padre:path: intercept_scaling
                  padre:value_default: '1'
                  padre:value_type: float
                  rdfs:comment: "Useful only when the solver \u2018liblinear\u2019\
                  \ is used and self.fit_intercept is set to True. In this case, x\
                  \ becomes [x, self.intercept_scaling], i.e. a \u201Csynthetic\u201D\
                  \ feature with constant value equal to intercept_scaling is appended\
                  \ to the instance vector. The intercept becomes intercept_scaling\
                  \ * synthetic_feature_weight."
                  rdfs:label: intercept_scaling
                algorithm:
                  '@schema':
                    '@id': padre:LinearSVC/intercept_scaling
                    '@type': padre:ModelParameters
                    padre:configures: padre:LinearSVC
              - '@schema':
                  '@id': padre:sklearn.svm.classes.LinearSVC/class_weight
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.svm.classes.LinearSVC/class_weight
                  padre:implements: padre:LinearSVC/class_weight
                  padre:optional: 'True'
                  padre:path: class_weight
                  padre:value_default: None
                  padre:value_type: '{dictionary with weights for all calsses, ''balanced'',
                  None}'
                  rdfs:comment: "Weights the classes. The \u201Cbalanced\u201D mode\
                  \ uses the values of y to automatically adjust weights inversely\
                  \ proportional to class frequencies in the input data as n_samples\
                  \ / (n_classes * np.bincount(y))."
                  rdfs:label: class_weight
                algorithm:
                  '@schema':
                    '@id': padre:LinearSVC/class_weight
                    '@type': padre:ModelParameters
                    padre:configures: padre:LinearSVC
              - '@schema':
                  '@id': padre:sklearn.svm.classes.LinearSVC/verbose
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.svm.classes.LinearSVC/verbose
                  padre:implements: padre:LinearSVC/verbose
                  padre:optional: 'False'
                  padre:path: verbose
                  padre:value_default: '0'
                  padre:value_type: integer
                  rdfs:comment: Enable verbose output.
                  rdfs:label: verbose
                algorithm:
                  '@schema':
                    '@id': padre:LinearSVC/verbose
                    '@type': padre:ModelParameters
                    padre:configures: padre:LinearSVC
              - '@schema':
                  '@id': padre:sklearn.svm.classes.LinearSVC/random_state
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.svm.classes.LinearSVC/random_state
                  padre:implements: padre:LinearSVC/random_state
                  padre:optional: 'True'
                  padre:path: random_state
                  padre:value_default: None
                  padre:value_type: '{integer, RandomState instance, None}'
                  rdfs:comment: The seed of the pseudo random number generator to
                    use when shuffling the data. If int, random_state is the seed used
                    by the random number generator; If RandomState instance, random_state
                    is the random number generator; If None, the random number generator
                    is the RandomState instance used by np.random.
                  rdfs:label: random_state
                algorithm:
                  '@schema':
                    '@id': padre:LinearSVC/random_state
                    '@type': padre:ModelParameters
                    padre:configures: padre:LinearSVC
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.svm.classes.LinearSVC/max_iterations
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.svm.classes.LinearSVC/max_iterations
                  padre:implements: padre:LinearSVC/max_iterations
                  padre:optional: 'False'
                  padre:path: max_iter
                  padre:value_default: '1000'
                  padre:value_type: integer
                  rdfs:comment: The maximum number of iterations to be run.
                  rdfs:label: max_iterations
                algorithm:
                  '@schema':
                    '@id': padre:LinearSVC/max_iterations
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:LinearSVC
    :svm.classes.LinearSVR:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.svm.classes.LinearSVR
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:LinearSVR
            rdfs:comment: null
            rdfs:label: linear-support vector regression
          algorithm:
            '@schema':
              '@id': padre:LinearSVR
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: linear-support vector regression
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.svm.classes.LinearSVR/error_penalty
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.svm.classes.LinearSVR/error_penalty
                  padre:implements: padre:LinearSVR/error_penalty
                  padre:optional: 'True'
                  padre:path: C
                  padre:value_default: '1.0'
                  padre:value_type: float
                  rdfs:comment: Penalty parameter of the error term.
                  rdfs:label: error_penalty
                algorithm:
                  '@schema':
                    '@id': padre:LinearSVR/error_penalty
                    '@type': padre:ModelParameters
                    padre:configures: padre:LinearSVR
              - '@schema':
                  '@id': padre:sklearn.svm.classes.LinearSVR/loss_function
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.svm.classes.LinearSVR/loss_function
                  padre:implements: padre:LinearSVR/loss_function
                  padre:optional: 'False'
                  padre:path: loss
                  padre:value_default: '''epsilon_insensitive'''
                  padre:value_type: '{''epsilon_insensitive'', ''squared_epsilon_insensitive''}'
                  rdfs:comment: The loss function to be used.
                  rdfs:label: loss_function
                algorithm:
                  '@schema':
                    '@id': padre:LinearSVR/loss_function
                    '@type': padre:ModelParameters
                    padre:configures: padre:LinearSVR
              - '@schema':
                  '@id': padre:sklearn.svm.classes.LinearSVR/epsilon
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.svm.classes.LinearSVR/epsilon
                  padre:implements: padre:LinearSVR/epsilon
                  padre:optional: 'True'
                  padre:path: epsilon
                  padre:value_default: '0.0'
                  padre:value_type: float
                  rdfs:comment: Epsilon parameter in the epsilon-insensitive loss
                    function. Note that the value of this parameter depends on the scale
                    of the target variable y.
                  rdfs:label: epsilon
                algorithm:
                  '@schema':
                    '@id': padre:LinearSVR/epsilon
                    '@type': padre:ModelParameters
                    padre:configures: padre:LinearSVR
              - '@schema':
                  '@id': padre:sklearn.svm.classes.LinearSVR/dual
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.svm.classes.LinearSVR/dual
                  padre:implements: padre:LinearSVR/dual
                  padre:optional: 'False'
                  padre:path: dual
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: Select the algorithm to either solve the dual or
                    primal optimization problem.
                  rdfs:label: dual
                algorithm:
                  '@schema':
                    '@id': padre:LinearSVR/dual
                    '@type': padre:ModelParameters
                    padre:configures: padre:LinearSVR
              - '@schema':
                  '@id': padre:sklearn.svm.classes.LinearSVR/tolerance
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.svm.classes.LinearSVR/tolerance
                  padre:implements: padre:LinearSVR/tolerance
                  padre:optional: 'True'
                  padre:path: tol
                  padre:value_default: '0.0001'
                  padre:value_type: float
                  rdfs:comment: Tolerance for stopping criterion.
                  rdfs:label: tolerance
                algorithm:
                  '@schema':
                    '@id': padre:LinearSVR/tolerance
                    '@type': padre:ModelParameters
                    padre:configures: padre:LinearSVR
              - '@schema':
                  '@id': padre:sklearn.svm.classes.LinearSVR/fit_intercept
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.svm.classes.LinearSVR/fit_intercept
                  padre:implements: padre:LinearSVR/fit_intercept
                  padre:optional: 'True'
                  padre:path: fit_intercept
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: Whether to calculate the intercept for this model.
                  rdfs:label: fit_intercept
                algorithm:
                  '@schema':
                    '@id': padre:LinearSVR/fit_intercept
                    '@type': padre:ModelParameters
                    padre:configures: padre:LinearSVR
              - '@schema':
                  '@id': padre:sklearn.svm.classes.LinearSVR/intercept_scaling
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.svm.classes.LinearSVR/intercept_scaling
                  padre:implements: padre:LinearSVR/intercept_scaling
                  padre:optional: 'True'
                  padre:path: intercept_scaling
                  padre:value_default: '1'
                  padre:value_type: float
                  rdfs:comment: "When self.fit_intercept is True, instance vector\
                  \ x becomes [x, self.intercept_scaling], i.e. a \u201Csynthetic\u201D\
                  \ feature with constant value equals to intercept_scaling is appended\
                  \ to the instance vector. The intercept becomes intercept_scaling\
                  \ * synthetic feature weight Note! the synthetic feature weight\
                  \ is subject to l1/l2 regularization as all other features. To lessen\
                  \ the effect of regularization on synthetic feature weight (and\
                  \ therefore on the intercept) intercept_scaling has to be increased."
                  rdfs:label: intercept_scaling
                algorithm:
                  '@schema':
                    '@id': padre:LinearSVR/intercept_scaling
                    '@type': padre:ModelParameters
                    padre:configures: padre:LinearSVR
              - '@schema':
                  '@id': padre:sklearn.svm.classes.LinearSVR/verbose
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.svm.classes.LinearSVR/verbose
                  padre:implements: padre:LinearSVR/verbose
                  padre:optional: 'False'
                  padre:path: verbose
                  padre:value_default: '0'
                  padre:value_type: integer
                  rdfs:comment: Enable verbose output.
                  rdfs:label: verbose
                algorithm:
                  '@schema':
                    '@id': padre:LinearSVR/verbose
                    '@type': padre:ModelParameters
                    padre:configures: padre:LinearSVR
              - '@schema':
                  '@id': padre:sklearn.svm.classes.LinearSVR/random_state
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.svm.classes.LinearSVR/random_state
                  padre:implements: padre:LinearSVR/random_state
                  padre:optional: 'True'
                  padre:path: random_state
                  padre:value_default: None
                  padre:value_type: '{integer, RandomState instance, None}'
                  rdfs:comment: The seed of the pseudo random number generator to
                    use when shuffling the data. If int, random_state is the seed used
                    by the random number generator; If RandomState instance, random_state
                    is the random number generator; If None, the random number generator
                    is the RandomState instance used by np.random.
                  rdfs:label: random_state
                algorithm:
                  '@schema':
                    '@id': padre:LinearSVR/random_state
                    '@type': padre:ModelParameters
                    padre:configures: padre:LinearSVR
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.svm.classes.LinearSVR/max_iterations
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.svm.classes.LinearSVR/max_iterations
                  padre:implements: padre:LinearSVR/max_iterations
                  padre:optional: 'False'
                  padre:path: max_iter
                  padre:value_default: '1000'
                  padre:value_type: integer
                  rdfs:comment: The maximum number of iterations to be run.
                  rdfs:label: max_iterations
                algorithm:
                  '@schema':
                    '@id': padre:LinearSVR/max_iterations
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:LinearSVR
    :svm.classes.NuSVC:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.svm.classes.NuSVC
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:NuSVC
            rdfs:comment: null
            rdfs:label: nu-support vector classification
          algorithm:
            '@schema':
              '@id': padre:NuSVC
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: nu-support vector classification
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.svm.classes.NuSVC/nu
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.svm.classes.NuSVC/nu
                  padre:implements: padre:NuSVC/nu
                  padre:optional: 'True'
                  padre:path: nu
                  padre:value_default: '0.5'
                  padre:value_type: float (0, 1]
                  rdfs:comment: An upper bound on the fraction of training errors
                    and a lower bound of the fraction of support vectors. Should be
                    in the interval (0, 1].
                  rdfs:label: nu
                algorithm:
                  '@schema':
                    '@id': padre:NuSVC/nu
                    '@type': padre:ModelParameters
                    padre:configures: padre:NuSVC
              - '@schema':
                  '@id': padre:sklearn.svm.classes.NuSVC/kernel
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.svm.classes.NuSVC/kernel
                  padre:implements: padre:NuSVC/kernel
                  padre:optional: 'True'
                  padre:path: kernel
                  padre:value_default: '''rbf'''
                  padre:value_type: '{''linear'', ''poly'', ''rbf'', ''sigmoid'', ''precomputed'',
                  a callable in shape (n_samples, n_samples)}'
                  rdfs:comment: Specifies the kernel type to be used in the algorithm.
                  rdfs:label: kernel
                algorithm:
                  '@schema':
                    '@id': padre:NuSVC/kernel
                    '@type': padre:ModelParameters
                    padre:configures: padre:NuSVC
              - '@schema':
                  '@id': padre:sklearn.svm.classes.NuSVC/poly_degree
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.svm.classes.NuSVC/poly_degree
                  padre:implements: padre:NuSVC/poly_degree
                  padre:optional: 'True'
                  padre:path: degree
                  padre:value_default: '3'
                  padre:value_type: integer
                  rdfs:comment: 'Degree of the polynomial kernel function (''poly''). '
                  rdfs:label: poly_degree
                algorithm:
                  '@schema':
                    '@id': padre:NuSVC/poly_degree
                    '@type': padre:ModelParameters
                    padre:configures: padre:NuSVC
              - '@schema':
                  '@id': padre:sklearn.svm.classes.NuSVC/kernel_coefficient
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.svm.classes.NuSVC/kernel_coefficient
                  padre:implements: padre:NuSVC/kernel_coefficient
                  padre:optional: 'True'
                  padre:path: gamma
                  padre:value_default: '''auto'''
                  padre:value_type: '{float, ''auto''}'
                  rdfs:comment: Kernel coefficient for 'rbf', 'poly' and 'sigmoid'.
                    If kernel_coefficient is 'auto' then 1/n_features will be used instead.
                  rdfs:label: kernel_coefficient
                algorithm:
                  '@schema':
                    '@id': padre:NuSVC/kernel_coefficient
                    '@type': padre:ModelParameters
                    padre:configures: padre:NuSVC
              - '@schema':
                  '@id': padre:sklearn.svm.classes.NuSVC/independent_kernel_term
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.svm.classes.NuSVC/independent_kernel_term
                  padre:implements: padre:NuSVC/independent_kernel_term
                  padre:optional: 'True'
                  padre:path: coef0
                  padre:value_default: '0.0'
                  padre:value_type: float
                  rdfs:comment: Independent term in kernel function. It is only
                    significant in 'poly' and 'sigmoid'.
                  rdfs:label: independent_kernel_term
                algorithm:
                  '@schema':
                    '@id': padre:NuSVC/independent_kernel_term
                    '@type': padre:ModelParameters
                    padre:configures: padre:NuSVC
              - '@schema':
                  '@id': padre:sklearn.svm.classes.NuSVC/shrinking
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.svm.classes.NuSVC/shrinking
                  padre:implements: padre:NuSVC/shrinking
                  padre:optional: 'True'
                  padre:path: shrinking
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: Whether to use the shrinking heuristic.
                  rdfs:label: shrinking
                algorithm:
                  '@schema':
                    '@id': padre:NuSVC/shrinking
                    '@type': padre:ModelParameters
                    padre:configures: padre:NuSVC
              - '@schema':
                  '@id': padre:sklearn.svm.classes.NuSVC/probability
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.svm.classes.NuSVC/probability
                  padre:implements: padre:NuSVC/probability
                  padre:optional: 'True'
                  padre:path: probability
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: Whether to enable probability estimates. This must
                    be enabled prior to calling fit, and will slow down that method.
                  rdfs:label: probability
                algorithm:
                  '@schema':
                    '@id': padre:NuSVC/probability
                    '@type': padre:ModelParameters
                    padre:configures: padre:NuSVC
              - '@schema':
                  '@id': padre:sklearn.svm.classes.NuSVC/tolerance
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.svm.classes.NuSVC/tolerance
                  padre:implements: padre:NuSVC/tolerance
                  padre:optional: 'True'
                  padre:path: tol
                  padre:value_default: '0.001'
                  padre:value_type: float
                  rdfs:comment: Tolerance for stopping criterion.
                  rdfs:label: tolerance
                algorithm:
                  '@schema':
                    '@id': padre:NuSVC/tolerance
                    '@type': padre:ModelParameters
                    padre:configures: padre:NuSVC
              - '@schema':
                  '@id': padre:sklearn.svm.classes.NuSVC/class_weight
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.svm.classes.NuSVC/class_weight
                  padre:implements: padre:NuSVC/class_weight
                  padre:optional: 'True'
                  padre:path: class_weight
                  padre:value_default: None
                  padre:value_type: '{dictionary with weights for all calsses, ''balanced'',
                  None}'
                  rdfs:comment: "Weights the classes. The \u201Cbalanced\u201D mode\
                  \ uses the values of y to automatically adjust weights inversely\
                  \ proportional to class frequencies in the input data as n_samples\
                  \ / (n_classes * np.bincount(y))."
                  rdfs:label: class_weight
                algorithm:
                  '@schema':
                    '@id': padre:NuSVC/class_weight
                    '@type': padre:ModelParameters
                    padre:configures: padre:NuSVC
              - '@schema':
                  '@id': padre:sklearn.svm.classes.NuSVC/verbose
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.svm.classes.NuSVC/verbose
                  padre:implements: padre:NuSVC/verbose
                  padre:optional: 'True'
                  padre:path: verbose
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: Enable verbose output.
                  rdfs:label: verbose
                algorithm:
                  '@schema':
                    '@id': padre:NuSVC/verbose
                    '@type': padre:ModelParameters
                    padre:configures: padre:NuSVC
              - '@schema':
                  '@id': padre:sklearn.svm.classes.NuSVC/decision_function_shape
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.svm.classes.NuSVC/decision_function_shape
                  padre:implements: padre:NuSVC/decision_function_shape
                  padre:optional: 'False'
                  padre:path: decision_function_shape
                  padre:value_default: 'False'
                  padre:value_type: '{''ovo'', ''ovr''}'
                  rdfs:comment: Whether to return a one-vs-rest ('ovr') decision
                    function of shape (n_samples, n_classes) as all other classifiers,
                    or the original one-vs-one ('ovo') decision function of libsvm which
                    has shape (n_samples, n_classes * (n_classes - 1) / 2).
                  rdfs:label: decision_function_shape
                algorithm:
                  '@schema':
                    '@id': padre:NuSVC/decision_function_shape
                    '@type': padre:ModelParameters
                    padre:configures: padre:NuSVC
              - '@schema':
                  '@id': padre:sklearn.svm.classes.NuSVC/random_state
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.svm.classes.NuSVC/random_state
                  padre:implements: padre:NuSVC/random_state
                  padre:optional: 'True'
                  padre:path: random_state
                  padre:value_default: None
                  padre:value_type: '{integer, RandomState instance, None}'
                  rdfs:comment: The seed of the pseudo random number generator to
                    use when shuffling the data. If int, random_state is the seed used
                    by the random number generator; If RandomState instance, random_state
                    is the random number generator; If None, the random number generator
                    is the RandomState instance used by np.random.
                  rdfs:label: random_state
                algorithm:
                  '@schema':
                    '@id': padre:NuSVC/random_state
                    '@type': padre:ModelParameters
                    padre:configures: padre:NuSVC
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.svm.classes.NuSVC/cache_size
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.svm.classes.NuSVC/cache_size
                  padre:implements: padre:NuSVC/cache_size
                  padre:optional: 'True'
                  padre:path: cache_size
                  padre:value_default: '200'
                  padre:value_type: float
                  rdfs:comment: Specify the size of the kernel cache (in MB).
                  rdfs:label: cache_size
                algorithm:
                  '@schema':
                    '@id': padre:NuSVC/cache_size
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:NuSVC
              - '@schema':
                  '@id': padre:sklearn.svm.classes.NuSVC/max_iterations
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.svm.classes.NuSVC/max_iterations
                  padre:implements: padre:NuSVC/max_iterations
                  padre:optional: 'True'
                  padre:path: max_iter
                  padre:value_default: '-1'
                  padre:value_type: integer
                  rdfs:comment: Hard limit on iterations within solver, or -1 for
                    no limit.
                  rdfs:label: max_iterations
                algorithm:
                  '@schema':
                    '@id': padre:NuSVC/max_iterations
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:NuSVC
    :svm.classes.NuSVR:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.svm.classes.NuSVR
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:NuSVR
            rdfs:comment: null
            rdfs:label: nu-support vector regression
          algorithm:
            '@schema':
              '@id': padre:NuSVR
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: nu-support vector regression
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.svm.classes.NuSVR/error_penalty
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.svm.classes.NuSVR/error_penalty
                  padre:implements: padre:NuSVR/error_penalty
                  padre:optional: 'True'
                  padre:path: C
                  padre:value_default: '1.0'
                  padre:value_type: float
                  rdfs:comment: Penalty parameter of the error term.
                  rdfs:label: error_penalty
                algorithm:
                  '@schema':
                    '@id': padre:NuSVR/error_penalty
                    '@type': padre:ModelParameters
                    padre:configures: padre:NuSVR
              - '@schema':
                  '@id': padre:sklearn.svm.classes.NuSVR/nu
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.svm.classes.NuSVR/nu
                  padre:implements: padre:NuSVR/nu
                  padre:optional: 'True'
                  padre:path: nu
                  padre:value_default: '0.5'
                  padre:value_type: float (0, 1]
                  rdfs:comment: An upper bound on the fraction of training errors
                    and a lower bound of the fraction of support vectors. Should be
                    in the interval (0, 1].
                  rdfs:label: nu
                algorithm:
                  '@schema':
                    '@id': padre:NuSVR/nu
                    '@type': padre:ModelParameters
                    padre:configures: padre:NuSVR
              - '@schema':
                  '@id': padre:sklearn.svm.classes.NuSVR/kernel
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.svm.classes.NuSVR/kernel
                  padre:implements: padre:NuSVR/kernel
                  padre:optional: 'True'
                  padre:path: kernel
                  padre:value_default: '''rbf'''
                  padre:value_type: '{''linear'', ''poly'', ''rbf'', ''sigmoid'', ''precomputed'',
                  a callable in shape (n_samples, n_samples)}'
                  rdfs:comment: Specifies the kernel type to be used in the algorithm.
                  rdfs:label: kernel
                algorithm:
                  '@schema':
                    '@id': padre:NuSVR/kernel
                    '@type': padre:ModelParameters
                    padre:configures: padre:NuSVR
              - '@schema':
                  '@id': padre:sklearn.svm.classes.NuSVR/poly_degree
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.svm.classes.NuSVR/poly_degree
                  padre:implements: padre:NuSVR/poly_degree
                  padre:optional: 'True'
                  padre:path: degree
                  padre:value_default: '3'
                  padre:value_type: integer
                  rdfs:comment: 'Degree of the polynomial kernel function (''poly''). '
                  rdfs:label: poly_degree
                algorithm:
                  '@schema':
                    '@id': padre:NuSVR/poly_degree
                    '@type': padre:ModelParameters
                    padre:configures: padre:NuSVR
              - '@schema':
                  '@id': padre:sklearn.svm.classes.NuSVR/kernel_coefficient
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.svm.classes.NuSVR/kernel_coefficient
                  padre:implements: padre:NuSVR/kernel_coefficient
                  padre:optional: 'True'
                  padre:path: gamma
                  padre:value_default: '''auto'''
                  padre:value_type: '{float, ''auto''}'
                  rdfs:comment: Kernel coefficient for 'rbf', 'poly' and 'sigmoid'.
                    If kernel_coefficient is 'auto' then 1/n_features will be used instead.
                  rdfs:label: kernel_coefficient
                algorithm:
                  '@schema':
                    '@id': padre:NuSVR/kernel_coefficient
                    '@type': padre:ModelParameters
                    padre:configures: padre:NuSVR
              - '@schema':
                  '@id': padre:sklearn.svm.classes.NuSVR/independent_kernel_term
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.svm.classes.NuSVR/independent_kernel_term
                  padre:implements: padre:NuSVR/independent_kernel_term
                  padre:optional: 'True'
                  padre:path: coef0
                  padre:value_default: '0.0'
                  padre:value_type: float
                  rdfs:comment: Independent term in kernel function. It is only
                    significant in 'poly' and 'sigmoid'.
                  rdfs:label: independent_kernel_term
                algorithm:
                  '@schema':
                    '@id': padre:NuSVR/independent_kernel_term
                    '@type': padre:ModelParameters
                    padre:configures: padre:NuSVR
              - '@schema':
                  '@id': padre:sklearn.svm.classes.NuSVR/shrinking
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.svm.classes.NuSVR/shrinking
                  padre:implements: padre:NuSVR/shrinking
                  padre:optional: 'True'
                  padre:path: shrinking
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: Whether to use the shrinking heuristic.
                  rdfs:label: shrinking
                algorithm:
                  '@schema':
                    '@id': padre:NuSVR/shrinking
                    '@type': padre:ModelParameters
                    padre:configures: padre:NuSVR
              - '@schema':
                  '@id': padre:sklearn.svm.classes.NuSVR/tolerance
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.svm.classes.NuSVR/tolerance
                  padre:implements: padre:NuSVR/tolerance
                  padre:optional: 'True'
                  padre:path: tol
                  padre:value_default: '0.001'
                  padre:value_type: float
                  rdfs:comment: Tolerance for stopping criterion.
                  rdfs:label: tolerance
                algorithm:
                  '@schema':
                    '@id': padre:NuSVR/tolerance
                    '@type': padre:ModelParameters
                    padre:configures: padre:NuSVR
              - '@schema':
                  '@id': padre:sklearn.svm.classes.NuSVR/verbose
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.svm.classes.NuSVR/verbose
                  padre:implements: padre:NuSVR/verbose
                  padre:optional: 'False'
                  padre:path: verbose
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: Enable verbose output.
                  rdfs:label: verbose
                algorithm:
                  '@schema':
                    '@id': padre:NuSVR/verbose
                    '@type': padre:ModelParameters
                    padre:configures: padre:NuSVR
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.svm.classes.NuSVR/cache_size
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.svm.classes.NuSVR/cache_size
                  padre:implements: padre:NuSVR/cache_size
                  padre:optional: 'True'
                  padre:path: cache_size
                  padre:value_default: '200'
                  padre:value_type: float
                  rdfs:comment: Specify the size of the kernel cache (in MB).
                  rdfs:label: cache_size
                algorithm:
                  '@schema':
                    '@id': padre:NuSVR/cache_size
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:NuSVR
              - '@schema':
                  '@id': padre:sklearn.svm.classes.NuSVR/max_iterations
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.svm.classes.NuSVR/max_iterations
                  padre:implements: padre:NuSVR/max_iterations
                  padre:optional: 'True'
                  padre:path: max_iter
                  padre:value_default: '-1'
                  padre:value_type: integer
                  rdfs:comment: Hard limit on iterations within solver, or -1 for
                    no limit.
                  rdfs:label: max_iterations
                algorithm:
                  '@schema':
                    '@id': padre:NuSVR/max_iterations
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:NuSVR
    :svm.classes.OneClassSVM:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.svm.classes.OneClassSVM
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:OneClassSVM
            rdfs:comment: null
            rdfs:label: one-class support vector machine
          algorithm:
            '@schema':
              '@id': padre:OneClassSVM
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: one-class support vector machine
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.svm.classes.OneClassSVM/nu
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.svm.classes.OneClassSVM/nu
                  padre:implements: padre:OneClassSVM/nu
                  padre:optional: 'True'
                  padre:path: nu
                  padre:value_default: '0.5'
                  padre:value_type: float (0, 1]
                  rdfs:comment: An upper bound on the fraction of training errors
                    and a lower bound of the fraction of support vectors. Should be
                    in the interval (0, 1].
                  rdfs:label: nu
                algorithm:
                  '@schema':
                    '@id': padre:OneClassSVM/nu
                    '@type': padre:ModelParameters
                    padre:configures: padre:OneClassSVM
              - '@schema':
                  '@id': padre:sklearn.svm.classes.OneClassSVM/kernel
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.svm.classes.OneClassSVM/kernel
                  padre:implements: padre:OneClassSVM/kernel
                  padre:optional: 'True'
                  padre:path: kernel
                  padre:value_default: '''rbf'''
                  padre:value_type: '{''linear'', ''poly'', ''rbf'', ''sigmoid'', ''precomputed'',
                  a callable in shape (n_samples, n_samples)}'
                  rdfs:comment: Specifies the kernel type to be used in the algorithm.
                  rdfs:label: kernel
                algorithm:
                  '@schema':
                    '@id': padre:OneClassSVM/kernel
                    '@type': padre:ModelParameters
                    padre:configures: padre:OneClassSVM
              - '@schema':
                  '@id': padre:sklearn.svm.classes.OneClassSVM/poly_degree
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.svm.classes.OneClassSVM/poly_degree
                  padre:implements: padre:OneClassSVM/poly_degree
                  padre:optional: 'True'
                  padre:path: degree
                  padre:value_default: '3'
                  padre:value_type: integer
                  rdfs:comment: 'Degree of the polynomial kernel function (''poly''). '
                  rdfs:label: poly_degree
                algorithm:
                  '@schema':
                    '@id': padre:OneClassSVM/poly_degree
                    '@type': padre:ModelParameters
                    padre:configures: padre:OneClassSVM
              - '@schema':
                  '@id': padre:sklearn.svm.classes.OneClassSVM/kernel_coefficient
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.svm.classes.OneClassSVM/kernel_coefficient
                  padre:implements: padre:OneClassSVM/kernel_coefficient
                  padre:optional: 'True'
                  padre:path: gamma
                  padre:value_default: '''auto'''
                  padre:value_type: '{float, ''auto''}'
                  rdfs:comment: Kernel coefficient for 'rbf', 'poly' and 'sigmoid'.
                    If kernel_coefficient is 'auto' then 1/n_features will be used instead.
                  rdfs:label: kernel_coefficient
                algorithm:
                  '@schema':
                    '@id': padre:OneClassSVM/kernel_coefficient
                    '@type': padre:ModelParameters
                    padre:configures: padre:OneClassSVM
              - '@schema':
                  '@id': padre:sklearn.svm.classes.OneClassSVM/independent_kernel_term
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.svm.classes.OneClassSVM/independent_kernel_term
                  padre:implements: padre:OneClassSVM/independent_kernel_term
                  padre:optional: 'True'
                  padre:path: coef0
                  padre:value_default: '0.0'
                  padre:value_type: float
                  rdfs:comment: Independent term in kernel function. It is only
                    significant in 'poly' and 'sigmoid'.
                  rdfs:label: independent_kernel_term
                algorithm:
                  '@schema':
                    '@id': padre:OneClassSVM/independent_kernel_term
                    '@type': padre:ModelParameters
                    padre:configures: padre:OneClassSVM
              - '@schema':
                  '@id': padre:sklearn.svm.classes.OneClassSVM/shrinking
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.svm.classes.OneClassSVM/shrinking
                  padre:implements: padre:OneClassSVM/shrinking
                  padre:optional: 'True'
                  padre:path: shrinking
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: Whether to use the shrinking heuristic.
                  rdfs:label: shrinking
                algorithm:
                  '@schema':
                    '@id': padre:OneClassSVM/shrinking
                    '@type': padre:ModelParameters
                    padre:configures: padre:OneClassSVM
              - '@schema':
                  '@id': padre:sklearn.svm.classes.OneClassSVM/tolerance
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.svm.classes.OneClassSVM/tolerance
                  padre:implements: padre:OneClassSVM/tolerance
                  padre:optional: 'True'
                  padre:path: tol
                  padre:value_default: '0.001'
                  padre:value_type: float
                  rdfs:comment: Tolerance for stopping criterion.
                  rdfs:label: tolerance
                algorithm:
                  '@schema':
                    '@id': padre:OneClassSVM/tolerance
                    '@type': padre:ModelParameters
                    padre:configures: padre:OneClassSVM
              - '@schema':
                  '@id': padre:sklearn.svm.classes.OneClassSVM/verbose
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.svm.classes.OneClassSVM/verbose
                  padre:implements: padre:OneClassSVM/verbose
                  padre:optional: 'False'
                  padre:path: verbose
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: Enable verbose output.
                  rdfs:label: verbose
                algorithm:
                  '@schema':
                    '@id': padre:OneClassSVM/verbose
                    '@type': padre:ModelParameters
                    padre:configures: padre:OneClassSVM
              - '@schema':
                  '@id': padre:sklearn.svm.classes.OneClassSVM/random_state
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.svm.classes.OneClassSVM/random_state
                  padre:implements: padre:OneClassSVM/random_state
                  padre:optional: 'True'
                  padre:path: random_state
                  padre:value_default: None
                  padre:value_type: '{integer, RandomState instance, None}'
                  rdfs:comment: The seed of the pseudo random number generator to
                    use when shuffling the data. If int, random_state is the seed used
                    by the random number generator; If RandomState instance, random_state
                    is the random number generator; If None, the random number generator
                    is the RandomState instance used by np.random.
                  rdfs:label: random_state
                algorithm:
                  '@schema':
                    '@id': padre:OneClassSVM/random_state
                    '@type': padre:ModelParameters
                    padre:configures: padre:OneClassSVM
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.svm.classes.OneClassSVM/cache_size
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.svm.classes.OneClassSVM/cache_size
                  padre:implements: padre:OneClassSVM/cache_size
                  padre:optional: 'True'
                  padre:path: cache_size
                  padre:value_default: '200'
                  padre:value_type: float
                  rdfs:comment: Specify the size of the kernel cache (in MB).
                  rdfs:label: cache_size
                algorithm:
                  '@schema':
                    '@id': padre:OneClassSVM/cache_size
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:OneClassSVM
              - '@schema':
                  '@id': padre:sklearn.svm.classes.OneClassSVM/max_iterations
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.svm.classes.OneClassSVM/max_iterations
                  padre:implements: padre:OneClassSVM/max_iterations
                  padre:optional: 'True'
                  padre:path: max_iter
                  padre:value_default: '-1'
                  padre:value_type: integer
                  rdfs:comment: Hard limit on iterations within solver, or -1 for
                    no limit.
                  rdfs:label: max_iterations
                algorithm:
                  '@schema':
                    '@id': padre:OneClassSVM/max_iterations
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:OneClassSVM
    :svm.classes.SVC:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.svm.classes.SVC
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:SVC
            rdfs:comment: null
            rdfs:label: c-oja pas vector classification
          algorithm:
            '@schema':
              '@id': padre:SVC
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: c-oja pas vector classification
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.svm.classes.SVC/error_penalty
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.svm.classes.SVC/error_penalty
                  padre:implements: padre:SVC/error_penalty
                  padre:optional: 'True'
                  padre:path: C
                  padre:value_default: '1.0'
                  padre:value_type: float
                  rdfs:comment: Penalty parameter of the error term.
                  rdfs:label: error_penalty
                algorithm:
                  '@schema':
                    '@id': padre:SVC/error_penalty
                    '@type': padre:ModelParameters
                    padre:configures: padre:SVC
              - '@schema':
                  '@id': padre:sklearn.svm.classes.SVC/kernel
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.svm.classes.SVC/kernel
                  padre:implements: padre:SVC/kernel
                  padre:optional: 'True'
                  padre:path: kernel
                  padre:value_default: '''rbf'''
                  padre:value_type: '{''linear'', ''poly'', ''rbf'', ''sigmoid'', ''precomputed'',
                  a callable in shape (n_samples, n_samples)}'
                  rdfs:comment: Specifies the kernel type to be used in the algorithm.
                  rdfs:label: kernel
                algorithm:
                  '@schema':
                    '@id': padre:SVC/kernel
                    '@type': padre:ModelParameters
                    padre:configures: padre:SVC
              - '@schema':
                  '@id': padre:sklearn.svm.classes.SVC/poly_degree
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.svm.classes.SVC/poly_degree
                  padre:implements: padre:SVC/poly_degree
                  padre:optional: 'True'
                  padre:path: degree
                  padre:value_default: '3'
                  padre:value_type: integer
                  rdfs:comment: 'Degree of the polynomial kernel function (''poly''). '
                  rdfs:label: poly_degree
                algorithm:
                  '@schema':
                    '@id': padre:SVC/poly_degree
                    '@type': padre:ModelParameters
                    padre:configures: padre:SVC
              - '@schema':
                  '@id': padre:sklearn.svm.classes.SVC/kernel_coefficient
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.svm.classes.SVC/kernel_coefficient
                  padre:implements: padre:SVC/kernel_coefficient
                  padre:optional: 'True'
                  padre:path: gamma
                  padre:value_default: '''auto'''
                  padre:value_type: '{float, ''auto''}'
                  rdfs:comment: Kernel coefficient for 'rbf', 'poly' and 'sigmoid'.
                    If kernel_coefficient is 'auto' then 1/n_features will be used instead.
                  rdfs:label: kernel_coefficient
                algorithm:
                  '@schema':
                    '@id': padre:SVC/kernel_coefficient
                    '@type': padre:ModelParameters
                    padre:configures: padre:SVC
              - '@schema':
                  '@id': padre:sklearn.svm.classes.SVC/independent_kernel_term
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.svm.classes.SVC/independent_kernel_term
                  padre:implements: padre:SVC/independent_kernel_term
                  padre:optional: 'True'
                  padre:path: coef0
                  padre:value_default: '0.0'
                  padre:value_type: float
                  rdfs:comment: Independent term in kernel function. It is only
                    significant in 'poly' and 'sigmoid'.
                  rdfs:label: independent_kernel_term
                algorithm:
                  '@schema':
                    '@id': padre:SVC/independent_kernel_term
                    '@type': padre:ModelParameters
                    padre:configures: padre:SVC
              - '@schema':
                  '@id': padre:sklearn.svm.classes.SVC/probability
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.svm.classes.SVC/probability
                  padre:implements: padre:SVC/probability
                  padre:optional: 'True'
                  padre:path: probability
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: Whether to enable probability estimates. This must
                    be enabled prior to calling fit, and will slow down that method.
                  rdfs:label: probability
                algorithm:
                  '@schema':
                    '@id': padre:SVC/probability
                    '@type': padre:ModelParameters
                    padre:configures: padre:SVC
              - '@schema':
                  '@id': padre:sklearn.svm.classes.SVC/shrinking
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.svm.classes.SVC/shrinking
                  padre:implements: padre:SVC/shrinking
                  padre:optional: 'True'
                  padre:path: shrinking
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: Whether to use the shrinking heuristic.
                  rdfs:label: shrinking
                algorithm:
                  '@schema':
                    '@id': padre:SVC/shrinking
                    '@type': padre:ModelParameters
                    padre:configures: padre:SVC
              - '@schema':
                  '@id': padre:sklearn.svm.classes.SVC/tolerance
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.svm.classes.SVC/tolerance
                  padre:implements: padre:SVC/tolerance
                  padre:optional: 'True'
                  padre:path: tol
                  padre:value_default: '0.001'
                  padre:value_type: float
                  rdfs:comment: Tolerance for stopping criterion.
                  rdfs:label: tolerance
                algorithm:
                  '@schema':
                    '@id': padre:SVC/tolerance
                    '@type': padre:ModelParameters
                    padre:configures: padre:SVC
              - '@schema':
                  '@id': padre:sklearn.svm.classes.SVC/class_weight
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.svm.classes.SVC/class_weight
                  padre:implements: padre:SVC/class_weight
                  padre:optional: 'True'
                  padre:path: class_weight
                  padre:value_default: None
                  padre:value_type: '{dictionary with weights for all calsses, ''balanced'',
                  None}'
                  rdfs:comment: "Weights the classes. The \u201Cbalanced\u201D mode\
                  \ uses the values of y to automatically adjust weights inversely\
                  \ proportional to class frequencies in the input data as n_samples\
                  \ / (n_classes * np.bincount(y))."
                  rdfs:label: class_weight
                algorithm:
                  '@schema':
                    '@id': padre:SVC/class_weight
                    '@type': padre:ModelParameters
                    padre:configures: padre:SVC
              - '@schema':
                  '@id': padre:sklearn.svm.classes.SVC/verbose
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.svm.classes.SVC/verbose
                  padre:implements: padre:SVC/verbose
                  padre:optional: 'True'
                  padre:path: verbose
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: Enable verbose output.
                  rdfs:label: verbose
                algorithm:
                  '@schema':
                    '@id': padre:SVC/verbose
                    '@type': padre:ModelParameters
                    padre:configures: padre:SVC
              - '@schema':
                  '@id': padre:sklearn.svm.classes.SVC/decision_function_shape
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.svm.classes.SVC/decision_function_shape
                  padre:implements: padre:SVC/decision_function_shape
                  padre:optional: 'False'
                  padre:path: decision_function_shape
                  padre:value_default: 'False'
                  padre:value_type: '{''ovo'', ''ovr''}'
                  rdfs:comment: Whether to return a one-vs-rest ('ovr') decision
                    function of shape (n_samples, n_classes) as all other classifiers,
                    or the original one-vs-one ('ovo') decision function of libsvm which
                    has shape (n_samples, n_classes * (n_classes - 1) / 2).
                  rdfs:label: decision_function_shape
                algorithm:
                  '@schema':
                    '@id': padre:SVC/decision_function_shape
                    '@type': padre:ModelParameters
                    padre:configures: padre:SVC
              - '@schema':
                  '@id': padre:sklearn.svm.classes.SVC/random_state
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.svm.classes.SVC/random_state
                  padre:implements: padre:SVC/random_state
                  padre:optional: 'True'
                  padre:path: random_state
                  padre:value_default: None
                  padre:value_type: '{integer, RandomState instance, None}'
                  rdfs:comment: The seed of the pseudo random number generator to
                    use when shuffling the data. If int, random_state is the seed used
                    by the random number generator; If RandomState instance, random_state
                    is the random number generator; If None, the random number generator
                    is the RandomState instance used by np.random.
                  rdfs:label: random_state
                algorithm:
                  '@schema':
                    '@id': padre:SVC/random_state
                    '@type': padre:ModelParameters
                    padre:configures: padre:SVC
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.svm.classes.SVC/cache_size
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.svm.classes.SVC/cache_size
                  padre:implements: padre:SVC/cache_size
                  padre:optional: 'True'
                  padre:path: cache_size
                  padre:value_default: '200'
                  padre:value_type: float
                  rdfs:comment: Specify the size of the kernel cache (in MB).
                  rdfs:label: cache_size
                algorithm:
                  '@schema':
                    '@id': padre:SVC/cache_size
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:SVC
              - '@schema':
                  '@id': padre:sklearn.svm.classes.SVC/max_iterations
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.svm.classes.SVC/max_iterations
                  padre:implements: padre:SVC/max_iterations
                  padre:optional: 'True'
                  padre:path: max_iter
                  padre:value_default: '-1'
                  padre:value_type: integer
                  rdfs:comment: Hard limit on iterations within solver, or -1 for
                    no limit.
                  rdfs:label: max_iterations
                algorithm:
                  '@schema':
                    '@id': padre:SVC/max_iterations
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:SVC
    :svm.classes.SVR:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.svm.classes.SVR
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:SVR
            rdfs:comment: null
            rdfs:label: epsilon-support vector regression
          algorithm:
            '@schema':
              '@id': padre:SVR
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: epsilon-support vector regression
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.svm.classes.SVR/error_penalty
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.svm.classes.SVR/error_penalty
                  padre:implements: padre:SVR/error_penalty
                  padre:optional: 'True'
                  padre:path: C
                  padre:value_default: '1.0'
                  padre:value_type: float
                  rdfs:comment: Penalty parameter of the error term.
                  rdfs:label: error_penalty
                algorithm:
                  '@schema':
                    '@id': padre:SVR/error_penalty
                    '@type': padre:ModelParameters
                    padre:configures: padre:SVR
              - '@schema':
                  '@id': padre:sklearn.svm.classes.SVR/epsilon
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.svm.classes.SVR/epsilon
                  padre:implements: padre:SVR/epsilon
                  padre:optional: 'True'
                  padre:path: epsilon
                  padre:value_default: '0.1'
                  padre:value_type: float
                  rdfs:comment: Epsilon in the epsilon-SVR model. It specifies the
                    epsilon-tube within which no penalty is associated in the training
                    loss function with points predicted within a distance epsilon from
                    the actual value.
                  rdfs:label: epsilon
                algorithm:
                  '@schema':
                    '@id': padre:SVR/epsilon
                    '@type': padre:ModelParameters
                    padre:configures: padre:SVR
              - '@schema':
                  '@id': padre:sklearn.svm.classes.SVR/kernel
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.svm.classes.SVR/kernel
                  padre:implements: padre:SVR/kernel
                  padre:optional: 'True'
                  padre:path: kernel
                  padre:value_default: '''rbf'''
                  padre:value_type: '{''linear'', ''poly'', ''rbf'', ''sigmoid'', ''precomputed'',
                  a callable in shape (n_samples, n_samples)}'
                  rdfs:comment: Specifies the kernel type to be used in the algorithm.
                  rdfs:label: kernel
                algorithm:
                  '@schema':
                    '@id': padre:SVR/kernel
                    '@type': padre:ModelParameters
                    padre:configures: padre:SVR
              - '@schema':
                  '@id': padre:sklearn.svm.classes.SVR/poly_degree
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.svm.classes.SVR/poly_degree
                  padre:implements: padre:SVR/poly_degree
                  padre:optional: 'True'
                  padre:path: degree
                  padre:value_default: '3'
                  padre:value_type: integer
                  rdfs:comment: 'Degree of the polynomial kernel function (''poly''). '
                  rdfs:label: poly_degree
                algorithm:
                  '@schema':
                    '@id': padre:SVR/poly_degree
                    '@type': padre:ModelParameters
                    padre:configures: padre:SVR
              - '@schema':
                  '@id': padre:sklearn.svm.classes.SVR/kernel_coefficient
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.svm.classes.SVR/kernel_coefficient
                  padre:implements: padre:SVR/kernel_coefficient
                  padre:optional: 'True'
                  padre:path: gamma
                  padre:value_default: '''auto'''
                  padre:value_type: float or 'auto'
                  rdfs:comment: Kernel coefficient for 'rbf', 'poly' and 'sigmoid'.
                    If kernel_coefficient is 'auto' then 1/n_features will be used instead.
                  rdfs:label: kernel_coefficient
                algorithm:
                  '@schema':
                    '@id': padre:SVR/kernel_coefficient
                    '@type': padre:ModelParameters
                    padre:configures: padre:SVR
              - '@schema':
                  '@id': padre:sklearn.svm.classes.SVR/independent_kernel_term
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.svm.classes.SVR/independent_kernel_term
                  padre:implements: padre:SVR/independent_kernel_term
                  padre:optional: 'True'
                  padre:path: coef0
                  padre:value_default: '0.0'
                  padre:value_type: float
                  rdfs:comment: Independent term in kernel function. It is only
                    significant in 'poly' and 'sigmoid'.
                  rdfs:label: independent_kernel_term
                algorithm:
                  '@schema':
                    '@id': padre:SVR/independent_kernel_term
                    '@type': padre:ModelParameters
                    padre:configures: padre:SVR
              - '@schema':
                  '@id': padre:sklearn.svm.classes.SVR/shrinking
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.svm.classes.SVR/shrinking
                  padre:implements: padre:SVR/shrinking
                  padre:optional: 'True'
                  padre:path: shrinking
                  padre:value_default: 'True'
                  padre:value_type: boolean
                  rdfs:comment: Whether to use the shrinking heuristic.
                  rdfs:label: shrinking
                algorithm:
                  '@schema':
                    '@id': padre:SVR/shrinking
                    '@type': padre:ModelParameters
                    padre:configures: padre:SVR
              - '@schema':
                  '@id': padre:sklearn.svm.classes.SVR/tolerance
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.svm.classes.SVR/tolerance
                  padre:implements: padre:SVR/tolerance
                  padre:optional: 'True'
                  padre:path: tol
                  padre:value_default: '0.001'
                  padre:value_type: float
                  rdfs:comment: Tolerance for stopping criterion.
                  rdfs:label: tolerance
                algorithm:
                  '@schema':
                    '@id': padre:SVR/tolerance
                    '@type': padre:ModelParameters
                    padre:configures: padre:SVR
              - '@schema':
                  '@id': padre:sklearn.svm.classes.SVR/verbose
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.svm.classes.SVR/verbose
                  padre:implements: padre:SVR/verbose
                  padre:optional: 'False'
                  padre:path: verbose
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: Enable verbose output.
                  rdfs:label: verbose
                algorithm:
                  '@schema':
                    '@id': padre:SVR/verbose
                    '@type': padre:ModelParameters
                    padre:configures: padre:SVR
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.svm.classes.SVR/cache_size
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.svm.classes.SVR/cache_size
                  padre:implements: padre:SVR/cache_size
                  padre:optional: 'True'
                  padre:path: cache_size
                  padre:value_default: '200'
                  padre:value_type: float
                  rdfs:comment: Specify the size of the kernel cache (in MB).
                  rdfs:label: cache_size
                algorithm:
                  '@schema':
                    '@id': padre:SVR/cache_size
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:SVR
              - '@schema':
                  '@id': padre:sklearn.svm.classes.SVR/max_iterations
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.svm.classes.SVR/max_iterations
                  padre:implements: padre:SVR/max_iterations
                  padre:optional: 'True'
                  padre:path: max_iter
                  padre:value_default: '-1'
                  padre:value_type: integer
                  rdfs:comment: Hard limit on iterations within solver, or -1 for
                    no limit.
                  rdfs:label: max_iterations
                algorithm:
                  '@schema':
                    '@id': padre:SVR/max_iterations
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:SVR
    !!python/pPath 'tree.tree.DecisionTreeClassifier':
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.tree.tree.DecisionTreeClassifier
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:DecisionTreeClassifier
            rdfs:comment: null
            rdfs:label: decision tree classifier
          algorithm:
            '@schema':
              '@id': padre:DecisionTreeClassifier
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: decision tree classifier
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.tree.tree.DecisionTreeClassifier/split_quality
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.tree.tree.DecisionTreeClassifier/split_quality
                  padre:implements: padre:DecisionTreeClassifier/split_quality
                  padre:optional: 'True'
                  padre:path: criterion
                  padre:value_default: '''gini'''
                  padre:value_type: '{''gini'', ''entropy''}'
                  rdfs:comment: The function to measure the quality of a split.
                  rdfs:label: split_quality
                algorithm:
                  '@schema':
                    '@id': padre:DecisionTreeClassifier/split_quality
                    '@type': padre:ModelParameters
                    padre:configures: padre:DecisionTreeClassifier
              - '@schema':
                  '@id': padre:sklearn.tree.tree.DecisionTreeClassifier/splitting_strategy
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.tree.tree.DecisionTreeClassifier/splitting_strategy
                  padre:implements: padre:DecisionTreeClassifier/splitting_strategy
                  padre:optional: 'True'
                  padre:path: splitter
                  padre:value_default: '''best'''
                  padre:value_type: '{''best'', ''random''}'
                  rdfs:comment: The strategy used to choose the split at each node.
                  rdfs:label: splitting_strategy
                algorithm:
                  '@schema':
                    '@id': padre:DecisionTreeClassifier/splitting_strategy
                    '@type': padre:ModelParameters
                    padre:configures: padre:DecisionTreeClassifier
              - '@schema':
                  '@id': padre:sklearn.tree.tree.DecisionTreeClassifier/max_depth_tree
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.tree.tree.DecisionTreeClassifier/max_depth_tree
                  padre:implements: padre:DecisionTreeClassifier/max_depth_tree
                  padre:optional: 'True'
                  padre:path: max_depth
                  padre:value_default: None
                  padre:value_type: integer
                  rdfs:comment: The maximum depth of the tree.
                  rdfs:label: max_depth_tree
                algorithm:
                  '@schema':
                    '@id': padre:DecisionTreeClassifier/max_depth_tree
                    '@type': padre:ModelParameters
                    padre:configures: padre:DecisionTreeClassifier
              - '@schema':
                  '@id': padre:sklearn.tree.tree.DecisionTreeClassifier/min_samples_split
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.tree.tree.DecisionTreeClassifier/min_samples_split
                  padre:implements: padre:DecisionTreeClassifier/min_samples_split
                  padre:optional: 'True'
                  padre:path: min_samples_split
                  padre:value_default: '2'
                  padre:value_type: '{integer, float}'
                  rdfs:comment: The minimum number of samples required to split
                    an internal node.
                  rdfs:label: min_samples_split
                algorithm:
                  '@schema':
                    '@id': padre:DecisionTreeClassifier/min_samples_split
                    '@type': padre:ModelParameters
                    padre:configures: padre:DecisionTreeClassifier
              - '@schema':
                  '@id': padre:sklearn.tree.tree.DecisionTreeClassifier/min_samples_leaf
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.tree.tree.DecisionTreeClassifier/min_samples_leaf
                  padre:implements: padre:DecisionTreeClassifier/min_samples_leaf
                  padre:optional: 'True'
                  padre:path: min_samples_leaf
                  padre:value_default: '1'
                  padre:value_type: '{integer, float}'
                  rdfs:comment: The minimum number of samples required to be at
                    a leaf node.
                  rdfs:label: min_samples_leaf
                algorithm:
                  '@schema':
                    '@id': padre:DecisionTreeClassifier/min_samples_leaf
                    '@type': padre:ModelParameters
                    padre:configures: padre:DecisionTreeClassifier
              - '@schema':
                  '@id': padre:sklearn.tree.tree.DecisionTreeClassifier/min_weight_fraction_leaf
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.tree.tree.DecisionTreeClassifier/min_weight_fraction_leaf
                  padre:implements: padre:DecisionTreeClassifier/min_weight_fraction_leaf
                  padre:optional: 'True'
                  padre:path: min_weight_fraction_leaf
                  padre:value_default: '1'
                  padre:value_type: float
                  rdfs:comment: The minimum weighted fraction of the sum total of
                    weights (of all the input samples) required to be at a leaf node.
                  rdfs:label: min_weight_fraction_leaf
                algorithm:
                  '@schema':
                    '@id': padre:DecisionTreeClassifier/min_weight_fraction_leaf
                    '@type': padre:ModelParameters
                    padre:configures: padre:DecisionTreeClassifier
              - '@schema':
                  '@id': padre:sklearn.tree.tree.DecisionTreeClassifier/max_features
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.tree.tree.DecisionTreeClassifier/max_features
                  padre:implements: padre:DecisionTreeClassifier/max_features
                  padre:optional: 'True'
                  padre:path: max_features
                  padre:value_default: None
                  padre:value_type: '{integer, float, ''auto'', ''sqrt'', ''log2'',
                  None}'
                  rdfs:comment: The number of features to consider when looking
                    for the best split.
                  rdfs:label: max_features
                algorithm:
                  '@schema':
                    '@id': padre:DecisionTreeClassifier/max_features
                    '@type': padre:ModelParameters
                    padre:configures: padre:DecisionTreeClassifier
              - '@schema':
                  '@id': padre:sklearn.tree.tree.DecisionTreeClassifier/random_state
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.tree.tree.DecisionTreeClassifier/random_state
                  padre:implements: padre:DecisionTreeClassifier/random_state
                  padre:optional: 'True'
                  padre:path: random_state
                  padre:value_default: None
                  padre:value_type: '{integer, RandomState instance, None}'
                  rdfs:comment: The seed of the pseudo random number generator to
                    use when shuffling the data. If int, random_state is the seed used
                    by the random number generator; If RandomState instance, random_state
                    is the random number generator; If None, the random number generator
                    is the RandomState instance used by np.random.
                  rdfs:label: random_state
                algorithm:
                  '@schema':
                    '@id': padre:DecisionTreeClassifier/random_state
                    '@type': padre:ModelParameters
                    padre:configures: padre:DecisionTreeClassifier
              - '@schema':
                  '@id': padre:sklearn.tree.tree.DecisionTreeClassifier/max_leaf_nodes
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.tree.tree.DecisionTreeClassifier/max_leaf_nodes
                  padre:implements: padre:DecisionTreeClassifier/max_leaf_nodes
                  padre:optional: 'True'
                  padre:path: max_leaf_nodes
                  padre:value_default: None
                  padre:value_type: integer
                  rdfs:comment: Grow a tree with max_leaf_nodes in best-first fashion.
                  rdfs:label: max_leaf_nodes
                algorithm:
                  '@schema':
                    '@id': padre:DecisionTreeClassifier/max_leaf_nodes
                    '@type': padre:ModelParameters
                    padre:configures: padre:DecisionTreeClassifier
              - '@schema':
                  '@id': padre:sklearn.tree.tree.DecisionTreeClassifier/min_impurity_decrease
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.tree.tree.DecisionTreeClassifier/min_impurity_decrease
                  padre:implements: padre:DecisionTreeClassifier/min_impurity_decrease
                  padre:optional: 'True'
                  padre:path: min_impurity_decrease
                  padre:value_default: '0'
                  padre:value_type: float
                  rdfs:comment: A node will be split if this split induces a decrease
                    of the impurity greater than or equal to this value.
                  rdfs:label: min_impurity_decrease
                algorithm:
                  '@schema':
                    '@id': padre:DecisionTreeClassifier/min_impurity_decrease
                    '@type': padre:ModelParameters
                    padre:configures: padre:DecisionTreeClassifier
              - '@schema':
                  '@id': padre:sklearn.tree.tree.DecisionTreeClassifier/class_weight
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.tree.tree.DecisionTreeClassifier/class_weight
                  padre:implements: padre:DecisionTreeClassifier/class_weight
                  padre:optional: 'False'
                  padre:path: class_weight
                  padre:value_default: None
                  padre:value_type: '{dict, list of dicts, ''balanced'', None}'
                  rdfs:comment: Weights associated with classes.
                  rdfs:label: class_weight
                algorithm:
                  '@schema':
                    '@id': padre:DecisionTreeClassifier/class_weight
                    '@type': padre:ModelParameters
                    padre:configures: padre:DecisionTreeClassifier
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.tree.tree.DecisionTreeClassifier/presort
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.tree.tree.DecisionTreeClassifier/presort
                  padre:implements: padre:DecisionTreeClassifier/presort
                  padre:optional: 'True'
                  padre:path: presort
                  padre:value_default: '''auto'''
                  padre:value_type: '{boolean, ''auto''}'
                  rdfs:comment: Whether to presort the data to speed up the finding
                    of best splits in fitting.
                  rdfs:label: presort
                algorithm:
                  '@schema':
                    '@id': padre:DecisionTreeClassifier/presort
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:DecisionTreeClassifier
    :tree.tree.DecisionTreeRegressor:
      ;default_model: null
      data:
        estimator:
          '@schema':
            '@id': padre:sklearn.tree.tree.DecisionTreeRegressor
            '@type': padre:Estimator
            padre:documentation: null
            padre:implements: padre:DecisionTreeRegressor
            rdfs:comment: null
            rdfs:label: decision tree regressor
          algorithm:
            '@schema':
              '@id': padre:DecisionTreeRegressor
              '@type': padre:Algorithm
              padre:documentation: null
              rdfs:comment: null
              rdfs:label: decision tree regressor
          parameters:
            execution_parameters: []
            model_parameters:
              - '@schema':
                  '@id': padre:sklearn.tree.tree.DecisionTreeRegressor/split_quality
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.tree.tree.DecisionTreeRegressor/split_quality
                  padre:implements: padre:DecisionTreeRegressor/split_quality
                  padre:optional: 'True'
                  padre:path: criterion
                  padre:value_default: '''mse'''
                  padre:value_type: '{''mse'', ''friedman_mse'', ''mae''}'
                  rdfs:comment: The function to measure the quality of a split.
                  rdfs:label: split_quality
                algorithm:
                  '@schema':
                    '@id': padre:DecisionTreeRegressor/split_quality
                    '@type': padre:ModelParameters
                    padre:configures: padre:DecisionTreeRegressor
              - '@schema':
                  '@id': padre:sklearn.tree.tree.DecisionTreeRegressor/splitting_strategy
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.tree.tree.DecisionTreeRegressor/splitting_strategy
                  padre:implements: padre:DecisionTreeRegressor/splitting_strategy
                  padre:optional: 'True'
                  padre:path: splitter
                  padre:value_default: '''best'''
                  padre:value_type: '{''best'', ''random''}'
                  rdfs:comment: The strategy used to choose the split at each node.
                  rdfs:label: splitting_strategy
                algorithm:
                  '@schema':
                    '@id': padre:DecisionTreeRegressor/splitting_strategy
                    '@type': padre:ModelParameters
                    padre:configures: padre:DecisionTreeRegressor
              - '@schema':
                  '@id': padre:sklearn.tree.tree.DecisionTreeRegressor/max_depth_tree
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.tree.tree.DecisionTreeRegressor/max_depth_tree
                  padre:implements: padre:DecisionTreeRegressor/max_depth_tree
                  padre:optional: 'True'
                  padre:path: max_depth
                  padre:value_default: None
                  padre:value_type: integer
                  rdfs:comment: The maximum depth of the tree.
                  rdfs:label: max_depth_tree
                algorithm:
                  '@schema':
                    '@id': padre:DecisionTreeRegressor/max_depth_tree
                    '@type': padre:ModelParameters
                    padre:configures: padre:DecisionTreeRegressor
              - '@schema':
                  '@id': padre:sklearn.tree.tree.DecisionTreeRegressor/min_samples_split
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.tree.tree.DecisionTreeRegressor/min_samples_split
                  padre:implements: padre:DecisionTreeRegressor/min_samples_split
                  padre:optional: 'True'
                  padre:path: min_samples_split
                  padre:value_default: '2'
                  padre:value_type: '{integer, float}'
                  rdfs:comment: The minimum number of samples required to split
                    an internal node.
                  rdfs:label: min_samples_split
                algorithm:
                  '@schema':
                    '@id': padre:DecisionTreeRegressor/min_samples_split
                    '@type': padre:ModelParameters
                    padre:configures: padre:DecisionTreeRegressor
              - '@schema':
                  '@id': padre:sklearn.tree.tree.DecisionTreeRegressor/min_samples_leaf
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.tree.tree.DecisionTreeRegressor/min_samples_leaf
                  padre:implements: padre:DecisionTreeRegressor/min_samples_leaf
                  padre:optional: 'True'
                  padre:path: min_samples_leaf
                  padre:value_default: '1'
                  padre:value_type: '{integer, float}'
                  rdfs:comment: The minimum number of samples required to be at
                    a leaf node.
                  rdfs:label: min_samples_leaf
                algorithm:
                  '@schema':
                    '@id': padre:DecisionTreeRegressor/min_samples_leaf
                    '@type': padre:ModelParameters
                    padre:configures: padre:DecisionTreeRegressor
              - '@schema':
                  '@id': padre:sklearn.tree.tree.DecisionTreeRegressor/min_weight_fraction_leaf
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.tree.tree.DecisionTreeRegressor/min_weight_fraction_leaf
                  padre:implements: padre:DecisionTreeRegressor/min_weight_fraction_leaf
                  padre:optional: 'True'
                  padre:path: min_weight_fraction_leaf
                  padre:value_default: '1'
                  padre:value_type: float
                  rdfs:comment: The minimum weighted fraction of the sum total of
                    weights (of all the input samples) required to be at a leaf node.
                  rdfs:label: min_weight_fraction_leaf
                algorithm:
                  '@schema':
                    '@id': padre:DecisionTreeRegressor/min_weight_fraction_leaf
                    '@type': padre:ModelParameters
                    padre:configures: padre:DecisionTreeRegressor
              - '@schema':
                  '@id': padre:sklearn.tree.tree.DecisionTreeRegressor/max_features
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.tree.tree.DecisionTreeRegressor/max_features
                  padre:implements: padre:DecisionTreeRegressor/max_features
                  padre:optional: 'True'
                  padre:path: max_features
                  padre:value_default: None
                  padre:value_type: '{integer, float, ''auto'', ''sqrt'', ''log2'',
                  None}'
                  rdfs:comment: The number of features to consider when looking
                    for the best split.
                  rdfs:label: max_features
                algorithm:
                  '@schema':
                    '@id': padre:DecisionTreeRegressor/max_features
                    '@type': padre:ModelParameters
                    padre:configures: padre:DecisionTreeRegressor
              - '@schema':
                  '@id': padre:sklearn.tree.tree.DecisionTreeRegressor/random_state
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.tree.tree.DecisionTreeRegressor/random_state
                  padre:implements: padre:DecisionTreeRegressor/random_state
                  padre:optional: 'True'
                  padre:path: random_state
                  padre:value_default: None
                  padre:value_type: '{integer, RandomState instance, None}'
                  rdfs:comment: The seed of the pseudo random number generator to
                    use when shuffling the data. If int, random_state is the seed used
                    by the random number generator; If RandomState instance, random_state
                    is the random number generator; If None, the random number generator
                    is the RandomState instance used by np.random.
                  rdfs:label: random_state
                algorithm:
                  '@schema':
                    '@id': padre:DecisionTreeRegressor/random_state
                    '@type': padre:ModelParameters
                    padre:configures: padre:DecisionTreeRegressor
              - '@schema':
                  '@id': padre:sklearn.tree.tree.DecisionTreeRegressor/max_leaf_nodes
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.tree.tree.DecisionTreeRegressor/max_leaf_nodes
                  padre:implements: padre:DecisionTreeRegressor/max_leaf_nodes
                  padre:optional: 'True'
                  padre:path: max_leaf_nodes
                  padre:value_default: None
                  padre:value_type: integer
                  rdfs:comment: Grow a tree with max_leaf_nodes in best-first fashion.
                  rdfs:label: max_leaf_nodes
                algorithm:
                  '@schema':
                    '@id': padre:DecisionTreeRegressor/max_leaf_nodes
                    '@type': padre:ModelParameters
                    padre:configures: padre:DecisionTreeRegressor
              - '@schema':
                  '@id': padre:sklearn.tree.tree.DecisionTreeRegressor/min_impurity_decrease
                  '@type': padre:ModelParameters
                  padre:configures: padre:sklearn.tree.tree.DecisionTreeRegressor/min_impurity_decrease
                  padre:implements: padre:DecisionTreeRegressor/min_impurity_decrease
                  padre:optional: 'True'
                  padre:path: min_impurity_decrease
                  padre:value_default: '0'
                  padre:value_type: float
                  rdfs:comment: A node will be split if this split induces a decrease
                    of the impurity greater than or equal to this value.
                  rdfs:label: min_impurity_decrease
                algorithm:
                  '@schema':
                    '@id': padre:DecisionTreeRegressor/min_impurity_decrease
                    '@type': padre:ModelParameters
                    padre:configures: padre:DecisionTreeRegressor
            optimisation_parameters:
              - '@schema':
                  '@id': padre:sklearn.tree.tree.DecisionTreeRegressor/presort
                  '@type': padre:OptimisationParameters
                  padre:configures: padre:sklearn.tree.tree.DecisionTreeRegressor/presort
                  padre:implements: padre:DecisionTreeRegressor/presort
                  padre:optional: 'True'
                  padre:path: presort
                  padre:value_default: 'False'
                  padre:value_type: boolean
                  rdfs:comment: Whether to presort the data to speed up the finding
                    of best splits in fitting.
                  rdfs:label: presort
                algorithm:
                  '@schema':
                    '@id': padre:DecisionTreeRegressor/presort
                    '@type': padre:OptimisationParameters
                    padre:configures: padre:DecisionTreeRegressor
metadata:
  author: "Thomas Weissgerber"
  library:
    name: sklearn
    version: '>= 0.19.1'
  version: 0.1.0
